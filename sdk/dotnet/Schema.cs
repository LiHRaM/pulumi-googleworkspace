// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    /// <summary>
    /// Schema resource manages Google Workspace Schemas. Schema resides under the `https://www.googleapis.com/auth/admin.directory.userschema` client scope.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Googleworkspace = Pulumi.Googleworkspace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var birthday = new Googleworkspace.Schema("birthday", new()
    ///     {
    ///         Fields = new[]
    ///         {
    ///             new Googleworkspace.Inputs.SchemaFieldArgs
    ///             {
    ///                 FieldName = "birthday",
    ///                 FieldType = "DATE",
    ///             },
    ///         },
    ///         SchemaName = "birthday",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import googleworkspace:index/schema:Schema birthday Ab0C_DEFGhIJKLmNopQ1Rs==
    /// ```
    /// </summary>
    [GoogleworkspaceResourceType("googleworkspace:index/schema:Schema")]
    public partial class Schema : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Display name for the schema.
        /// </summary>
        [Output("displayName")]
        public Output<string> DisplayName { get; private set; } = null!;

        /// <summary>
        /// ETag of the resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// A list of fields in the schema.
        /// </summary>
        [Output("fields")]
        public Output<ImmutableArray<Outputs.SchemaField>> Fields { get; private set; } = null!;

        /// <summary>
        /// The unique identifier of the schema.
        /// </summary>
        [Output("schemaId")]
        public Output<string> SchemaId { get; private set; } = null!;

        /// <summary>
        /// The schema's name.
        /// </summary>
        [Output("schemaName")]
        public Output<string> SchemaName { get; private set; } = null!;


        /// <summary>
        /// Create a Schema resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Schema(string name, SchemaArgs args, CustomResourceOptions? options = null)
            : base("googleworkspace:index/schema:Schema", name, args ?? new SchemaArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Schema(string name, Input<string> id, SchemaState? state = null, CustomResourceOptions? options = null)
            : base("googleworkspace:index/schema:Schema", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Schema resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Schema Get(string name, Input<string> id, SchemaState? state = null, CustomResourceOptions? options = null)
        {
            return new Schema(name, id, state, options);
        }
    }

    public sealed class SchemaArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Display name for the schema.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        [Input("fields", required: true)]
        private InputList<Inputs.SchemaFieldArgs>? _fields;

        /// <summary>
        /// A list of fields in the schema.
        /// </summary>
        public InputList<Inputs.SchemaFieldArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.SchemaFieldArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// The schema's name.
        /// </summary>
        [Input("schemaName", required: true)]
        public Input<string> SchemaName { get; set; } = null!;

        public SchemaArgs()
        {
        }
        public static new SchemaArgs Empty => new SchemaArgs();
    }

    public sealed class SchemaState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Display name for the schema.
        /// </summary>
        [Input("displayName")]
        public Input<string>? DisplayName { get; set; }

        /// <summary>
        /// ETag of the resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("fields")]
        private InputList<Inputs.SchemaFieldGetArgs>? _fields;

        /// <summary>
        /// A list of fields in the schema.
        /// </summary>
        public InputList<Inputs.SchemaFieldGetArgs> Fields
        {
            get => _fields ?? (_fields = new InputList<Inputs.SchemaFieldGetArgs>());
            set => _fields = value;
        }

        /// <summary>
        /// The unique identifier of the schema.
        /// </summary>
        [Input("schemaId")]
        public Input<string>? SchemaId { get; set; }

        /// <summary>
        /// The schema's name.
        /// </summary>
        [Input("schemaName")]
        public Input<string>? SchemaName { get; set; }

        public SchemaState()
        {
        }
        public static new SchemaState Empty => new SchemaState();
    }
}
