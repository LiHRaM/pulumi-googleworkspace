// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    public static class GetRole
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var group_admin = Googleworkspace.GetRole.Invoke(new()
        ///     {
        ///         Name = "_GROUPS_ADMIN_ROLE",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["isSystemRole"] = group_admin.Apply(getRoleResult =&gt; getRoleResult).Apply(group_admin =&gt; group_admin.Apply(getRoleResult =&gt; getRoleResult.IsSystemRole)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetRoleResult> InvokeAsync(GetRoleArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetRoleResult>("googleworkspace:index/getRole:getRole", args ?? new GetRoleArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var group_admin = Googleworkspace.GetRole.Invoke(new()
        ///     {
        ///         Name = "_GROUPS_ADMIN_ROLE",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["isSystemRole"] = group_admin.Apply(getRoleResult =&gt; getRoleResult).Apply(group_admin =&gt; group_admin.Apply(getRoleResult =&gt; getRoleResult.IsSystemRole)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetRoleResult> Invoke(GetRoleInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetRoleResult>("googleworkspace:index/getRole:getRole", args ?? new GetRoleInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetRoleArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the role.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        public GetRoleArgs()
        {
        }
        public static new GetRoleArgs Empty => new GetRoleArgs();
    }

    public sealed class GetRoleInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Name of the role.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        public GetRoleInvokeArgs()
        {
        }
        public static new GetRoleInvokeArgs Empty => new GetRoleInvokeArgs();
    }


    [OutputType]
    public sealed class GetRoleResult
    {
        /// <summary>
        /// A short description of the role.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// ETag of the resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// ID of the role.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Returns true if the role is a super admin role.
        /// </summary>
        public readonly bool IsSuperAdminRole;
        /// <summary>
        /// Returns true if this is a pre-defined system role.
        /// </summary>
        public readonly bool IsSystemRole;
        /// <summary>
        /// Name of the role.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// The set of privileges that are granted to this role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetRolePrivilegeResult> Privileges;

        [OutputConstructor]
        private GetRoleResult(
            string description,

            string etag,

            string id,

            bool isSuperAdminRole,

            bool isSystemRole,

            string name,

            ImmutableArray<Outputs.GetRolePrivilegeResult> privileges)
        {
            Description = description;
            Etag = etag;
            Id = id;
            IsSuperAdminRole = isSuperAdminRole;
            IsSystemRole = isSystemRole;
            Name = name;
            Privileges = privileges;
        }
    }
}
