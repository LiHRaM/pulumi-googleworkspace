// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    public static class GetChromePolicySchema
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Googleworkspace.GetChromePolicySchema.Invoke(new()
        ///     {
        ///         SchemaName = "chrome.printers.AllowForUsers",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["fieldDescriptions"] = example.Apply(getChromePolicySchemaResult =&gt; getChromePolicySchemaResult.FieldDescriptions),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetChromePolicySchemaResult> InvokeAsync(GetChromePolicySchemaArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetChromePolicySchemaResult>("googleworkspace:index/getChromePolicySchema:getChromePolicySchema", args ?? new GetChromePolicySchemaArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = Googleworkspace.GetChromePolicySchema.Invoke(new()
        ///     {
        ///         SchemaName = "chrome.printers.AllowForUsers",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["fieldDescriptions"] = example.Apply(getChromePolicySchemaResult =&gt; getChromePolicySchemaResult.FieldDescriptions),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetChromePolicySchemaResult> Invoke(GetChromePolicySchemaInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetChromePolicySchemaResult>("googleworkspace:index/getChromePolicySchema:getChromePolicySchema", args ?? new GetChromePolicySchemaInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetChromePolicySchemaArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The full qualified name of the policy schema
        /// </summary>
        [Input("schemaName", required: true)]
        public string SchemaName { get; set; } = null!;

        public GetChromePolicySchemaArgs()
        {
        }
        public static new GetChromePolicySchemaArgs Empty => new GetChromePolicySchemaArgs();
    }

    public sealed class GetChromePolicySchemaInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The full qualified name of the policy schema
        /// </summary>
        [Input("schemaName", required: true)]
        public Input<string> SchemaName { get; set; } = null!;

        public GetChromePolicySchemaInvokeArgs()
        {
        }
        public static new GetChromePolicySchemaInvokeArgs Empty => new GetChromePolicySchemaInvokeArgs();
    }


    [OutputType]
    public sealed class GetChromePolicySchemaResult
    {
        /// <summary>
        /// Specific access restrictions related to this policy.
        /// </summary>
        public readonly ImmutableArray<string> AccessRestrictions;
        /// <summary>
        /// Additional key names that will be used to identify the target of the policy value. When specifying a policyTargetKey, each of the additional keys specified here will have to be included in the additionalTargetKeys map.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetChromePolicySchemaAdditionalTargetKeyNameResult> AdditionalTargetKeyNames;
        /// <summary>
        /// Schema definition using proto descriptor.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetChromePolicySchemaDefinitionResult> Definitions;
        /// <summary>
        /// Detailed description of each field that is part of the schema, represented as a JSON string.
        /// </summary>
        public readonly string FieldDescriptions;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Special notice messages related to setting certain values in certain fields in the schema.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetChromePolicySchemaNoticeResult> Notices;
        /// <summary>
        /// Description about the policy schema for user consumption.
        /// </summary>
        public readonly string PolicyDescription;
        /// <summary>
        /// The full qualified name of the policy schema
        /// </summary>
        public readonly string SchemaName;
        /// <summary>
        /// URI to related support article for this schema.
        /// </summary>
        public readonly string SupportUri;

        [OutputConstructor]
        private GetChromePolicySchemaResult(
            ImmutableArray<string> accessRestrictions,

            ImmutableArray<Outputs.GetChromePolicySchemaAdditionalTargetKeyNameResult> additionalTargetKeyNames,

            ImmutableArray<Outputs.GetChromePolicySchemaDefinitionResult> definitions,

            string fieldDescriptions,

            string id,

            ImmutableArray<Outputs.GetChromePolicySchemaNoticeResult> notices,

            string policyDescription,

            string schemaName,

            string supportUri)
        {
            AccessRestrictions = accessRestrictions;
            AdditionalTargetKeyNames = additionalTargetKeyNames;
            Definitions = definitions;
            FieldDescriptions = fieldDescriptions;
            Id = id;
            Notices = notices;
            PolicyDescription = policyDescription;
            SchemaName = schemaName;
            SupportUri = supportUri;
        }
    }
}
