// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    /// <summary>
    /// Group Member resource manages Google Workspace Groups Members. Group Member resides under the `https://www.googleapis.com/auth/admin.directory.group` client scope.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using Pulumi;
    /// using Googleworkspace = Pulumi.Googleworkspace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var sales = new Googleworkspace.Group("sales", new()
    ///     {
    ///         Email = "sales@example.com",
    ///     });
    /// 
    ///     var michael = new Googleworkspace.User("michael", new()
    ///     {
    ///         PrimaryEmail = "michael.scott@example.com",
    ///         Password = "34819d7beeabb9260a5c854bc85b3e44",
    ///         HashFunction = "MD5",
    ///         Name = new Googleworkspace.Inputs.UserNameArgs
    ///         {
    ///             FamilyName = "Scott",
    ///             GivenName = "Michael",
    ///         },
    ///     });
    /// 
    ///     var manager = new Googleworkspace.GroupMember("manager", new()
    ///     {
    ///         GroupId = sales.Id,
    ///         Email = michael.PrimaryEmail,
    ///         Role = "MANAGER",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import googleworkspace:index/groupMember:GroupMember manager groups/01abcde23fg4h5i/members/123456789012345678901
    /// ```
    /// </summary>
    [GoogleworkspaceResourceType("googleworkspace:index/groupMember:GroupMember")]
    public partial class GroupMember : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
        /// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
        /// `DISABLED`: Remove subscription. - `NONE`: No messages.
        /// </summary>
        [Output("deliverySettings")]
        public Output<string?> DeliverySettings { get; private set; } = null!;

        /// <summary>
        /// The member's email address. A member can be a user or another group. This property is required when adding a member to a
        /// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
        /// automatically reflects the email address changes.
        /// </summary>
        [Output("email")]
        public Output<string> Email { get; private set; } = null!;

        /// <summary>
        /// ETag of the resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
        /// ID.
        /// </summary>
        [Output("groupId")]
        public Output<string> GroupId { get; private set; } = null!;

        /// <summary>
        /// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
        /// </summary>
        [Output("memberId")]
        public Output<string> MemberId { get; private set; } = null!;

        /// <summary>
        /// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
        /// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
        /// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
        /// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
        /// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
        /// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
        /// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
        /// </summary>
        [Output("role")]
        public Output<string?> Role { get; private set; } = null!;

        /// <summary>
        /// Status of member.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
        /// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
        /// member is a user.
        /// </summary>
        [Output("type")]
        public Output<string?> Type { get; private set; } = null!;


        /// <summary>
        /// Create a GroupMember resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public GroupMember(string name, GroupMemberArgs args, CustomResourceOptions? options = null)
            : base("googleworkspace:index/groupMember:GroupMember", name, args ?? new GroupMemberArgs(), MakeResourceOptions(options, ""))
        {
        }

        private GroupMember(string name, Input<string> id, GroupMemberState? state = null, CustomResourceOptions? options = null)
            : base("googleworkspace:index/groupMember:GroupMember", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing GroupMember resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static GroupMember Get(string name, Input<string> id, GroupMemberState? state = null, CustomResourceOptions? options = null)
        {
            return new GroupMember(name, id, state, options);
        }
    }

    public sealed class GroupMemberArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
        /// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
        /// `DISABLED`: Remove subscription. - `NONE`: No messages.
        /// </summary>
        [Input("deliverySettings")]
        public Input<string>? DeliverySettings { get; set; }

        /// <summary>
        /// The member's email address. A member can be a user or another group. This property is required when adding a member to a
        /// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
        /// automatically reflects the email address changes.
        /// </summary>
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        /// <summary>
        /// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
        /// ID.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
        /// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
        /// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
        /// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
        /// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
        /// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
        /// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
        /// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
        /// member is a user.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GroupMemberArgs()
        {
        }
        public static new GroupMemberArgs Empty => new GroupMemberArgs();
    }

    public sealed class GroupMemberState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
        /// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
        /// `DISABLED`: Remove subscription. - `NONE`: No messages.
        /// </summary>
        [Input("deliverySettings")]
        public Input<string>? DeliverySettings { get; set; }

        /// <summary>
        /// The member's email address. A member can be a user or another group. This property is required when adding a member to a
        /// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
        /// automatically reflects the email address changes.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// ETag of the resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        /// <summary>
        /// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
        /// ID.
        /// </summary>
        [Input("groupId")]
        public Input<string>? GroupId { get; set; }

        /// <summary>
        /// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
        /// </summary>
        [Input("memberId")]
        public Input<string>? MemberId { get; set; }

        /// <summary>
        /// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
        /// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
        /// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
        /// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
        /// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
        /// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
        /// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
        /// </summary>
        [Input("role")]
        public Input<string>? Role { get; set; }

        /// <summary>
        /// Status of member.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
        /// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
        /// member is a user.
        /// </summary>
        [Input("type")]
        public Input<string>? Type { get; set; }

        public GroupMemberState()
        {
        }
        public static new GroupMemberState Empty => new GroupMemberState();
    }
}
