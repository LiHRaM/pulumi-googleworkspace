// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    public static class GetGroupMembers
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var salesGroup = Googleworkspace.GetGroup.Invoke(new()
        ///     {
        ///         Email = "sales@example.com",
        ///     });
        /// 
        ///     var salesGroupMembers = Googleworkspace.GetGroupMembers.Invoke(new()
        ///     {
        ///         GroupId = salesGroup.Apply(getGroupResult =&gt; getGroupResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["groupMembers"] = salesGroupMembers.Apply(getGroupMembersResult =&gt; getGroupMembersResult.Members),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGroupMembersResult> InvokeAsync(GetGroupMembersArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGroupMembersResult>("googleworkspace:index/getGroupMembers:getGroupMembers", args ?? new GetGroupMembersArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var salesGroup = Googleworkspace.GetGroup.Invoke(new()
        ///     {
        ///         Email = "sales@example.com",
        ///     });
        /// 
        ///     var salesGroupMembers = Googleworkspace.GetGroupMembers.Invoke(new()
        ///     {
        ///         GroupId = salesGroup.Apply(getGroupResult =&gt; getGroupResult.Id),
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["groupMembers"] = salesGroupMembers.Apply(getGroupMembersResult =&gt; getGroupMembersResult.Members),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGroupMembersResult> Invoke(GetGroupMembersInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGroupMembersResult>("googleworkspace:index/getGroupMembers:getGroupMembers", args ?? new GetGroupMembersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupMembersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
        /// </summary>
        [Input("groupId", required: true)]
        public string GroupId { get; set; } = null!;

        /// <summary>
        /// If true, lists indirect group memberships
        /// </summary>
        [Input("includeDerivedMembership")]
        public bool? IncludeDerivedMembership { get; set; }

        public GetGroupMembersArgs()
        {
        }
        public static new GetGroupMembersArgs Empty => new GetGroupMembersArgs();
    }

    public sealed class GetGroupMembersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
        /// </summary>
        [Input("groupId", required: true)]
        public Input<string> GroupId { get; set; } = null!;

        /// <summary>
        /// If true, lists indirect group memberships
        /// </summary>
        [Input("includeDerivedMembership")]
        public Input<bool>? IncludeDerivedMembership { get; set; }

        public GetGroupMembersInvokeArgs()
        {
        }
        public static new GetGroupMembersInvokeArgs Empty => new GetGroupMembersInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupMembersResult
    {
        /// <summary>
        /// ETag of the resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group ID.
        /// </summary>
        public readonly string GroupId;
        /// <summary>
        /// The ID of this resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// If true, lists indirect group memberships
        /// </summary>
        public readonly bool? IncludeDerivedMembership;
        /// <summary>
        /// The members of the group
        /// </summary>
        public readonly ImmutableArray<Outputs.GetGroupMembersMemberResult> Members;

        [OutputConstructor]
        private GetGroupMembersResult(
            string etag,

            string groupId,

            string id,

            bool? includeDerivedMembership,

            ImmutableArray<Outputs.GetGroupMembersMemberResult> members)
        {
            Etag = etag;
            GroupId = groupId;
            Id = id;
            IncludeDerivedMembership = includeDerivedMembership;
            Members = members;
        }
    }
}
