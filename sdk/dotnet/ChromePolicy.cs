// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Googleworkspace = Pulumi.Googleworkspace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var exampleOrgUnit = new Googleworkspace.OrgUnit("exampleOrgUnit", new()
    ///     {
    ///         ParentOrgUnitPath = "/",
    ///     });
    /// 
    ///     var exampleChromePolicy = new Googleworkspace.ChromePolicy("exampleChromePolicy", new()
    ///     {
    ///         OrgUnitId = googleworkspace_org_unit.Test.Id,
    ///         Policies = new[]
    ///         {
    ///             new Googleworkspace.Inputs.ChromePolicyPolicyArgs
    ///             {
    ///                 SchemaName = "chrome.users.MaxConnectionsPerProxy",
    ///                 SchemaValues = 
    ///                 {
    ///                     { "maxConnectionsPerProxy", JsonSerializer.Serialize(34) },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// </summary>
    [GoogleworkspaceResourceType("googleworkspace:index/chromePolicy:ChromePolicy")]
    public partial class ChromePolicy : global::Pulumi.CustomResource
    {
        /// <summary>
        /// The target org unit on which this policy is applied.
        /// </summary>
        [Output("orgUnitId")]
        public Output<string> OrgUnitId { get; private set; } = null!;

        /// <summary>
        /// Policies to set for the org unit
        /// </summary>
        [Output("policies")]
        public Output<ImmutableArray<Outputs.ChromePolicyPolicy>> Policies { get; private set; } = null!;


        /// <summary>
        /// Create a ChromePolicy resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ChromePolicy(string name, ChromePolicyArgs args, CustomResourceOptions? options = null)
            : base("googleworkspace:index/chromePolicy:ChromePolicy", name, args ?? new ChromePolicyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ChromePolicy(string name, Input<string> id, ChromePolicyState? state = null, CustomResourceOptions? options = null)
            : base("googleworkspace:index/chromePolicy:ChromePolicy", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ChromePolicy resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ChromePolicy Get(string name, Input<string> id, ChromePolicyState? state = null, CustomResourceOptions? options = null)
        {
            return new ChromePolicy(name, id, state, options);
        }
    }

    public sealed class ChromePolicyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The target org unit on which this policy is applied.
        /// </summary>
        [Input("orgUnitId", required: true)]
        public Input<string> OrgUnitId { get; set; } = null!;

        [Input("policies", required: true)]
        private InputList<Inputs.ChromePolicyPolicyArgs>? _policies;

        /// <summary>
        /// Policies to set for the org unit
        /// </summary>
        public InputList<Inputs.ChromePolicyPolicyArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.ChromePolicyPolicyArgs>());
            set => _policies = value;
        }

        public ChromePolicyArgs()
        {
        }
        public static new ChromePolicyArgs Empty => new ChromePolicyArgs();
    }

    public sealed class ChromePolicyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The target org unit on which this policy is applied.
        /// </summary>
        [Input("orgUnitId")]
        public Input<string>? OrgUnitId { get; set; }

        [Input("policies")]
        private InputList<Inputs.ChromePolicyPolicyGetArgs>? _policies;

        /// <summary>
        /// Policies to set for the org unit
        /// </summary>
        public InputList<Inputs.ChromePolicyPolicyGetArgs> Policies
        {
            get => _policies ?? (_policies = new InputList<Inputs.ChromePolicyPolicyGetArgs>());
            set => _policies = value;
        }

        public ChromePolicyState()
        {
        }
        public static new ChromePolicyState Empty => new ChromePolicyState();
    }
}
