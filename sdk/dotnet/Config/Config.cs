// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Immutable;

namespace Pulumi.Googleworkspace
{
    public static class Config
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "IDE1006", Justification = 
        "Double underscore prefix used to avoid conflicts with variable names.")]
        private sealed class __Value<T>
        {
            private readonly Func<T> _getter;
            private T _value = default!;
            private bool _set;

            public __Value(Func<T> getter)
            {
                _getter = getter;
            }

            public T Get() => _set ? _value : _getter();

            public void Set(T value)
            {
                _value = value;
                _set = true;
            }
        }

        private static readonly Pulumi.Config __config = new Pulumi.Config("googleworkspace");

        private static readonly __Value<string?> _accessToken = new __Value<string?>(() => __config.Get("accessToken"));
        /// <summary>
        /// A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the `Authorization: Bearer`
        /// token used to authenticate HTTP requests to Google Admin SDK APIs. This is an alternative to `credentials`, and ignores
        /// the `oauth_scopes` field. If both are specified, `access_token` will be used over the `credentials` field.
        /// </summary>
        public static string? AccessToken
        {
            get => _accessToken.Get();
            set => _accessToken.Set(value);
        }

        private static readonly __Value<string?> _credentials = new __Value<string?>(() => __config.Get("credentials"));
        /// <summary>
        /// Either the path to or the contents of a service account key file in JSON format you can manage key files using the Cloud
        /// Console). If not provided, the application default credentials will be used.
        /// </summary>
        public static string? Credentials
        {
            get => _credentials.Get();
            set => _credentials.Set(value);
        }

        private static readonly __Value<string?> _customerId = new __Value<string?>(() => __config.Get("customerId"));
        /// <summary>
        /// The customer id provided with your Google Workspace subscription. It is found in the admin console under Account
        /// Settings.
        /// </summary>
        public static string? CustomerId
        {
            get => _customerId.Get();
            set => _customerId.Set(value);
        }

        private static readonly __Value<string?> _impersonatedUserEmail = new __Value<string?>(() => __config.Get("impersonatedUserEmail"));
        /// <summary>
        /// The impersonated user's email with access to the Admin APIs can access the Admin SDK Directory API.
        /// `impersonated_user_email` is required for all services except group and user management.
        /// </summary>
        public static string? ImpersonatedUserEmail
        {
            get => _impersonatedUserEmail.Get();
            set => _impersonatedUserEmail.Set(value);
        }

        private static readonly __Value<ImmutableArray<string>> _oauthScopes = new __Value<ImmutableArray<string>>(() => __config.GetObject<ImmutableArray<string>>("oauthScopes"));
        /// <summary>
        /// The list of the scopes required for your application (for a list of possible scopes, see [Authorize
        /// requests](https://developers.google.com/admin-sdk/directory/v1/guides/authorizing))
        /// </summary>
        public static ImmutableArray<string> OauthScopes
        {
            get => _oauthScopes.Get();
            set => _oauthScopes.Set(value);
        }

        private static readonly __Value<string?> _serviceAccount = new __Value<string?>(() => __config.Get("serviceAccount"));
        /// <summary>
        /// The service account used to create the provided `access_token` if authenticating using the `access_token` method and
        /// needing to impersonate a user. This service account will require the GCP role `Service Account Token Creator` if needing
        /// to impersonate a user.
        /// </summary>
        public static string? ServiceAccount
        {
            get => _serviceAccount.Get();
            set => _serviceAccount.Set(value);
        }

    }
}
