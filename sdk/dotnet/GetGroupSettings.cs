// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    public static class GetGroupSettings
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sales_settings = Googleworkspace.GetGroupSettings.Invoke(new()
        ///     {
        ///         Email = "sales@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["whoCanJoinSales"] = sales_settings.Apply(getGroupSettingsResult =&gt; getGroupSettingsResult).Apply(sales_settings =&gt; sales_settings.Apply(getGroupSettingsResult =&gt; getGroupSettingsResult.WhoCanJoin)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGroupSettingsResult> InvokeAsync(GetGroupSettingsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGroupSettingsResult>("googleworkspace:index/getGroupSettings:getGroupSettings", args ?? new GetGroupSettingsArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sales_settings = Googleworkspace.GetGroupSettings.Invoke(new()
        ///     {
        ///         Email = "sales@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["whoCanJoinSales"] = sales_settings.Apply(getGroupSettingsResult =&gt; getGroupSettingsResult).Apply(sales_settings =&gt; sales_settings.Apply(getGroupSettingsResult =&gt; getGroupSettingsResult.WhoCanJoin)),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGroupSettingsResult> Invoke(GetGroupSettingsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGroupSettingsResult>("googleworkspace:index/getGroupSettings:getGroupSettings", args ?? new GetGroupSettingsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupSettingsArgs : global::Pulumi.InvokeArgs
    {
        [Input("email", required: true)]
        public string Email { get; set; } = null!;

        public GetGroupSettingsArgs()
        {
        }
        public static new GetGroupSettingsArgs Empty => new GetGroupSettingsArgs();
    }

    public sealed class GetGroupSettingsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("email", required: true)]
        public Input<string> Email { get; set; } = null!;

        public GetGroupSettingsInvokeArgs()
        {
        }
        public static new GetGroupSettingsInvokeArgs Empty => new GetGroupSettingsInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupSettingsResult
    {
        public readonly bool AllowExternalMembers;
        public readonly bool AllowWebPosting;
        public readonly bool ArchiveOnly;
        public readonly string CustomFooterText;
        public readonly string CustomReplyTo;
        public readonly bool CustomRolesEnabledForSettingsToBeMerged;
        public readonly string DefaultMessageDenyNotificationText;
        public readonly string Description;
        public readonly string Email;
        public readonly bool EnableCollaborativeInbox;
        public readonly string Id;
        public readonly bool IncludeCustomFooter;
        public readonly bool IncludeInGlobalAddressList;
        public readonly bool IsArchived;
        public readonly bool MembersCanPostAsTheGroup;
        public readonly string MessageModerationLevel;
        public readonly string Name;
        public readonly string PrimaryLanguage;
        public readonly string ReplyTo;
        public readonly bool SendMessageDenyNotification;
        public readonly string SpamModerationLevel;
        public readonly string WhoCanAssistContent;
        public readonly string WhoCanContactOwner;
        public readonly string WhoCanDiscoverGroup;
        public readonly string WhoCanJoin;
        public readonly string WhoCanLeaveGroup;
        public readonly string WhoCanModerateContent;
        public readonly string WhoCanModerateMembers;
        public readonly string WhoCanPostMessage;
        public readonly string WhoCanViewGroup;
        public readonly string WhoCanViewMembership;

        [OutputConstructor]
        private GetGroupSettingsResult(
            bool allowExternalMembers,

            bool allowWebPosting,

            bool archiveOnly,

            string customFooterText,

            string customReplyTo,

            bool customRolesEnabledForSettingsToBeMerged,

            string defaultMessageDenyNotificationText,

            string description,

            string email,

            bool enableCollaborativeInbox,

            string id,

            bool includeCustomFooter,

            bool includeInGlobalAddressList,

            bool isArchived,

            bool membersCanPostAsTheGroup,

            string messageModerationLevel,

            string name,

            string primaryLanguage,

            string replyTo,

            bool sendMessageDenyNotification,

            string spamModerationLevel,

            string whoCanAssistContent,

            string whoCanContactOwner,

            string whoCanDiscoverGroup,

            string whoCanJoin,

            string whoCanLeaveGroup,

            string whoCanModerateContent,

            string whoCanModerateMembers,

            string whoCanPostMessage,

            string whoCanViewGroup,

            string whoCanViewMembership)
        {
            AllowExternalMembers = allowExternalMembers;
            AllowWebPosting = allowWebPosting;
            ArchiveOnly = archiveOnly;
            CustomFooterText = customFooterText;
            CustomReplyTo = customReplyTo;
            CustomRolesEnabledForSettingsToBeMerged = customRolesEnabledForSettingsToBeMerged;
            DefaultMessageDenyNotificationText = defaultMessageDenyNotificationText;
            Description = description;
            Email = email;
            EnableCollaborativeInbox = enableCollaborativeInbox;
            Id = id;
            IncludeCustomFooter = includeCustomFooter;
            IncludeInGlobalAddressList = includeInGlobalAddressList;
            IsArchived = isArchived;
            MembersCanPostAsTheGroup = membersCanPostAsTheGroup;
            MessageModerationLevel = messageModerationLevel;
            Name = name;
            PrimaryLanguage = primaryLanguage;
            ReplyTo = replyTo;
            SendMessageDenyNotification = sendMessageDenyNotification;
            SpamModerationLevel = spamModerationLevel;
            WhoCanAssistContent = whoCanAssistContent;
            WhoCanContactOwner = whoCanContactOwner;
            WhoCanDiscoverGroup = whoCanDiscoverGroup;
            WhoCanJoin = whoCanJoin;
            WhoCanLeaveGroup = whoCanLeaveGroup;
            WhoCanModerateContent = whoCanModerateContent;
            WhoCanModerateMembers = whoCanModerateMembers;
            WhoCanPostMessage = whoCanPostMessage;
            WhoCanViewGroup = whoCanViewGroup;
            WhoCanViewMembership = whoCanViewMembership;
        }
    }
}
