// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    public static class GetUser
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dwight = Googleworkspace.GetUser.Invoke(new()
        ///     {
        ///         PrimaryEmail = "dwight.schrute@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["isUserAdmin"] = dwight.Apply(getUserResult =&gt; getUserResult.IsAdmin),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetUserResult> InvokeAsync(GetUserArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetUserResult>("googleworkspace:index/getUser:getUser", args ?? new GetUserArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var dwight = Googleworkspace.GetUser.Invoke(new()
        ///     {
        ///         PrimaryEmail = "dwight.schrute@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["isUserAdmin"] = dwight.Apply(getUserResult =&gt; getUserResult.IsAdmin),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetUserResult> Invoke(GetUserInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetUserResult>("googleworkspace:index/getUser:getUser", args ?? new GetUserInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetUserArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the user.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        /// </summary>
        [Input("primaryEmail")]
        public string? PrimaryEmail { get; set; }

        public GetUserArgs()
        {
        }
        public static new GetUserArgs Empty => new GetUserArgs();
    }

    public sealed class GetUserInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the user.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        /// <summary>
        /// The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        /// </summary>
        [Input("primaryEmail")]
        public Input<string>? PrimaryEmail { get; set; }

        public GetUserInvokeArgs()
        {
        }
        public static new GetUserInvokeArgs Empty => new GetUserInvokeArgs();
    }


    [OutputType]
    public sealed class GetUserResult
    {
        /// <summary>
        /// A list of the user's addresses. The maximum allowed data size is 10Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserAddressResult> Addresses;
        /// <summary>
        /// This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
        /// </summary>
        public readonly bool AgreedToTerms;
        /// <summary>
        /// asps.list of the user's alias email addresses.
        /// </summary>
        public readonly ImmutableArray<string> Aliases;
        /// <summary>
        /// Indicates if user is archived.
        /// </summary>
        public readonly bool Archived;
        /// <summary>
        /// Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs in via a third-party identity provider.
        /// </summary>
        public readonly bool ChangePasswordAtNextLogin;
        /// <summary>
        /// The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        /// </summary>
        public readonly string CreationTime;
        /// <summary>
        /// Custom fields of the user.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserCustomSchemaResult> CustomSchemas;
        /// <summary>
        /// The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId. As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the account's primary domain in the domain parameter of a users.list request.
        /// </summary>
        public readonly string CustomerId;
        /// <summary>
        /// The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
        /// </summary>
        public readonly string DeletionTime;
        /// <summary>
        /// A list of the user's email addresses. The maximum allowed data size is 10Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserEmailResult> Emails;
        /// <summary>
        /// ETag of the resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserExternalIdResult> ExternalIds;
        /// <summary>
        /// Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        /// </summary>
        public readonly string HashFunction;
        /// <summary>
        /// The unique ID for the user.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserImResult> Ims;
        /// <summary>
        /// Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain.
        /// </summary>
        public readonly bool IncludeInGlobalAddressList;
        /// <summary>
        /// If true, the user's IP address is added to the allow list.
        /// </summary>
        public readonly bool IpAllowlist;
        /// <summary>
        /// Indicates a user with super admininistrator privileges.
        /// </summary>
        public readonly bool IsAdmin;
        /// <summary>
        /// Indicates if the user is a delegated administrator.
        /// </summary>
        public readonly bool IsDelegatedAdmin;
        /// <summary>
        /// Is 2-step verification enforced.
        /// </summary>
        public readonly bool IsEnforcedIn2StepVerification;
        /// <summary>
        /// Is enrolled in 2-step verification.
        /// </summary>
        public readonly bool IsEnrolledIn2StepVerification;
        /// <summary>
        /// Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.
        /// </summary>
        public readonly bool IsMailboxSetup;
        /// <summary>
        /// A list of the user's keywords. The maximum allowed data size is 1Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserKeywordResult> Keywords;
        /// <summary>
        /// A list of the user's languages. The maximum allowed data size is 1Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserLanguageResult> Languages;
        /// <summary>
        /// The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        /// </summary>
        public readonly string LastLoginTime;
        /// <summary>
        /// A list of the user's locations. The maximum allowed data size is 10Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserLocationResult> Locations;
        /// <summary>
        /// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserNameResult> Names;
        /// <summary>
        /// asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.
        /// </summary>
        public readonly ImmutableArray<string> NonEditableAliases;
        /// <summary>
        /// The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (/).
        /// </summary>
        public readonly string OrgUnitPath;
        /// <summary>
        /// A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserOrganizationResult> Organizations;
        /// <summary>
        /// Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8 characters is required. The maximum length is 100 characters. As the API does not return the value of password, this field is write-only, and the value stored in the state will be what is provided in the configuration. The field is required on create and will be empty on import.
        /// </summary>
        public readonly string Password;
        /// <summary>
        /// A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserPhoneResult> Phones;
        /// <summary>
        /// A list of POSIX account information for the user.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserPosixAccountResult> PosixAccounts;
        /// <summary>
        /// The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        /// </summary>
        public readonly string PrimaryEmail;
        /// <summary>
        /// Recovery email of the user.
        /// </summary>
        public readonly string RecoveryEmail;
        /// <summary>
        /// Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: +16506661212.
        /// </summary>
        public readonly string RecoveryPhone;
        /// <summary>
        /// A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserRelationResult> Relations;
        /// <summary>
        /// A list of SSH public keys. The maximum allowed data size is 10Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserSshPublicKeyResult> SshPublicKeys;
        /// <summary>
        /// Indicates if user is suspended.
        /// </summary>
        public readonly bool Suspended;
        /// <summary>
        /// Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the suspended property is true.
        /// </summary>
        public readonly string SuspensionReason;
        /// <summary>
        /// ETag of the user's photo
        /// </summary>
        public readonly string ThumbnailPhotoEtag;
        /// <summary>
        /// Photo Url of the user.
        /// </summary>
        public readonly string ThumbnailPhotoUrl;
        /// <summary>
        /// A list of the user's websites. The maximum allowed data size is 2Kb.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetUserWebsiteResult> Websites;

        [OutputConstructor]
        private GetUserResult(
            ImmutableArray<Outputs.GetUserAddressResult> addresses,

            bool agreedToTerms,

            ImmutableArray<string> aliases,

            bool archived,

            bool changePasswordAtNextLogin,

            string creationTime,

            ImmutableArray<Outputs.GetUserCustomSchemaResult> customSchemas,

            string customerId,

            string deletionTime,

            ImmutableArray<Outputs.GetUserEmailResult> emails,

            string etag,

            ImmutableArray<Outputs.GetUserExternalIdResult> externalIds,

            string hashFunction,

            string id,

            ImmutableArray<Outputs.GetUserImResult> ims,

            bool includeInGlobalAddressList,

            bool ipAllowlist,

            bool isAdmin,

            bool isDelegatedAdmin,

            bool isEnforcedIn2StepVerification,

            bool isEnrolledIn2StepVerification,

            bool isMailboxSetup,

            ImmutableArray<Outputs.GetUserKeywordResult> keywords,

            ImmutableArray<Outputs.GetUserLanguageResult> languages,

            string lastLoginTime,

            ImmutableArray<Outputs.GetUserLocationResult> locations,

            ImmutableArray<Outputs.GetUserNameResult> names,

            ImmutableArray<string> nonEditableAliases,

            string orgUnitPath,

            ImmutableArray<Outputs.GetUserOrganizationResult> organizations,

            string password,

            ImmutableArray<Outputs.GetUserPhoneResult> phones,

            ImmutableArray<Outputs.GetUserPosixAccountResult> posixAccounts,

            string primaryEmail,

            string recoveryEmail,

            string recoveryPhone,

            ImmutableArray<Outputs.GetUserRelationResult> relations,

            ImmutableArray<Outputs.GetUserSshPublicKeyResult> sshPublicKeys,

            bool suspended,

            string suspensionReason,

            string thumbnailPhotoEtag,

            string thumbnailPhotoUrl,

            ImmutableArray<Outputs.GetUserWebsiteResult> websites)
        {
            Addresses = addresses;
            AgreedToTerms = agreedToTerms;
            Aliases = aliases;
            Archived = archived;
            ChangePasswordAtNextLogin = changePasswordAtNextLogin;
            CreationTime = creationTime;
            CustomSchemas = customSchemas;
            CustomerId = customerId;
            DeletionTime = deletionTime;
            Emails = emails;
            Etag = etag;
            ExternalIds = externalIds;
            HashFunction = hashFunction;
            Id = id;
            Ims = ims;
            IncludeInGlobalAddressList = includeInGlobalAddressList;
            IpAllowlist = ipAllowlist;
            IsAdmin = isAdmin;
            IsDelegatedAdmin = isDelegatedAdmin;
            IsEnforcedIn2StepVerification = isEnforcedIn2StepVerification;
            IsEnrolledIn2StepVerification = isEnrolledIn2StepVerification;
            IsMailboxSetup = isMailboxSetup;
            Keywords = keywords;
            Languages = languages;
            LastLoginTime = lastLoginTime;
            Locations = locations;
            Names = names;
            NonEditableAliases = nonEditableAliases;
            OrgUnitPath = orgUnitPath;
            Organizations = organizations;
            Password = password;
            Phones = phones;
            PosixAccounts = posixAccounts;
            PrimaryEmail = primaryEmail;
            RecoveryEmail = recoveryEmail;
            RecoveryPhone = recoveryPhone;
            Relations = relations;
            SshPublicKeys = sshPublicKeys;
            Suspended = suspended;
            SuspensionReason = suspensionReason;
            ThumbnailPhotoEtag = thumbnailPhotoEtag;
            ThumbnailPhotoUrl = thumbnailPhotoUrl;
            Websites = websites;
        }
    }
}
