// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    /// <summary>
    /// User resource manages Google Workspace Users. User resides under the `https://www.googleapis.com/auth/admin.directory.user` client scope.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Text.Json;
    /// using Pulumi;
    /// using Googleworkspace = Pulumi.Googleworkspace;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var birthday = new Googleworkspace.Schema("birthday", new()
    ///     {
    ///         SchemaName = "birthday",
    ///         Fields = new[]
    ///         {
    ///             new Googleworkspace.Inputs.SchemaFieldArgs
    ///             {
    ///                 FieldName = "birthday",
    ///                 FieldType = "DATE",
    ///             },
    ///             new Googleworkspace.Inputs.SchemaFieldArgs
    ///             {
    ///                 FieldName = "favorite-numbers",
    ///                 FieldType = "INT64",
    ///                 MultiValued = true,
    ///                 NumericIndexingSpec = new Googleworkspace.Inputs.SchemaFieldNumericIndexingSpecArgs
    ///                 {
    ///                     MinValue = 1,
    ///                     MaxValue = 100,
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var dwight = new Googleworkspace.User("dwight", new()
    ///     {
    ///         PrimaryEmail = "dwight.schrute@example.com",
    ///         Password = "34819d7beeabb9260a5c854bc85b3e44",
    ///         HashFunction = "MD5",
    ///         Name = new Googleworkspace.Inputs.UserNameArgs
    ///         {
    ///             FamilyName = "Schrute",
    ///             GivenName = "Dwight",
    ///         },
    ///         Aliases = new[]
    ///         {
    ///             "assistant_to_regional_manager@example.com",
    ///         },
    ///         Emails = new[]
    ///         {
    ///             new Googleworkspace.Inputs.UserEmailArgs
    ///             {
    ///                 Address = "dwight.schrute.dunder.mifflin@example.com",
    ///                 Type = "work",
    ///             },
    ///         },
    ///         Relations = new[]
    ///         {
    ///             new Googleworkspace.Inputs.UserRelationArgs
    ///             {
    ///                 Type = "assistant",
    ///                 Value = "Michael Scott",
    ///             },
    ///         },
    ///         Addresses = new[]
    ///         {
    ///             new Googleworkspace.Inputs.UserAddressArgs
    ///             {
    ///                 Country = "USA",
    ///                 CountryCode = "US",
    ///                 Locality = "Scranton",
    ///                 PoBox = "123",
    ///                 PostalCode = "18508",
    ///                 Region = "PA",
    ///                 StreetAddress = "123 Dunder Mifflin Pkwy",
    ///                 Type = "work",
    ///             },
    ///         },
    ///         Organizations = new[]
    ///         {
    ///             new Googleworkspace.Inputs.UserOrganizationArgs
    ///             {
    ///                 Department = "sales",
    ///                 Location = "Scranton",
    ///                 Name = "Dunder Mifflin",
    ///                 Primary = true,
    ///                 Symbol = "DUMI",
    ///                 Title = "member",
    ///                 Type = "work",
    ///             },
    ///         },
    ///         Phones = new[]
    ///         {
    ///             new Googleworkspace.Inputs.UserPhoneArgs
    ///             {
    ///                 Type = "home",
    ///                 Value = "555-123-7890",
    ///             },
    ///             new Googleworkspace.Inputs.UserPhoneArgs
    ///             {
    ///                 Type = "work",
    ///                 Primary = true,
    ///                 Value = "555-123-0987",
    ///             },
    ///         },
    ///         Keywords = new[]
    ///         {
    ///             new Googleworkspace.Inputs.UserKeywordArgs
    ///             {
    ///                 Type = "occupation",
    ///                 Value = "salesperson",
    ///             },
    ///         },
    ///         CustomSchemas = new[]
    ///         {
    ///             new Googleworkspace.Inputs.UserCustomSchemaArgs
    ///             {
    ///                 SchemaName = birthday.SchemaName,
    ///                 SchemaValues = 
    ///                 {
    ///                     { "birthday", JsonSerializer.Serialize("1970-01-20") },
    ///                     { "favorite-numbers", JsonSerializer.Serialize(new[]
    ///                     {
    ///                         1,
    ///                         2,
    ///                         3,
    ///                     }) },
    ///                 },
    ///             },
    ///         },
    ///         RecoveryEmail = "dwightkschrute@example.com",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// ```sh
    ///  $ pulumi import googleworkspace:index/user:User dwight 123456789012345678901
    /// ```
    /// 
    /// # or with email as id
    /// 
    /// ```sh
    ///  $ pulumi import googleworkspace:index/user:User dwight dwight.schrute@example.com
    /// ```
    /// </summary>
    [GoogleworkspaceResourceType("googleworkspace:index/user:User")]
    public partial class User : global::Pulumi.CustomResource
    {
        /// <summary>
        /// A list of the user's addresses. The maximum allowed data size is 10Kb.
        /// </summary>
        [Output("addresses")]
        public Output<ImmutableArray<Outputs.UserAddress>> Addresses { get; private set; } = null!;

        /// <summary>
        /// This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
        /// </summary>
        [Output("agreedToTerms")]
        public Output<bool> AgreedToTerms { get; private set; } = null!;

        /// <summary>
        /// asps.list of the user's alias email addresses.
        /// </summary>
        [Output("aliases")]
        public Output<ImmutableArray<string>> Aliases { get; private set; } = null!;

        /// <summary>
        /// Indicates if user is archived.
        /// </summary>
        [Output("archived")]
        public Output<bool?> Archived { get; private set; } = null!;

        /// <summary>
        /// Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
        /// in via a third-party identity provider.
        /// </summary>
        [Output("changePasswordAtNextLogin")]
        public Output<bool?> ChangePasswordAtNextLogin { get; private set; } = null!;

        /// <summary>
        /// The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date
        /// plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        /// </summary>
        [Output("creationTime")]
        public Output<string> CreationTime { get; private set; } = null!;

        /// <summary>
        /// Custom fields of the user.
        /// </summary>
        [Output("customSchemas")]
        public Output<ImmutableArray<Outputs.UserCustomSchema>> CustomSchemas { get; private set; } = null!;

        /// <summary>
        /// The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId.
        /// As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the
        /// account's primary domain in the domain parameter of a users.list request.
        /// </summary>
        [Output("customerId")]
        public Output<string> CustomerId { get; private set; } = null!;

        /// <summary>
        /// The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date
        /// plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
        /// </summary>
        [Output("deletionTime")]
        public Output<string> DeletionTime { get; private set; } = null!;

        /// <summary>
        /// A list of the user's email addresses. The maximum allowed data size is 10Kb.
        /// </summary>
        [Output("emails")]
        public Output<ImmutableArray<Outputs.UserEmail>> Emails { get; private set; } = null!;

        /// <summary>
        /// ETag of the resource.
        /// </summary>
        [Output("etag")]
        public Output<string> Etag { get; private set; } = null!;

        /// <summary>
        /// A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        /// </summary>
        [Output("externalIds")]
        public Output<ImmutableArray<Outputs.UserExternalId>> ExternalIds { get; private set; } = null!;

        /// <summary>
        /// Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
        /// hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        /// </summary>
        [Output("hashFunction")]
        public Output<string?> HashFunction { get; private set; } = null!;

        /// <summary>
        /// The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
        /// properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        /// </summary>
        [Output("ims")]
        public Output<ImmutableArray<Outputs.UserIm>> Ims { get; private set; } = null!;

        /// <summary>
        /// Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
        /// is enabled for the domain.
        /// </summary>
        [Output("includeInGlobalAddressList")]
        public Output<bool?> IncludeInGlobalAddressList { get; private set; } = null!;

        /// <summary>
        /// If true, the user's IP address is added to the allow list.
        /// </summary>
        [Output("ipAllowlist")]
        public Output<bool?> IpAllowlist { get; private set; } = null!;

        /// <summary>
        /// Indicates a user with super admininistrator privileges.
        /// </summary>
        [Output("isAdmin")]
        public Output<bool> IsAdmin { get; private set; } = null!;

        /// <summary>
        /// Indicates if the user is a delegated administrator.
        /// </summary>
        [Output("isDelegatedAdmin")]
        public Output<bool> IsDelegatedAdmin { get; private set; } = null!;

        /// <summary>
        /// Is 2-step verification enforced.
        /// </summary>
        [Output("isEnforcedIn2StepVerification")]
        public Output<bool> IsEnforcedIn2StepVerification { get; private set; } = null!;

        /// <summary>
        /// Is enrolled in 2-step verification.
        /// </summary>
        [Output("isEnrolledIn2StepVerification")]
        public Output<bool> IsEnrolledIn2StepVerification { get; private set; } = null!;

        /// <summary>
        /// Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a
        /// Gmail license.
        /// </summary>
        [Output("isMailboxSetup")]
        public Output<bool> IsMailboxSetup { get; private set; } = null!;

        /// <summary>
        /// A list of the user's keywords. The maximum allowed data size is 1Kb.
        /// </summary>
        [Output("keywords")]
        public Output<ImmutableArray<Outputs.UserKeyword>> Keywords { get; private set; } = null!;

        /// <summary>
        /// A list of the user's languages. The maximum allowed data size is 1Kb.
        /// </summary>
        [Output("languages")]
        public Output<ImmutableArray<Outputs.UserLanguage>> Languages { get; private set; } = null!;

        /// <summary>
        /// The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the
        /// complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example,
        /// 2010-04-05T17:30:04+01:00.
        /// </summary>
        [Output("lastLoginTime")]
        public Output<string> LastLoginTime { get; private set; } = null!;

        /// <summary>
        /// A list of the user's locations. The maximum allowed data size is 10Kb.
        /// </summary>
        [Output("locations")]
        public Output<ImmutableArray<Outputs.UserLocation>> Locations { get; private set; } = null!;

        /// <summary>
        /// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
        /// givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
        /// spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
        /// this field is 1Kb.
        /// </summary>
        [Output("name")]
        public Output<Outputs.UserName> Name { get; private set; } = null!;

        /// <summary>
        /// asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or
        /// sub-domain.
        /// </summary>
        [Output("nonEditableAliases")]
        public Output<ImmutableArray<string>> NonEditableAliases { get; private set; } = null!;

        /// <summary>
        /// The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
        /// represented as a forward slash (/).
        /// </summary>
        [Output("orgUnitPath")]
        public Output<string> OrgUnitPath { get; private set; } = null!;

        /// <summary>
        /// A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        /// </summary>
        [Output("organizations")]
        public Output<ImmutableArray<Outputs.UserOrganization>> Organizations { get; private set; } = null!;

        /// <summary>
        /// Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
        /// characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
        /// field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
        /// required on create and will be empty on import.
        /// </summary>
        [Output("password")]
        public Output<string?> Password { get; private set; } = null!;

        /// <summary>
        /// A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        /// </summary>
        [Output("phones")]
        public Output<ImmutableArray<Outputs.UserPhone>> Phones { get; private set; } = null!;

        /// <summary>
        /// A list of POSIX account information for the user.
        /// </summary>
        [Output("posixAccounts")]
        public Output<ImmutableArray<Outputs.UserPosixAccount>> PosixAccounts { get; private set; } = null!;

        /// <summary>
        /// The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        /// </summary>
        [Output("primaryEmail")]
        public Output<string> PrimaryEmail { get; private set; } = null!;

        /// <summary>
        /// Recovery email of the user.
        /// </summary>
        [Output("recoveryEmail")]
        public Output<string?> RecoveryEmail { get; private set; } = null!;

        /// <summary>
        /// Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
        /// +16506661212.
        /// </summary>
        [Output("recoveryPhone")]
        public Output<string?> RecoveryPhone { get; private set; } = null!;

        /// <summary>
        /// A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        /// </summary>
        [Output("relations")]
        public Output<ImmutableArray<Outputs.UserRelation>> Relations { get; private set; } = null!;

        /// <summary>
        /// A list of SSH public keys. The maximum allowed data size is 10Kb.
        /// </summary>
        [Output("sshPublicKeys")]
        public Output<ImmutableArray<Outputs.UserSshPublicKey>> SshPublicKeys { get; private set; } = null!;

        /// <summary>
        /// Indicates if user is suspended.
        /// </summary>
        [Output("suspended")]
        public Output<bool?> Suspended { get; private set; } = null!;

        /// <summary>
        /// Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The
        /// property is returned only if the suspended property is true.
        /// </summary>
        [Output("suspensionReason")]
        public Output<string> SuspensionReason { get; private set; } = null!;

        /// <summary>
        /// ETag of the user's photo
        /// </summary>
        [Output("thumbnailPhotoEtag")]
        public Output<string> ThumbnailPhotoEtag { get; private set; } = null!;

        /// <summary>
        /// Photo Url of the user.
        /// </summary>
        [Output("thumbnailPhotoUrl")]
        public Output<string> ThumbnailPhotoUrl { get; private set; } = null!;

        /// <summary>
        /// A list of the user's websites. The maximum allowed data size is 2Kb.
        /// </summary>
        [Output("websites")]
        public Output<ImmutableArray<Outputs.UserWebsite>> Websites { get; private set; } = null!;


        /// <summary>
        /// Create a User resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public User(string name, UserArgs args, CustomResourceOptions? options = null)
            : base("googleworkspace:index/user:User", name, args ?? new UserArgs(), MakeResourceOptions(options, ""))
        {
        }

        private User(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
            : base("googleworkspace:index/user:User", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing User resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static User Get(string name, Input<string> id, UserState? state = null, CustomResourceOptions? options = null)
        {
            return new User(name, id, state, options);
        }
    }

    public sealed class UserArgs : global::Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<Inputs.UserAddressArgs>? _addresses;

        /// <summary>
        /// A list of the user's addresses. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserAddressArgs> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<Inputs.UserAddressArgs>());
            set => _addresses = value;
        }

        [Input("aliases")]
        private InputList<string>? _aliases;

        /// <summary>
        /// asps.list of the user's alias email addresses.
        /// </summary>
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        /// <summary>
        /// Indicates if user is archived.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
        /// in via a third-party identity provider.
        /// </summary>
        [Input("changePasswordAtNextLogin")]
        public Input<bool>? ChangePasswordAtNextLogin { get; set; }

        [Input("customSchemas")]
        private InputList<Inputs.UserCustomSchemaArgs>? _customSchemas;

        /// <summary>
        /// Custom fields of the user.
        /// </summary>
        public InputList<Inputs.UserCustomSchemaArgs> CustomSchemas
        {
            get => _customSchemas ?? (_customSchemas = new InputList<Inputs.UserCustomSchemaArgs>());
            set => _customSchemas = value;
        }

        [Input("emails")]
        private InputList<Inputs.UserEmailArgs>? _emails;

        /// <summary>
        /// A list of the user's email addresses. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserEmailArgs> Emails
        {
            get => _emails ?? (_emails = new InputList<Inputs.UserEmailArgs>());
            set => _emails = value;
        }

        [Input("externalIds")]
        private InputList<Inputs.UserExternalIdArgs>? _externalIds;

        /// <summary>
        /// A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        /// </summary>
        public InputList<Inputs.UserExternalIdArgs> ExternalIds
        {
            get => _externalIds ?? (_externalIds = new InputList<Inputs.UserExternalIdArgs>());
            set => _externalIds = value;
        }

        /// <summary>
        /// Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
        /// hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        /// </summary>
        [Input("hashFunction")]
        public Input<string>? HashFunction { get; set; }

        [Input("ims")]
        private InputList<Inputs.UserImArgs>? _ims;

        /// <summary>
        /// The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
        /// properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        /// </summary>
        public InputList<Inputs.UserImArgs> Ims
        {
            get => _ims ?? (_ims = new InputList<Inputs.UserImArgs>());
            set => _ims = value;
        }

        /// <summary>
        /// Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
        /// is enabled for the domain.
        /// </summary>
        [Input("includeInGlobalAddressList")]
        public Input<bool>? IncludeInGlobalAddressList { get; set; }

        /// <summary>
        /// If true, the user's IP address is added to the allow list.
        /// </summary>
        [Input("ipAllowlist")]
        public Input<bool>? IpAllowlist { get; set; }

        /// <summary>
        /// Indicates a user with super admininistrator privileges.
        /// </summary>
        [Input("isAdmin")]
        public Input<bool>? IsAdmin { get; set; }

        [Input("keywords")]
        private InputList<Inputs.UserKeywordArgs>? _keywords;

        /// <summary>
        /// A list of the user's keywords. The maximum allowed data size is 1Kb.
        /// </summary>
        public InputList<Inputs.UserKeywordArgs> Keywords
        {
            get => _keywords ?? (_keywords = new InputList<Inputs.UserKeywordArgs>());
            set => _keywords = value;
        }

        [Input("languages")]
        private InputList<Inputs.UserLanguageArgs>? _languages;

        /// <summary>
        /// A list of the user's languages. The maximum allowed data size is 1Kb.
        /// </summary>
        public InputList<Inputs.UserLanguageArgs> Languages
        {
            get => _languages ?? (_languages = new InputList<Inputs.UserLanguageArgs>());
            set => _languages = value;
        }

        [Input("locations")]
        private InputList<Inputs.UserLocationArgs>? _locations;

        /// <summary>
        /// A list of the user's locations. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserLocationArgs> Locations
        {
            get => _locations ?? (_locations = new InputList<Inputs.UserLocationArgs>());
            set => _locations = value;
        }

        /// <summary>
        /// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
        /// givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
        /// spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
        /// this field is 1Kb.
        /// </summary>
        [Input("name")]
        public Input<Inputs.UserNameArgs>? Name { get; set; }

        /// <summary>
        /// The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
        /// represented as a forward slash (/).
        /// </summary>
        [Input("orgUnitPath")]
        public Input<string>? OrgUnitPath { get; set; }

        [Input("organizations")]
        private InputList<Inputs.UserOrganizationArgs>? _organizations;

        /// <summary>
        /// A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserOrganizationArgs> Organizations
        {
            get => _organizations ?? (_organizations = new InputList<Inputs.UserOrganizationArgs>());
            set => _organizations = value;
        }

        /// <summary>
        /// Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
        /// characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
        /// field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
        /// required on create and will be empty on import.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("phones")]
        private InputList<Inputs.UserPhoneArgs>? _phones;

        /// <summary>
        /// A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        /// </summary>
        public InputList<Inputs.UserPhoneArgs> Phones
        {
            get => _phones ?? (_phones = new InputList<Inputs.UserPhoneArgs>());
            set => _phones = value;
        }

        [Input("posixAccounts")]
        private InputList<Inputs.UserPosixAccountArgs>? _posixAccounts;

        /// <summary>
        /// A list of POSIX account information for the user.
        /// </summary>
        public InputList<Inputs.UserPosixAccountArgs> PosixAccounts
        {
            get => _posixAccounts ?? (_posixAccounts = new InputList<Inputs.UserPosixAccountArgs>());
            set => _posixAccounts = value;
        }

        /// <summary>
        /// The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        /// </summary>
        [Input("primaryEmail", required: true)]
        public Input<string> PrimaryEmail { get; set; } = null!;

        /// <summary>
        /// Recovery email of the user.
        /// </summary>
        [Input("recoveryEmail")]
        public Input<string>? RecoveryEmail { get; set; }

        /// <summary>
        /// Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
        /// +16506661212.
        /// </summary>
        [Input("recoveryPhone")]
        public Input<string>? RecoveryPhone { get; set; }

        [Input("relations")]
        private InputList<Inputs.UserRelationArgs>? _relations;

        /// <summary>
        /// A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        /// </summary>
        public InputList<Inputs.UserRelationArgs> Relations
        {
            get => _relations ?? (_relations = new InputList<Inputs.UserRelationArgs>());
            set => _relations = value;
        }

        [Input("sshPublicKeys")]
        private InputList<Inputs.UserSshPublicKeyArgs>? _sshPublicKeys;

        /// <summary>
        /// A list of SSH public keys. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserSshPublicKeyArgs> SshPublicKeys
        {
            get => _sshPublicKeys ?? (_sshPublicKeys = new InputList<Inputs.UserSshPublicKeyArgs>());
            set => _sshPublicKeys = value;
        }

        /// <summary>
        /// Indicates if user is suspended.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        [Input("websites")]
        private InputList<Inputs.UserWebsiteArgs>? _websites;

        /// <summary>
        /// A list of the user's websites. The maximum allowed data size is 2Kb.
        /// </summary>
        public InputList<Inputs.UserWebsiteArgs> Websites
        {
            get => _websites ?? (_websites = new InputList<Inputs.UserWebsiteArgs>());
            set => _websites = value;
        }

        public UserArgs()
        {
        }
        public static new UserArgs Empty => new UserArgs();
    }

    public sealed class UserState : global::Pulumi.ResourceArgs
    {
        [Input("addresses")]
        private InputList<Inputs.UserAddressGetArgs>? _addresses;

        /// <summary>
        /// A list of the user's addresses. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserAddressGetArgs> Addresses
        {
            get => _addresses ?? (_addresses = new InputList<Inputs.UserAddressGetArgs>());
            set => _addresses = value;
        }

        /// <summary>
        /// This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
        /// </summary>
        [Input("agreedToTerms")]
        public Input<bool>? AgreedToTerms { get; set; }

        [Input("aliases")]
        private InputList<string>? _aliases;

        /// <summary>
        /// asps.list of the user's alias email addresses.
        /// </summary>
        public InputList<string> Aliases
        {
            get => _aliases ?? (_aliases = new InputList<string>());
            set => _aliases = value;
        }

        /// <summary>
        /// Indicates if user is archived.
        /// </summary>
        [Input("archived")]
        public Input<bool>? Archived { get; set; }

        /// <summary>
        /// Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
        /// in via a third-party identity provider.
        /// </summary>
        [Input("changePasswordAtNextLogin")]
        public Input<bool>? ChangePasswordAtNextLogin { get; set; }

        /// <summary>
        /// The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date
        /// plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        /// </summary>
        [Input("creationTime")]
        public Input<string>? CreationTime { get; set; }

        [Input("customSchemas")]
        private InputList<Inputs.UserCustomSchemaGetArgs>? _customSchemas;

        /// <summary>
        /// Custom fields of the user.
        /// </summary>
        public InputList<Inputs.UserCustomSchemaGetArgs> CustomSchemas
        {
            get => _customSchemas ?? (_customSchemas = new InputList<Inputs.UserCustomSchemaGetArgs>());
            set => _customSchemas = value;
        }

        /// <summary>
        /// The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId.
        /// As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the
        /// account's primary domain in the domain parameter of a users.list request.
        /// </summary>
        [Input("customerId")]
        public Input<string>? CustomerId { get; set; }

        /// <summary>
        /// The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date
        /// plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
        /// </summary>
        [Input("deletionTime")]
        public Input<string>? DeletionTime { get; set; }

        [Input("emails")]
        private InputList<Inputs.UserEmailGetArgs>? _emails;

        /// <summary>
        /// A list of the user's email addresses. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserEmailGetArgs> Emails
        {
            get => _emails ?? (_emails = new InputList<Inputs.UserEmailGetArgs>());
            set => _emails = value;
        }

        /// <summary>
        /// ETag of the resource.
        /// </summary>
        [Input("etag")]
        public Input<string>? Etag { get; set; }

        [Input("externalIds")]
        private InputList<Inputs.UserExternalIdGetArgs>? _externalIds;

        /// <summary>
        /// A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        /// </summary>
        public InputList<Inputs.UserExternalIdGetArgs> ExternalIds
        {
            get => _externalIds ?? (_externalIds = new InputList<Inputs.UserExternalIdGetArgs>());
            set => _externalIds = value;
        }

        /// <summary>
        /// Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
        /// hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        /// </summary>
        [Input("hashFunction")]
        public Input<string>? HashFunction { get; set; }

        [Input("ims")]
        private InputList<Inputs.UserImGetArgs>? _ims;

        /// <summary>
        /// The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
        /// properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        /// </summary>
        public InputList<Inputs.UserImGetArgs> Ims
        {
            get => _ims ?? (_ims = new InputList<Inputs.UserImGetArgs>());
            set => _ims = value;
        }

        /// <summary>
        /// Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
        /// is enabled for the domain.
        /// </summary>
        [Input("includeInGlobalAddressList")]
        public Input<bool>? IncludeInGlobalAddressList { get; set; }

        /// <summary>
        /// If true, the user's IP address is added to the allow list.
        /// </summary>
        [Input("ipAllowlist")]
        public Input<bool>? IpAllowlist { get; set; }

        /// <summary>
        /// Indicates a user with super admininistrator privileges.
        /// </summary>
        [Input("isAdmin")]
        public Input<bool>? IsAdmin { get; set; }

        /// <summary>
        /// Indicates if the user is a delegated administrator.
        /// </summary>
        [Input("isDelegatedAdmin")]
        public Input<bool>? IsDelegatedAdmin { get; set; }

        /// <summary>
        /// Is 2-step verification enforced.
        /// </summary>
        [Input("isEnforcedIn2StepVerification")]
        public Input<bool>? IsEnforcedIn2StepVerification { get; set; }

        /// <summary>
        /// Is enrolled in 2-step verification.
        /// </summary>
        [Input("isEnrolledIn2StepVerification")]
        public Input<bool>? IsEnrolledIn2StepVerification { get; set; }

        /// <summary>
        /// Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a
        /// Gmail license.
        /// </summary>
        [Input("isMailboxSetup")]
        public Input<bool>? IsMailboxSetup { get; set; }

        [Input("keywords")]
        private InputList<Inputs.UserKeywordGetArgs>? _keywords;

        /// <summary>
        /// A list of the user's keywords. The maximum allowed data size is 1Kb.
        /// </summary>
        public InputList<Inputs.UserKeywordGetArgs> Keywords
        {
            get => _keywords ?? (_keywords = new InputList<Inputs.UserKeywordGetArgs>());
            set => _keywords = value;
        }

        [Input("languages")]
        private InputList<Inputs.UserLanguageGetArgs>? _languages;

        /// <summary>
        /// A list of the user's languages. The maximum allowed data size is 1Kb.
        /// </summary>
        public InputList<Inputs.UserLanguageGetArgs> Languages
        {
            get => _languages ?? (_languages = new InputList<Inputs.UserLanguageGetArgs>());
            set => _languages = value;
        }

        /// <summary>
        /// The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the
        /// complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example,
        /// 2010-04-05T17:30:04+01:00.
        /// </summary>
        [Input("lastLoginTime")]
        public Input<string>? LastLoginTime { get; set; }

        [Input("locations")]
        private InputList<Inputs.UserLocationGetArgs>? _locations;

        /// <summary>
        /// A list of the user's locations. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserLocationGetArgs> Locations
        {
            get => _locations ?? (_locations = new InputList<Inputs.UserLocationGetArgs>());
            set => _locations = value;
        }

        /// <summary>
        /// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
        /// givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
        /// spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
        /// this field is 1Kb.
        /// </summary>
        [Input("name")]
        public Input<Inputs.UserNameGetArgs>? Name { get; set; }

        [Input("nonEditableAliases")]
        private InputList<string>? _nonEditableAliases;

        /// <summary>
        /// asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or
        /// sub-domain.
        /// </summary>
        public InputList<string> NonEditableAliases
        {
            get => _nonEditableAliases ?? (_nonEditableAliases = new InputList<string>());
            set => _nonEditableAliases = value;
        }

        /// <summary>
        /// The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
        /// represented as a forward slash (/).
        /// </summary>
        [Input("orgUnitPath")]
        public Input<string>? OrgUnitPath { get; set; }

        [Input("organizations")]
        private InputList<Inputs.UserOrganizationGetArgs>? _organizations;

        /// <summary>
        /// A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserOrganizationGetArgs> Organizations
        {
            get => _organizations ?? (_organizations = new InputList<Inputs.UserOrganizationGetArgs>());
            set => _organizations = value;
        }

        /// <summary>
        /// Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
        /// characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
        /// field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
        /// required on create and will be empty on import.
        /// </summary>
        [Input("password")]
        public Input<string>? Password { get; set; }

        [Input("phones")]
        private InputList<Inputs.UserPhoneGetArgs>? _phones;

        /// <summary>
        /// A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        /// </summary>
        public InputList<Inputs.UserPhoneGetArgs> Phones
        {
            get => _phones ?? (_phones = new InputList<Inputs.UserPhoneGetArgs>());
            set => _phones = value;
        }

        [Input("posixAccounts")]
        private InputList<Inputs.UserPosixAccountGetArgs>? _posixAccounts;

        /// <summary>
        /// A list of POSIX account information for the user.
        /// </summary>
        public InputList<Inputs.UserPosixAccountGetArgs> PosixAccounts
        {
            get => _posixAccounts ?? (_posixAccounts = new InputList<Inputs.UserPosixAccountGetArgs>());
            set => _posixAccounts = value;
        }

        /// <summary>
        /// The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        /// </summary>
        [Input("primaryEmail")]
        public Input<string>? PrimaryEmail { get; set; }

        /// <summary>
        /// Recovery email of the user.
        /// </summary>
        [Input("recoveryEmail")]
        public Input<string>? RecoveryEmail { get; set; }

        /// <summary>
        /// Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
        /// +16506661212.
        /// </summary>
        [Input("recoveryPhone")]
        public Input<string>? RecoveryPhone { get; set; }

        [Input("relations")]
        private InputList<Inputs.UserRelationGetArgs>? _relations;

        /// <summary>
        /// A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        /// </summary>
        public InputList<Inputs.UserRelationGetArgs> Relations
        {
            get => _relations ?? (_relations = new InputList<Inputs.UserRelationGetArgs>());
            set => _relations = value;
        }

        [Input("sshPublicKeys")]
        private InputList<Inputs.UserSshPublicKeyGetArgs>? _sshPublicKeys;

        /// <summary>
        /// A list of SSH public keys. The maximum allowed data size is 10Kb.
        /// </summary>
        public InputList<Inputs.UserSshPublicKeyGetArgs> SshPublicKeys
        {
            get => _sshPublicKeys ?? (_sshPublicKeys = new InputList<Inputs.UserSshPublicKeyGetArgs>());
            set => _sshPublicKeys = value;
        }

        /// <summary>
        /// Indicates if user is suspended.
        /// </summary>
        [Input("suspended")]
        public Input<bool>? Suspended { get; set; }

        /// <summary>
        /// Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The
        /// property is returned only if the suspended property is true.
        /// </summary>
        [Input("suspensionReason")]
        public Input<string>? SuspensionReason { get; set; }

        /// <summary>
        /// ETag of the user's photo
        /// </summary>
        [Input("thumbnailPhotoEtag")]
        public Input<string>? ThumbnailPhotoEtag { get; set; }

        /// <summary>
        /// Photo Url of the user.
        /// </summary>
        [Input("thumbnailPhotoUrl")]
        public Input<string>? ThumbnailPhotoUrl { get; set; }

        [Input("websites")]
        private InputList<Inputs.UserWebsiteGetArgs>? _websites;

        /// <summary>
        /// A list of the user's websites. The maximum allowed data size is 2Kb.
        /// </summary>
        public InputList<Inputs.UserWebsiteGetArgs> Websites
        {
            get => _websites ?? (_websites = new InputList<Inputs.UserWebsiteGetArgs>());
            set => _websites = value;
        }

        public UserState()
        {
        }
        public static new UserState Empty => new UserState();
    }
}
