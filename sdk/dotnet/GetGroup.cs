// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Googleworkspace
{
    public static class GetGroup
    {
        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sales = Googleworkspace.GetGroup.Invoke(new()
        ///     {
        ///         Email = "sales@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["groupName"] = sales.Apply(getGroupResult =&gt; getGroupResult.Name),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetGroupResult> InvokeAsync(GetGroupArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetGroupResult>("googleworkspace:index/getGroup:getGroup", args ?? new GetGroupArgs(), options.WithDefaults());

        /// <summary>
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Googleworkspace = Pulumi.Googleworkspace;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var sales = Googleworkspace.GetGroup.Invoke(new()
        ///     {
        ///         Email = "sales@example.com",
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["groupName"] = sales.Apply(getGroupResult =&gt; getGroupResult.Name),
        ///     };
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetGroupResult> Invoke(GetGroupInvokeArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetGroupResult>("googleworkspace:index/getGroup:getGroup", args ?? new GetGroupInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetGroupArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        /// </summary>
        [Input("email")]
        public string? Email { get; set; }

        /// <summary>
        /// The unique ID of a group. A group id can be used as a group request URI's groupKey.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        public GetGroupArgs()
        {
        }
        public static new GetGroupArgs Empty => new GetGroupArgs();
    }

    public sealed class GetGroupInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        /// </summary>
        [Input("email")]
        public Input<string>? Email { get; set; }

        /// <summary>
        /// The unique ID of a group. A group id can be used as a group request URI's groupKey.
        /// </summary>
        [Input("id")]
        public Input<string>? Id { get; set; }

        public GetGroupInvokeArgs()
        {
        }
        public static new GetGroupInvokeArgs Empty => new GetGroupInvokeArgs();
    }


    [OutputType]
    public sealed class GetGroupResult
    {
        /// <summary>
        /// Value is true if this group was created by an administrator rather than a user.
        /// </summary>
        public readonly bool AdminCreated;
        /// <summary>
        /// asps.list of group's email addresses.
        /// </summary>
        public readonly ImmutableArray<string> Aliases;
        /// <summary>
        /// An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
        /// </summary>
        public readonly int DirectMembersCount;
        /// <summary>
        /// The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        /// </summary>
        public readonly string Email;
        /// <summary>
        /// ETag of the resource.
        /// </summary>
        public readonly string Etag;
        /// <summary>
        /// The unique ID of a group. A group id can be used as a group request URI's groupKey.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The group's display name.
        /// </summary>
        public readonly string Name;
        /// <summary>
        /// asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
        /// </summary>
        public readonly ImmutableArray<string> NonEditableAliases;

        [OutputConstructor]
        private GetGroupResult(
            bool adminCreated,

            ImmutableArray<string> aliases,

            string description,

            int directMembersCount,

            string email,

            string etag,

            string id,

            string name,

            ImmutableArray<string> nonEditableAliases)
        {
            AdminCreated = adminCreated;
            Aliases = aliases;
            Description = description;
            DirectMembersCount = directMembersCount;
            Email = email;
            Etag = etag;
            Id = id;
            Name = name;
            NonEditableAliases = nonEditableAliases;
        }
    }
}
