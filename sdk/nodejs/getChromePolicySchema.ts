// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as googleworkspace from "@pulumi/googleworkspace";
 *
 * const example = googleworkspace.getChromePolicySchema({
 *     schemaName: "chrome.printers.AllowForUsers",
 * });
 * export const fieldDescriptions = example.then(example => example.fieldDescriptions);
 * ```
 */
export function getChromePolicySchema(args: GetChromePolicySchemaArgs, opts?: pulumi.InvokeOptions): Promise<GetChromePolicySchemaResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("googleworkspace:index/getChromePolicySchema:getChromePolicySchema", {
        "schemaName": args.schemaName,
    }, opts);
}

/**
 * A collection of arguments for invoking getChromePolicySchema.
 */
export interface GetChromePolicySchemaArgs {
    /**
     * The full qualified name of the policy schema
     */
    schemaName: string;
}

/**
 * A collection of values returned by getChromePolicySchema.
 */
export interface GetChromePolicySchemaResult {
    /**
     * Specific access restrictions related to this policy.
     */
    readonly accessRestrictions: string[];
    /**
     * Additional key names that will be used to identify the target of the policy value. When specifying a policyTargetKey, each of the additional keys specified here will have to be included in the additionalTargetKeys map.
     */
    readonly additionalTargetKeyNames: outputs.GetChromePolicySchemaAdditionalTargetKeyName[];
    /**
     * Schema definition using proto descriptor.
     */
    readonly definitions: outputs.GetChromePolicySchemaDefinition[];
    /**
     * Detailed description of each field that is part of the schema, represented as a JSON string.
     */
    readonly fieldDescriptions: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Special notice messages related to setting certain values in certain fields in the schema.
     */
    readonly notices: outputs.GetChromePolicySchemaNotice[];
    /**
     * Description about the policy schema for user consumption.
     */
    readonly policyDescription: string;
    /**
     * The full qualified name of the policy schema
     */
    readonly schemaName: string;
    /**
     * URI to related support article for this schema.
     */
    readonly supportUri: string;
}

export function getChromePolicySchemaOutput(args: GetChromePolicySchemaOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetChromePolicySchemaResult> {
    return pulumi.output(args).apply(a => getChromePolicySchema(a, opts))
}

/**
 * A collection of arguments for invoking getChromePolicySchema.
 */
export interface GetChromePolicySchemaOutputArgs {
    /**
     * The full qualified name of the policy schema
     */
    schemaName: pulumi.Input<string>;
}
