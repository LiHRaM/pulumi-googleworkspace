// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ChromePolicyPolicy {
    /**
     * The full qualified name of the policy schema.
     */
    schemaName: pulumi.Input<string>;
    /**
     * JSON encoded map that represents key/value pairs that correspond to the given schema.
     */
    schemaValues: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface GmailSendAsAliasSmtpMsa {
    /**
     * The hostname of the SMTP service.
     */
    host: pulumi.Input<string>;
    /**
     * The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
     */
    password?: pulumi.Input<string>;
    /**
     * The port of the SMTP service.
     */
    port: pulumi.Input<number>;
    /**
     * Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
     */
    securityMode?: pulumi.Input<string>;
    /**
     * The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
     */
    username?: pulumi.Input<string>;
}

export interface GroupMembersMember {
    deliverySettings?: pulumi.Input<string>;
    email: pulumi.Input<string>;
    id?: pulumi.Input<string>;
    role?: pulumi.Input<string>;
    status?: pulumi.Input<string>;
    type?: pulumi.Input<string>;
}

export interface RolePrivilege {
    /**
     * The name of the privilege.
     */
    privilegeName: pulumi.Input<string>;
    /**
     * The obfuscated ID of the service this privilege is for.
     */
    serviceId: pulumi.Input<string>;
}

export interface SchemaField {
    displayName?: pulumi.Input<string>;
    etag?: pulumi.Input<string>;
    fieldId?: pulumi.Input<string>;
    fieldName: pulumi.Input<string>;
    fieldType: pulumi.Input<string>;
    indexed?: pulumi.Input<boolean>;
    multiValued?: pulumi.Input<boolean>;
    numericIndexingSpec?: pulumi.Input<inputs.SchemaFieldNumericIndexingSpec>;
    readAccessType?: pulumi.Input<string>;
}

export interface SchemaFieldNumericIndexingSpec {
    maxValue?: pulumi.Input<number>;
    minValue?: pulumi.Input<number>;
}

export interface UserAddress {
    country?: pulumi.Input<string>;
    countryCode?: pulumi.Input<string>;
    customType?: pulumi.Input<string>;
    extendedAddress?: pulumi.Input<string>;
    formatted?: pulumi.Input<string>;
    locality?: pulumi.Input<string>;
    poBox?: pulumi.Input<string>;
    postalCode?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    region?: pulumi.Input<string>;
    sourceIsStructured?: pulumi.Input<boolean>;
    streetAddress?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface UserCustomSchema {
    schemaName: pulumi.Input<string>;
    schemaValues: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
}

export interface UserEmail {
    address?: pulumi.Input<string>;
    customType?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
}

export interface UserExternalId {
    customType?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface UserIm {
    customProtocol?: pulumi.Input<string>;
    customType?: pulumi.Input<string>;
    im?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    protocol: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface UserKeyword {
    customType?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface UserLanguage {
    customLanguage?: pulumi.Input<string>;
    languageCode?: pulumi.Input<string>;
    preference?: pulumi.Input<string>;
}

export interface UserLocation {
    area?: pulumi.Input<string>;
    buildingId?: pulumi.Input<string>;
    customType?: pulumi.Input<string>;
    deskCode?: pulumi.Input<string>;
    floorName?: pulumi.Input<string>;
    floorSection?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface UserName {
    familyName: pulumi.Input<string>;
    fullName?: pulumi.Input<string>;
    givenName?: pulumi.Input<string>;
}

export interface UserOrganization {
    costCenter?: pulumi.Input<string>;
    customType?: pulumi.Input<string>;
    department?: pulumi.Input<string>;
    description?: pulumi.Input<string>;
    domain?: pulumi.Input<string>;
    fullTimeEquivalent?: pulumi.Input<number>;
    location?: pulumi.Input<string>;
    name?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    symbol?: pulumi.Input<string>;
    title?: pulumi.Input<string>;
    type: pulumi.Input<string>;
}

export interface UserPhone {
    customType?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface UserPosixAccount {
    accountId?: pulumi.Input<string>;
    gecos?: pulumi.Input<string>;
    gid?: pulumi.Input<string>;
    homeDirectory?: pulumi.Input<string>;
    operatingSystemType?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    shell?: pulumi.Input<string>;
    systemId?: pulumi.Input<string>;
    uid?: pulumi.Input<string>;
    username?: pulumi.Input<string>;
}

export interface UserRelation {
    customType?: pulumi.Input<string>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}

export interface UserSshPublicKey {
    expirationTimeUsec?: pulumi.Input<string>;
    fingerprint?: pulumi.Input<string>;
    key: pulumi.Input<string>;
}

export interface UserWebsite {
    customType?: pulumi.Input<string>;
    primary?: pulumi.Input<boolean>;
    type: pulumi.Input<string>;
    value: pulumi.Input<string>;
}
