// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "../types";

export interface ChromePolicyPolicy {
    /**
     * The full qualified name of the policy schema.
     */
    schemaName: string;
    /**
     * JSON encoded map that represents key/value pairs that correspond to the given schema.
     */
    schemaValues: {[key: string]: string};
}

export interface GetChromePolicySchemaAdditionalTargetKeyName {
    key: string;
    keyDescription: string;
}

export interface GetChromePolicySchemaDefinition {
    enumTypes: outputs.GetChromePolicySchemaDefinitionEnumType[];
    messageType: string;
    name: string;
    package: string;
    syntax: string;
}

export interface GetChromePolicySchemaDefinitionEnumType {
    name: string;
    values: outputs.GetChromePolicySchemaDefinitionEnumTypeValue[];
}

export interface GetChromePolicySchemaDefinitionEnumTypeValue {
    name: string;
    number: number;
}

export interface GetChromePolicySchemaNotice {
    acknowledgementRequired: boolean;
    field: string;
    noticeMessage: string;
    noticeValue: string;
}

export interface GetGroupMembersMember {
    deliverySettings: string;
    email: string;
    /**
     * The ID of this resource.
     */
    id: string;
    role: string;
    status: string;
    type: string;
}

export interface GetGroupsGroup {
    /**
     * Value is true if this group was created by an administrator rather than a user.
     */
    adminCreated: boolean;
    /**
     * asps.list of group's email addresses.
     */
    aliases: string[];
    /**
     * An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
     */
    description: string;
    /**
     * The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
     */
    directMembersCount: number;
    email: string;
    /**
     * ETag of the resource.
     */
    etag: string;
    /**
     * The ID of this resource.
     */
    id: string;
    /**
     * The group's display name.
     */
    name: string;
    /**
     * asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
     */
    nonEditableAliases: string[];
}

export interface GetPrivilegesItem {
    /**
     * ETag of the resource.
     */
    etag: string;
    isOrgUnitScopable: boolean;
    privilegeName: string;
    serviceId: string;
    serviceName: string;
}

export interface GetRolePrivilege {
    privilegeName: string;
    serviceId: string;
}

export interface GetSchemaField {
    /**
     * Display name for the schema.
     */
    displayName: string;
    /**
     * ETag of the resource.
     */
    etag: string;
    fieldId: string;
    fieldName: string;
    fieldType: string;
    indexed: boolean;
    multiValued: boolean;
    numericIndexingSpecs: outputs.GetSchemaFieldNumericIndexingSpec[];
    readAccessType: string;
}

export interface GetSchemaFieldNumericIndexingSpec {
    maxValue: number;
    minValue: number;
}

export interface GetUserAddress {
    country: string;
    countryCode: string;
    customType: string;
    extendedAddress: string;
    formatted: string;
    locality: string;
    poBox: string;
    postalCode: string;
    primary: boolean;
    region: string;
    sourceIsStructured: boolean;
    streetAddress: string;
    type: string;
}

export interface GetUserCustomSchema {
    schemaName: string;
    schemaValues: {[key: string]: string};
}

export interface GetUserEmail {
    address: string;
    customType: string;
    primary: boolean;
    type: string;
}

export interface GetUserExternalId {
    customType: string;
    type: string;
    value: string;
}

export interface GetUserIm {
    customProtocol: string;
    customType: string;
    im: string;
    primary: boolean;
    protocol: string;
    type: string;
}

export interface GetUserKeyword {
    customType: string;
    type: string;
    value: string;
}

export interface GetUserLanguage {
    customLanguage: string;
    languageCode: string;
    preference: string;
}

export interface GetUserLocation {
    area: string;
    buildingId: string;
    customType: string;
    deskCode: string;
    floorName: string;
    floorSection: string;
    type: string;
}

export interface GetUserName {
    familyName: string;
    fullName: string;
    givenName: string;
}

export interface GetUserOrganization {
    costCenter: string;
    customType: string;
    department: string;
    description: string;
    domain: string;
    fullTimeEquivalent: number;
    location: string;
    /**
     * Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
     */
    name: string;
    primary: boolean;
    symbol: string;
    title: string;
    type: string;
}

export interface GetUserPhone {
    customType: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetUserPosixAccount {
    accountId: string;
    gecos: string;
    gid: string;
    homeDirectory: string;
    operatingSystemType: string;
    primary: boolean;
    shell: string;
    systemId: string;
    uid: string;
    username: string;
}

export interface GetUserRelation {
    customType: string;
    type: string;
    value: string;
}

export interface GetUserSshPublicKey {
    expirationTimeUsec: string;
    fingerprint: string;
    key: string;
}

export interface GetUserWebsite {
    customType: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetUsersUser {
    addresses: outputs.GetUsersUserAddress[];
    agreedToTerms: boolean;
    aliases: string[];
    archived: boolean;
    changePasswordAtNextLogin: boolean;
    creationTime: string;
    customSchemas: outputs.GetUsersUserCustomSchema[];
    customerId: string;
    deletionTime: string;
    emails: outputs.GetUsersUserEmail[];
    etag: string;
    externalIds: outputs.GetUsersUserExternalId[];
    hashFunction: string;
    /**
     * The ID of this resource.
     */
    id: string;
    ims: outputs.GetUsersUserIm[];
    includeInGlobalAddressList: boolean;
    ipAllowlist: boolean;
    isAdmin: boolean;
    isDelegatedAdmin: boolean;
    isEnforcedIn2StepVerification: boolean;
    isEnrolledIn2StepVerification: boolean;
    isMailboxSetup: boolean;
    keywords: outputs.GetUsersUserKeyword[];
    languages: outputs.GetUsersUserLanguage[];
    lastLoginTime: string;
    locations: outputs.GetUsersUserLocation[];
    names: outputs.GetUsersUserName[];
    nonEditableAliases: string[];
    orgUnitPath: string;
    organizations: outputs.GetUsersUserOrganization[];
    password: string;
    phones: outputs.GetUsersUserPhone[];
    posixAccounts: outputs.GetUsersUserPosixAccount[];
    primaryEmail: string;
    recoveryEmail: string;
    recoveryPhone: string;
    relations: outputs.GetUsersUserRelation[];
    sshPublicKeys: outputs.GetUsersUserSshPublicKey[];
    suspended: boolean;
    suspensionReason: string;
    thumbnailPhotoEtag: string;
    thumbnailPhotoUrl: string;
    websites: outputs.GetUsersUserWebsite[];
}

export interface GetUsersUserAddress {
    country: string;
    countryCode: string;
    customType: string;
    extendedAddress: string;
    formatted: string;
    locality: string;
    poBox: string;
    postalCode: string;
    primary: boolean;
    region: string;
    sourceIsStructured: boolean;
    streetAddress: string;
    type: string;
}

export interface GetUsersUserCustomSchema {
    schemaName: string;
    schemaValues: {[key: string]: string};
}

export interface GetUsersUserEmail {
    address: string;
    customType: string;
    primary: boolean;
    type: string;
}

export interface GetUsersUserExternalId {
    customType: string;
    type: string;
    value: string;
}

export interface GetUsersUserIm {
    customProtocol: string;
    customType: string;
    im: string;
    primary: boolean;
    protocol: string;
    type: string;
}

export interface GetUsersUserKeyword {
    customType: string;
    type: string;
    value: string;
}

export interface GetUsersUserLanguage {
    customLanguage: string;
    languageCode: string;
    preference: string;
}

export interface GetUsersUserLocation {
    area: string;
    buildingId: string;
    customType: string;
    deskCode: string;
    floorName: string;
    floorSection: string;
    type: string;
}

export interface GetUsersUserName {
    familyName: string;
    fullName: string;
    givenName: string;
}

export interface GetUsersUserOrganization {
    costCenter: string;
    customType: string;
    department: string;
    description: string;
    domain: string;
    fullTimeEquivalent: number;
    location: string;
    name: string;
    primary: boolean;
    symbol: string;
    title: string;
    type: string;
}

export interface GetUsersUserPhone {
    customType: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GetUsersUserPosixAccount {
    accountId: string;
    gecos: string;
    gid: string;
    homeDirectory: string;
    operatingSystemType: string;
    primary: boolean;
    shell: string;
    systemId: string;
    uid: string;
    username: string;
}

export interface GetUsersUserRelation {
    customType: string;
    type: string;
    value: string;
}

export interface GetUsersUserSshPublicKey {
    expirationTimeUsec: string;
    fingerprint: string;
    key: string;
}

export interface GetUsersUserWebsite {
    customType: string;
    primary: boolean;
    type: string;
    value: string;
}

export interface GmailSendAsAliasSmtpMsa {
    /**
     * The hostname of the SMTP service.
     */
    host: string;
    /**
     * The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
     */
    password?: string;
    /**
     * The port of the SMTP service.
     */
    port: number;
    /**
     * Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
     */
    securityMode?: string;
    /**
     * The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
     */
    username?: string;
}

export interface GroupMembersMember {
    deliverySettings?: string;
    email: string;
    id: string;
    role?: string;
    status: string;
    type?: string;
}

export interface RolePrivilege {
    /**
     * The name of the privilege.
     */
    privilegeName: string;
    /**
     * The obfuscated ID of the service this privilege is for.
     */
    serviceId: string;
}

export interface SchemaField {
    displayName: string;
    etag: string;
    fieldId: string;
    fieldName: string;
    fieldType: string;
    indexed?: boolean;
    multiValued?: boolean;
    numericIndexingSpec?: outputs.SchemaFieldNumericIndexingSpec;
    readAccessType?: string;
}

export interface SchemaFieldNumericIndexingSpec {
    maxValue?: number;
    minValue?: number;
}

export interface UserAddress {
    country?: string;
    countryCode?: string;
    customType?: string;
    extendedAddress?: string;
    formatted?: string;
    locality?: string;
    poBox?: string;
    postalCode?: string;
    primary?: boolean;
    region?: string;
    sourceIsStructured?: boolean;
    streetAddress?: string;
    type: string;
}

export interface UserCustomSchema {
    schemaName: string;
    schemaValues: {[key: string]: string};
}

export interface UserEmail {
    address?: string;
    customType?: string;
    primary?: boolean;
    type: string;
}

export interface UserExternalId {
    customType?: string;
    type: string;
    value: string;
}

export interface UserIm {
    customProtocol?: string;
    customType?: string;
    im?: string;
    primary?: boolean;
    protocol: string;
    type: string;
}

export interface UserKeyword {
    customType?: string;
    type: string;
    value: string;
}

export interface UserLanguage {
    customLanguage?: string;
    languageCode?: string;
    preference?: string;
}

export interface UserLocation {
    area?: string;
    buildingId?: string;
    customType?: string;
    deskCode?: string;
    floorName?: string;
    floorSection?: string;
    type: string;
}

export interface UserName {
    familyName: string;
    fullName: string;
    givenName?: string;
}

export interface UserOrganization {
    costCenter?: string;
    customType?: string;
    department?: string;
    description?: string;
    domain?: string;
    fullTimeEquivalent?: number;
    location?: string;
    name?: string;
    primary?: boolean;
    symbol?: string;
    title?: string;
    type: string;
}

export interface UserPhone {
    customType?: string;
    primary?: boolean;
    type: string;
    value: string;
}

export interface UserPosixAccount {
    accountId?: string;
    gecos?: string;
    gid?: string;
    homeDirectory?: string;
    operatingSystemType?: string;
    primary?: boolean;
    shell?: string;
    systemId?: string;
    uid?: string;
    username?: string;
}

export interface UserRelation {
    customType?: string;
    type: string;
    value: string;
}

export interface UserSshPublicKey {
    expirationTimeUsec?: string;
    fingerprint: string;
    key: string;
}

export interface UserWebsite {
    customType?: string;
    primary?: boolean;
    type: string;
    value: string;
}
