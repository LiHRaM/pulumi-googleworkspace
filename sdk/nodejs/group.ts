// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Group resource manages Google Workspace Groups. Group resides under the `https://www.googleapis.com/auth/admin.directory.group` client scope.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as googleworkspace from "@pulumi/googleworkspace";
 *
 * const sales = new googleworkspace.Group("sales", {
 *     aliases: [
 *         "paper-sales@example.com",
 *         "sales-dept@example.com",
 *     ],
 *     description: "Sales Group",
 *     email: "sales@example.com",
 * }, { timeouts: {
 *     create: "1m",
 *     update: "1m",
 * } });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import googleworkspace:index/group:Group sales 01abcde23fg4h5i
 * ```
 *
 * # or with email as id
 *
 * ```sh
 *  $ pulumi import googleworkspace:index/group:Group sales sales@example.com
 * ```
 */
export class Group extends pulumi.CustomResource {
    /**
     * Get an existing Group resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: GroupState, opts?: pulumi.CustomResourceOptions): Group {
        return new Group(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'googleworkspace:index/group:Group';

    /**
     * Returns true if the given object is an instance of Group.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Group {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Group.__pulumiType;
    }

    /**
     * Value is true if this group was created by an administrator rather than a user.
     */
    public /*out*/ readonly adminCreated!: pulumi.Output<boolean>;
    /**
     * asps.list of group's email addresses.
     */
    public readonly aliases!: pulumi.Output<string[] | undefined>;
    /**
     * An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
     */
    public /*out*/ readonly directMembersCount!: pulumi.Output<number>;
    /**
     * The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
     */
    public readonly email!: pulumi.Output<string>;
    /**
     * ETag of the resource.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The group's display name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
     */
    public /*out*/ readonly nonEditableAliases!: pulumi.Output<string[]>;

    /**
     * Create a Group resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: GroupArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: GroupArgs | GroupState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as GroupState | undefined;
            resourceInputs["adminCreated"] = state ? state.adminCreated : undefined;
            resourceInputs["aliases"] = state ? state.aliases : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["directMembersCount"] = state ? state.directMembersCount : undefined;
            resourceInputs["email"] = state ? state.email : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["nonEditableAliases"] = state ? state.nonEditableAliases : undefined;
        } else {
            const args = argsOrState as GroupArgs | undefined;
            if ((!args || args.email === undefined) && !opts.urn) {
                throw new Error("Missing required property 'email'");
            }
            resourceInputs["aliases"] = args ? args.aliases : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["email"] = args ? args.email : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["adminCreated"] = undefined /*out*/;
            resourceInputs["directMembersCount"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["nonEditableAliases"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(Group.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Group resources.
 */
export interface GroupState {
    /**
     * Value is true if this group was created by an administrator rather than a user.
     */
    adminCreated?: pulumi.Input<boolean>;
    /**
     * asps.list of group's email addresses.
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
     */
    description?: pulumi.Input<string>;
    /**
     * The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
     */
    directMembersCount?: pulumi.Input<number>;
    /**
     * The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
     */
    email?: pulumi.Input<string>;
    /**
     * ETag of the resource.
     */
    etag?: pulumi.Input<string>;
    /**
     * The group's display name.
     */
    name?: pulumi.Input<string>;
    /**
     * asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
     */
    nonEditableAliases?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a Group resource.
 */
export interface GroupArgs {
    /**
     * asps.list of group's email addresses.
     */
    aliases?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
     */
    description?: pulumi.Input<string>;
    /**
     * The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
     */
    email: pulumi.Input<string>;
    /**
     * The group's display name.
     */
    name?: pulumi.Input<string>;
}
