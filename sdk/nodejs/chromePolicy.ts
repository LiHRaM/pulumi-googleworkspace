// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as googleworkspace from "@pulumi/googleworkspace";
 *
 * const exampleOrgUnit = new googleworkspace.OrgUnit("exampleOrgUnit", {parentOrgUnitPath: "/"});
 * const exampleChromePolicy = new googleworkspace.ChromePolicy("exampleChromePolicy", {
 *     orgUnitId: googleworkspace_org_unit.test.id,
 *     policies: [{
 *         schemaName: "chrome.users.MaxConnectionsPerProxy",
 *         schemaValues: {
 *             maxConnectionsPerProxy: JSON.stringify(34),
 *         },
 *     }],
 * });
 * ```
 */
export class ChromePolicy extends pulumi.CustomResource {
    /**
     * Get an existing ChromePolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ChromePolicyState, opts?: pulumi.CustomResourceOptions): ChromePolicy {
        return new ChromePolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'googleworkspace:index/chromePolicy:ChromePolicy';

    /**
     * Returns true if the given object is an instance of ChromePolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ChromePolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ChromePolicy.__pulumiType;
    }

    /**
     * The target org unit on which this policy is applied.
     */
    public readonly orgUnitId!: pulumi.Output<string>;
    /**
     * Policies to set for the org unit
     */
    public readonly policies!: pulumi.Output<outputs.ChromePolicyPolicy[]>;

    /**
     * Create a ChromePolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ChromePolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ChromePolicyArgs | ChromePolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ChromePolicyState | undefined;
            resourceInputs["orgUnitId"] = state ? state.orgUnitId : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
        } else {
            const args = argsOrState as ChromePolicyArgs | undefined;
            if ((!args || args.orgUnitId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'orgUnitId'");
            }
            if ((!args || args.policies === undefined) && !opts.urn) {
                throw new Error("Missing required property 'policies'");
            }
            resourceInputs["orgUnitId"] = args ? args.orgUnitId : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ChromePolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ChromePolicy resources.
 */
export interface ChromePolicyState {
    /**
     * The target org unit on which this policy is applied.
     */
    orgUnitId?: pulumi.Input<string>;
    /**
     * Policies to set for the org unit
     */
    policies?: pulumi.Input<pulumi.Input<inputs.ChromePolicyPolicy>[]>;
}

/**
 * The set of arguments for constructing a ChromePolicy resource.
 */
export interface ChromePolicyArgs {
    /**
     * The target org unit on which this policy is applied.
     */
    orgUnitId: pulumi.Input<string>;
    /**
     * Policies to set for the org unit
     */
    policies: pulumi.Input<pulumi.Input<inputs.ChromePolicyPolicy>[]>;
}
