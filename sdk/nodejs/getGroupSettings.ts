// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as googleworkspace from "@pulumi/googleworkspace";
 *
 * const sales-settings = googleworkspace.getGroupSettings({
 *     email: "sales@example.com",
 * });
 * export const whoCanJoinSales = sales_settings.then(sales_settings => sales_settings.whoCanJoin);
 * ```
 */
export function getGroupSettings(args: GetGroupSettingsArgs, opts?: pulumi.InvokeOptions): Promise<GetGroupSettingsResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("googleworkspace:index/getGroupSettings:getGroupSettings", {
        "email": args.email,
    }, opts);
}

/**
 * A collection of arguments for invoking getGroupSettings.
 */
export interface GetGroupSettingsArgs {
    email: string;
}

/**
 * A collection of values returned by getGroupSettings.
 */
export interface GetGroupSettingsResult {
    readonly allowExternalMembers: boolean;
    readonly allowWebPosting: boolean;
    readonly archiveOnly: boolean;
    readonly customFooterText: string;
    readonly customReplyTo: string;
    readonly customRolesEnabledForSettingsToBeMerged: boolean;
    readonly defaultMessageDenyNotificationText: string;
    readonly description: string;
    readonly email: string;
    readonly enableCollaborativeInbox: boolean;
    readonly id: string;
    readonly includeCustomFooter: boolean;
    readonly includeInGlobalAddressList: boolean;
    readonly isArchived: boolean;
    readonly membersCanPostAsTheGroup: boolean;
    readonly messageModerationLevel: string;
    readonly name: string;
    readonly primaryLanguage: string;
    readonly replyTo: string;
    readonly sendMessageDenyNotification: boolean;
    readonly spamModerationLevel: string;
    readonly whoCanAssistContent: string;
    readonly whoCanContactOwner: string;
    readonly whoCanDiscoverGroup: string;
    readonly whoCanJoin: string;
    readonly whoCanLeaveGroup: string;
    readonly whoCanModerateContent: string;
    readonly whoCanModerateMembers: string;
    readonly whoCanPostMessage: string;
    readonly whoCanViewGroup: string;
    readonly whoCanViewMembership: string;
}

export function getGroupSettingsOutput(args: GetGroupSettingsOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetGroupSettingsResult> {
    return pulumi.output(args).apply(a => getGroupSettings(a, opts))
}

/**
 * A collection of arguments for invoking getGroupSettings.
 */
export interface GetGroupSettingsOutputArgs {
    email: pulumi.Input<string>;
}
