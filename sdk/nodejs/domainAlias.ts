// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Domain Alias resource manages Google Workspace Domain Aliases. Domain Alias resides under the `https://www.googleapis.com/auth/admin.directory.domain` client scope.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as googleworkspace from "@pulumi/googleworkspace";
 *
 * const example = new googleworkspace.DomainAlias("example", {
 *     domainAliasName: "alias-example.com",
 *     parentDomainName: "example.com",
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import googleworkspace:index/domainAlias:DomainAlias example alias-example.com
 * ```
 */
export class DomainAlias extends pulumi.CustomResource {
    /**
     * Get an existing DomainAlias resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DomainAliasState, opts?: pulumi.CustomResourceOptions): DomainAlias {
        return new DomainAlias(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'googleworkspace:index/domainAlias:DomainAlias';

    /**
     * Returns true if the given object is an instance of DomainAlias.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DomainAlias {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DomainAlias.__pulumiType;
    }

    /**
     * Creation time of the domain alias.
     */
    public /*out*/ readonly creationTime!: pulumi.Output<number>;
    /**
     * The domain alias name.
     */
    public readonly domainAliasName!: pulumi.Output<string>;
    /**
     * ETag of the resource.
     */
    public /*out*/ readonly etag!: pulumi.Output<string>;
    /**
     * The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.
     */
    public readonly parentDomainName!: pulumi.Output<string | undefined>;
    /**
     * Indicates the verification state of a domain alias.
     */
    public /*out*/ readonly verified!: pulumi.Output<boolean>;

    /**
     * Create a DomainAlias resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DomainAliasArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DomainAliasArgs | DomainAliasState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DomainAliasState | undefined;
            resourceInputs["creationTime"] = state ? state.creationTime : undefined;
            resourceInputs["domainAliasName"] = state ? state.domainAliasName : undefined;
            resourceInputs["etag"] = state ? state.etag : undefined;
            resourceInputs["parentDomainName"] = state ? state.parentDomainName : undefined;
            resourceInputs["verified"] = state ? state.verified : undefined;
        } else {
            const args = argsOrState as DomainAliasArgs | undefined;
            if ((!args || args.domainAliasName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'domainAliasName'");
            }
            resourceInputs["domainAliasName"] = args ? args.domainAliasName : undefined;
            resourceInputs["parentDomainName"] = args ? args.parentDomainName : undefined;
            resourceInputs["creationTime"] = undefined /*out*/;
            resourceInputs["etag"] = undefined /*out*/;
            resourceInputs["verified"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DomainAlias.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DomainAlias resources.
 */
export interface DomainAliasState {
    /**
     * Creation time of the domain alias.
     */
    creationTime?: pulumi.Input<number>;
    /**
     * The domain alias name.
     */
    domainAliasName?: pulumi.Input<string>;
    /**
     * ETag of the resource.
     */
    etag?: pulumi.Input<string>;
    /**
     * The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.
     */
    parentDomainName?: pulumi.Input<string>;
    /**
     * Indicates the verification state of a domain alias.
     */
    verified?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a DomainAlias resource.
 */
export interface DomainAliasArgs {
    /**
     * The domain alias name.
     */
    domainAliasName: pulumi.Input<string>;
    /**
     * The parent domain name that the domain alias is associated with. This can either be a primary or secondary domain name within a customer.
     */
    parentDomainName?: pulumi.Input<string>;
}
