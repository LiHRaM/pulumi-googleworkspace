// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export * from "./chromePolicy";
export * from "./domain";
export * from "./domainAlias";
export * from "./getChromePolicySchema";
export * from "./getDomain";
export * from "./getDomainAlias";
export * from "./getGroup";
export * from "./getGroupMember";
export * from "./getGroupMembers";
export * from "./getGroupSettings";
export * from "./getGroups";
export * from "./getOrgUnit";
export * from "./getPrivileges";
export * from "./getRole";
export * from "./getSchema";
export * from "./getUser";
export * from "./getUsers";
export * from "./gmailSendAsAlias";
export * from "./group";
export * from "./groupMember";
export * from "./groupMembers";
export * from "./groupSettings";
export * from "./orgUnit";
export * from "./provider";
export * from "./role";
export * from "./roleAssignment";
export * from "./schema";
export * from "./user";

// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

// Import resources to register:
import { ChromePolicy } from "./chromePolicy";
import { Domain } from "./domain";
import { DomainAlias } from "./domainAlias";
import { GmailSendAsAlias } from "./gmailSendAsAlias";
import { Group } from "./group";
import { GroupMember } from "./groupMember";
import { GroupMembers } from "./groupMembers";
import { GroupSettings } from "./groupSettings";
import { OrgUnit } from "./orgUnit";
import { Role } from "./role";
import { RoleAssignment } from "./roleAssignment";
import { Schema } from "./schema";
import { User } from "./user";

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "googleworkspace:index/chromePolicy:ChromePolicy":
                return new ChromePolicy(name, <any>undefined, { urn })
            case "googleworkspace:index/domain:Domain":
                return new Domain(name, <any>undefined, { urn })
            case "googleworkspace:index/domainAlias:DomainAlias":
                return new DomainAlias(name, <any>undefined, { urn })
            case "googleworkspace:index/gmailSendAsAlias:GmailSendAsAlias":
                return new GmailSendAsAlias(name, <any>undefined, { urn })
            case "googleworkspace:index/group:Group":
                return new Group(name, <any>undefined, { urn })
            case "googleworkspace:index/groupMember:GroupMember":
                return new GroupMember(name, <any>undefined, { urn })
            case "googleworkspace:index/groupMembers:GroupMembers":
                return new GroupMembers(name, <any>undefined, { urn })
            case "googleworkspace:index/groupSettings:GroupSettings":
                return new GroupSettings(name, <any>undefined, { urn })
            case "googleworkspace:index/orgUnit:OrgUnit":
                return new OrgUnit(name, <any>undefined, { urn })
            case "googleworkspace:index/role:Role":
                return new Role(name, <any>undefined, { urn })
            case "googleworkspace:index/roleAssignment:RoleAssignment":
                return new RoleAssignment(name, <any>undefined, { urn })
            case "googleworkspace:index/schema:Schema":
                return new Schema(name, <any>undefined, { urn })
            case "googleworkspace:index/user:User":
                return new User(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("googleworkspace", "index/chromePolicy", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/domain", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/domainAlias", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/gmailSendAsAlias", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/group", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/groupMember", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/groupMembers", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/groupSettings", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/orgUnit", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/role", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/roleAssignment", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/schema", _module)
pulumi.runtime.registerResourceModule("googleworkspace", "index/user", _module)

import { Provider } from "./provider";

pulumi.runtime.registerResourcePackage("googleworkspace", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:googleworkspace") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
