// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googleworkspace

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Group Member resource manages Google Workspace Groups Members. Group Member resides under the `https://www.googleapis.com/auth/admin.directory.group` client scope.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-googleworkspace/sdk/go/googleworkspace"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		sales, err := googleworkspace.NewGroup(ctx, "sales", &googleworkspace.GroupArgs{
// 			Email: pulumi.String("sales@example.com"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		michael, err := googleworkspace.NewUser(ctx, "michael", &googleworkspace.UserArgs{
// 			PrimaryEmail: pulumi.String("michael.scott@example.com"),
// 			Password:     pulumi.String("34819d7beeabb9260a5c854bc85b3e44"),
// 			HashFunction: pulumi.String("MD5"),
// 			Name: &UserNameArgs{
// 				FamilyName: pulumi.String("Scott"),
// 				GivenName:  pulumi.String("Michael"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = googleworkspace.NewGroupMember(ctx, "manager", &googleworkspace.GroupMemberArgs{
// 			GroupId: sales.ID(),
// 			Email:   michael.PrimaryEmail,
// 			Role:    pulumi.String("MANAGER"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ```sh
//  $ pulumi import googleworkspace:index/groupMember:GroupMember manager groups/01abcde23fg4h5i/members/123456789012345678901
// ```
type GroupMember struct {
	pulumi.CustomResourceState

	// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
	// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
	// `DISABLED`: Remove subscription. - `NONE`: No messages.
	DeliverySettings pulumi.StringPtrOutput `pulumi:"deliverySettings"`
	// The member's email address. A member can be a user or another group. This property is required when adding a member to a
	// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
	// automatically reflects the email address changes.
	Email pulumi.StringOutput `pulumi:"email"`
	// ETag of the resource.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
	// ID.
	GroupId pulumi.StringOutput `pulumi:"groupId"`
	// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
	MemberId pulumi.StringOutput `pulumi:"memberId"`
	// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
	// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
	// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
	// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
	// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
	// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
	// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
	Role pulumi.StringPtrOutput `pulumi:"role"`
	// Status of member.
	Status pulumi.StringOutput `pulumi:"status"`
	// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
	// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
	// member is a user.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewGroupMember registers a new resource with the given unique name, arguments, and options.
func NewGroupMember(ctx *pulumi.Context,
	name string, args *GroupMemberArgs, opts ...pulumi.ResourceOption) (*GroupMember, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Email == nil {
		return nil, errors.New("invalid value for required argument 'Email'")
	}
	if args.GroupId == nil {
		return nil, errors.New("invalid value for required argument 'GroupId'")
	}
	var resource GroupMember
	err := ctx.RegisterResource("googleworkspace:index/groupMember:GroupMember", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGroupMember gets an existing GroupMember resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGroupMember(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GroupMemberState, opts ...pulumi.ResourceOption) (*GroupMember, error) {
	var resource GroupMember
	err := ctx.ReadResource("googleworkspace:index/groupMember:GroupMember", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GroupMember resources.
type groupMemberState struct {
	// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
	// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
	// `DISABLED`: Remove subscription. - `NONE`: No messages.
	DeliverySettings *string `pulumi:"deliverySettings"`
	// The member's email address. A member can be a user or another group. This property is required when adding a member to a
	// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
	// automatically reflects the email address changes.
	Email *string `pulumi:"email"`
	// ETag of the resource.
	Etag *string `pulumi:"etag"`
	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
	// ID.
	GroupId *string `pulumi:"groupId"`
	// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
	MemberId *string `pulumi:"memberId"`
	// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
	// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
	// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
	// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
	// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
	// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
	// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
	Role *string `pulumi:"role"`
	// Status of member.
	Status *string `pulumi:"status"`
	// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
	// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
	// member is a user.
	Type *string `pulumi:"type"`
}

type GroupMemberState struct {
	// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
	// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
	// `DISABLED`: Remove subscription. - `NONE`: No messages.
	DeliverySettings pulumi.StringPtrInput
	// The member's email address. A member can be a user or another group. This property is required when adding a member to a
	// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
	// automatically reflects the email address changes.
	Email pulumi.StringPtrInput
	// ETag of the resource.
	Etag pulumi.StringPtrInput
	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
	// ID.
	GroupId pulumi.StringPtrInput
	// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
	MemberId pulumi.StringPtrInput
	// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
	// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
	// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
	// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
	// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
	// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
	// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
	Role pulumi.StringPtrInput
	// Status of member.
	Status pulumi.StringPtrInput
	// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
	// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
	// member is a user.
	Type pulumi.StringPtrInput
}

func (GroupMemberState) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMemberState)(nil)).Elem()
}

type groupMemberArgs struct {
	// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
	// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
	// `DISABLED`: Remove subscription. - `NONE`: No messages.
	DeliverySettings *string `pulumi:"deliverySettings"`
	// The member's email address. A member can be a user or another group. This property is required when adding a member to a
	// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
	// automatically reflects the email address changes.
	Email string `pulumi:"email"`
	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
	// ID.
	GroupId string `pulumi:"groupId"`
	// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
	// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
	// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
	// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
	// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
	// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
	// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
	Role *string `pulumi:"role"`
	// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
	// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
	// member is a user.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a GroupMember resource.
type GroupMemberArgs struct {
	// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
	// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
	// `DISABLED`: Remove subscription. - `NONE`: No messages.
	DeliverySettings pulumi.StringPtrInput
	// The member's email address. A member can be a user or another group. This property is required when adding a member to a
	// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
	// automatically reflects the email address changes.
	Email pulumi.StringInput
	// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
	// ID.
	GroupId pulumi.StringInput
	// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
	// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
	// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
	// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
	// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
	// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
	// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
	Role pulumi.StringPtrInput
	// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
	// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
	// member is a user.
	Type pulumi.StringPtrInput
}

func (GroupMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*groupMemberArgs)(nil)).Elem()
}

type GroupMemberInput interface {
	pulumi.Input

	ToGroupMemberOutput() GroupMemberOutput
	ToGroupMemberOutputWithContext(ctx context.Context) GroupMemberOutput
}

func (*GroupMember) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMember)(nil)).Elem()
}

func (i *GroupMember) ToGroupMemberOutput() GroupMemberOutput {
	return i.ToGroupMemberOutputWithContext(context.Background())
}

func (i *GroupMember) ToGroupMemberOutputWithContext(ctx context.Context) GroupMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMemberOutput)
}

// GroupMemberArrayInput is an input type that accepts GroupMemberArray and GroupMemberArrayOutput values.
// You can construct a concrete instance of `GroupMemberArrayInput` via:
//
//          GroupMemberArray{ GroupMemberArgs{...} }
type GroupMemberArrayInput interface {
	pulumi.Input

	ToGroupMemberArrayOutput() GroupMemberArrayOutput
	ToGroupMemberArrayOutputWithContext(context.Context) GroupMemberArrayOutput
}

type GroupMemberArray []GroupMemberInput

func (GroupMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupMember)(nil)).Elem()
}

func (i GroupMemberArray) ToGroupMemberArrayOutput() GroupMemberArrayOutput {
	return i.ToGroupMemberArrayOutputWithContext(context.Background())
}

func (i GroupMemberArray) ToGroupMemberArrayOutputWithContext(ctx context.Context) GroupMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMemberArrayOutput)
}

// GroupMemberMapInput is an input type that accepts GroupMemberMap and GroupMemberMapOutput values.
// You can construct a concrete instance of `GroupMemberMapInput` via:
//
//          GroupMemberMap{ "key": GroupMemberArgs{...} }
type GroupMemberMapInput interface {
	pulumi.Input

	ToGroupMemberMapOutput() GroupMemberMapOutput
	ToGroupMemberMapOutputWithContext(context.Context) GroupMemberMapOutput
}

type GroupMemberMap map[string]GroupMemberInput

func (GroupMemberMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupMember)(nil)).Elem()
}

func (i GroupMemberMap) ToGroupMemberMapOutput() GroupMemberMapOutput {
	return i.ToGroupMemberMapOutputWithContext(context.Background())
}

func (i GroupMemberMap) ToGroupMemberMapOutputWithContext(ctx context.Context) GroupMemberMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMemberMapOutput)
}

type GroupMemberOutput struct{ *pulumi.OutputState }

func (GroupMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GroupMember)(nil)).Elem()
}

func (o GroupMemberOutput) ToGroupMemberOutput() GroupMemberOutput {
	return o
}

func (o GroupMemberOutput) ToGroupMemberOutputWithContext(ctx context.Context) GroupMemberOutput {
	return o
}

// Defines mail delivery preferences of member. Acceptable values are: - `ALL_MAIL`: All messages, delivered as soon as
// they arrive. - `DAILY`: No more than one message a day. - `DIGEST`: Up to 25 messages bundled into a single message. -
// `DISABLED`: Remove subscription. - `NONE`: No messages.
func (o GroupMemberOutput) DeliverySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMember) pulumi.StringPtrOutput { return v.DeliverySettings }).(pulumi.StringPtrOutput)
}

// The member's email address. A member can be a user or another group. This property is required when adding a member to a
// group. The email must be unique and cannot be an alias of another group. If the email address is changed, the API
// automatically reflects the email address changes.
func (o GroupMemberOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMember) pulumi.StringOutput { return v.Email }).(pulumi.StringOutput)
}

// ETag of the resource.
func (o GroupMemberOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMember) pulumi.StringOutput { return v.Etag }).(pulumi.StringOutput)
}

// Identifies the group in the API request. The value can be the group's email address, group alias, or the unique group
// ID.
func (o GroupMemberOutput) GroupId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMember) pulumi.StringOutput { return v.GroupId }).(pulumi.StringOutput)
}

// The unique ID of the group member. A member id can be used as a member request URI's memberKey.
func (o GroupMemberOutput) MemberId() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMember) pulumi.StringOutput { return v.MemberId }).(pulumi.StringOutput)
}

// The member's role in a group. The API returns an error for cycles in group memberships. For example, if group1 is a
// member of group2, group2 cannot be a member of group1. Acceptable values are: - `MANAGER`: This role is only available
// if the Google Groups for Business is enabled using the Admin Console. A `MANAGER` role can do everything done by an
// `OWNER` role except make a member an `OWNER` or delete the group. A group can have multiple `MANAGER` members. -
// `MEMBER`: This role can subscribe to a group, view discussion archives, and view the group's membership list. - `OWNER`:
// This role can send messages to the group, add or remove members, change member roles, change group's settings, and
// delete the group. An OWNER must be a member of the group. A group can have more than one OWNER.
func (o GroupMemberOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMember) pulumi.StringPtrOutput { return v.Role }).(pulumi.StringPtrOutput)
}

// Status of member.
func (o GroupMemberOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v *GroupMember) pulumi.StringOutput { return v.Status }).(pulumi.StringOutput)
}

// The type of group member. Acceptable values are: - `CUSTOMER`: The member represents all users in a domain. An email
// address is not returned and the ID returned is the customer ID. - `GROUP`: The member is another group. - `USER`: The
// member is a user.
func (o GroupMemberOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GroupMember) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type GroupMemberArrayOutput struct{ *pulumi.OutputState }

func (GroupMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GroupMember)(nil)).Elem()
}

func (o GroupMemberArrayOutput) ToGroupMemberArrayOutput() GroupMemberArrayOutput {
	return o
}

func (o GroupMemberArrayOutput) ToGroupMemberArrayOutputWithContext(ctx context.Context) GroupMemberArrayOutput {
	return o
}

func (o GroupMemberArrayOutput) Index(i pulumi.IntInput) GroupMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *GroupMember {
		return vs[0].([]*GroupMember)[vs[1].(int)]
	}).(GroupMemberOutput)
}

type GroupMemberMapOutput struct{ *pulumi.OutputState }

func (GroupMemberMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GroupMember)(nil)).Elem()
}

func (o GroupMemberMapOutput) ToGroupMemberMapOutput() GroupMemberMapOutput {
	return o
}

func (o GroupMemberMapOutput) ToGroupMemberMapOutputWithContext(ctx context.Context) GroupMemberMapOutput {
	return o
}

func (o GroupMemberMapOutput) MapIndex(k pulumi.StringInput) GroupMemberOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *GroupMember {
		return vs[0].(map[string]*GroupMember)[vs[1].(string)]
	}).(GroupMemberOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMemberInput)(nil)).Elem(), &GroupMember{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMemberArrayInput)(nil)).Elem(), GroupMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMemberMapInput)(nil)).Elem(), GroupMemberMap{})
	pulumi.RegisterOutputType(GroupMemberOutput{})
	pulumi.RegisterOutputType(GroupMemberArrayOutput{})
	pulumi.RegisterOutputType(GroupMemberMapOutput{})
}
