// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googleworkspace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type ChromePolicyPolicy struct {
	// The full qualified name of the policy schema.
	SchemaName string `pulumi:"schemaName"`
	// JSON encoded map that represents key/value pairs that correspond to the given schema.
	SchemaValues map[string]string `pulumi:"schemaValues"`
}

// ChromePolicyPolicyInput is an input type that accepts ChromePolicyPolicyArgs and ChromePolicyPolicyOutput values.
// You can construct a concrete instance of `ChromePolicyPolicyInput` via:
//
//          ChromePolicyPolicyArgs{...}
type ChromePolicyPolicyInput interface {
	pulumi.Input

	ToChromePolicyPolicyOutput() ChromePolicyPolicyOutput
	ToChromePolicyPolicyOutputWithContext(context.Context) ChromePolicyPolicyOutput
}

type ChromePolicyPolicyArgs struct {
	// The full qualified name of the policy schema.
	SchemaName pulumi.StringInput `pulumi:"schemaName"`
	// JSON encoded map that represents key/value pairs that correspond to the given schema.
	SchemaValues pulumi.StringMapInput `pulumi:"schemaValues"`
}

func (ChromePolicyPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ChromePolicyPolicy)(nil)).Elem()
}

func (i ChromePolicyPolicyArgs) ToChromePolicyPolicyOutput() ChromePolicyPolicyOutput {
	return i.ToChromePolicyPolicyOutputWithContext(context.Background())
}

func (i ChromePolicyPolicyArgs) ToChromePolicyPolicyOutputWithContext(ctx context.Context) ChromePolicyPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChromePolicyPolicyOutput)
}

// ChromePolicyPolicyArrayInput is an input type that accepts ChromePolicyPolicyArray and ChromePolicyPolicyArrayOutput values.
// You can construct a concrete instance of `ChromePolicyPolicyArrayInput` via:
//
//          ChromePolicyPolicyArray{ ChromePolicyPolicyArgs{...} }
type ChromePolicyPolicyArrayInput interface {
	pulumi.Input

	ToChromePolicyPolicyArrayOutput() ChromePolicyPolicyArrayOutput
	ToChromePolicyPolicyArrayOutputWithContext(context.Context) ChromePolicyPolicyArrayOutput
}

type ChromePolicyPolicyArray []ChromePolicyPolicyInput

func (ChromePolicyPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChromePolicyPolicy)(nil)).Elem()
}

func (i ChromePolicyPolicyArray) ToChromePolicyPolicyArrayOutput() ChromePolicyPolicyArrayOutput {
	return i.ToChromePolicyPolicyArrayOutputWithContext(context.Background())
}

func (i ChromePolicyPolicyArray) ToChromePolicyPolicyArrayOutputWithContext(ctx context.Context) ChromePolicyPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChromePolicyPolicyArrayOutput)
}

type ChromePolicyPolicyOutput struct{ *pulumi.OutputState }

func (ChromePolicyPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ChromePolicyPolicy)(nil)).Elem()
}

func (o ChromePolicyPolicyOutput) ToChromePolicyPolicyOutput() ChromePolicyPolicyOutput {
	return o
}

func (o ChromePolicyPolicyOutput) ToChromePolicyPolicyOutputWithContext(ctx context.Context) ChromePolicyPolicyOutput {
	return o
}

// The full qualified name of the policy schema.
func (o ChromePolicyPolicyOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v ChromePolicyPolicy) string { return v.SchemaName }).(pulumi.StringOutput)
}

// JSON encoded map that represents key/value pairs that correspond to the given schema.
func (o ChromePolicyPolicyOutput) SchemaValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v ChromePolicyPolicy) map[string]string { return v.SchemaValues }).(pulumi.StringMapOutput)
}

type ChromePolicyPolicyArrayOutput struct{ *pulumi.OutputState }

func (ChromePolicyPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ChromePolicyPolicy)(nil)).Elem()
}

func (o ChromePolicyPolicyArrayOutput) ToChromePolicyPolicyArrayOutput() ChromePolicyPolicyArrayOutput {
	return o
}

func (o ChromePolicyPolicyArrayOutput) ToChromePolicyPolicyArrayOutputWithContext(ctx context.Context) ChromePolicyPolicyArrayOutput {
	return o
}

func (o ChromePolicyPolicyArrayOutput) Index(i pulumi.IntInput) ChromePolicyPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ChromePolicyPolicy {
		return vs[0].([]ChromePolicyPolicy)[vs[1].(int)]
	}).(ChromePolicyPolicyOutput)
}

type GmailSendAsAliasSmtpMsa struct {
	// The hostname of the SMTP service.
	Host string `pulumi:"host"`
	// The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
	Password *string `pulumi:"password"`
	// The port of the SMTP service.
	Port int `pulumi:"port"`
	// Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
	SecurityMode *string `pulumi:"securityMode"`
	// The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
	Username *string `pulumi:"username"`
}

// GmailSendAsAliasSmtpMsaInput is an input type that accepts GmailSendAsAliasSmtpMsaArgs and GmailSendAsAliasSmtpMsaOutput values.
// You can construct a concrete instance of `GmailSendAsAliasSmtpMsaInput` via:
//
//          GmailSendAsAliasSmtpMsaArgs{...}
type GmailSendAsAliasSmtpMsaInput interface {
	pulumi.Input

	ToGmailSendAsAliasSmtpMsaOutput() GmailSendAsAliasSmtpMsaOutput
	ToGmailSendAsAliasSmtpMsaOutputWithContext(context.Context) GmailSendAsAliasSmtpMsaOutput
}

type GmailSendAsAliasSmtpMsaArgs struct {
	// The hostname of the SMTP service.
	Host pulumi.StringInput `pulumi:"host"`
	// The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
	Password pulumi.StringPtrInput `pulumi:"password"`
	// The port of the SMTP service.
	Port pulumi.IntInput `pulumi:"port"`
	// Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
	SecurityMode pulumi.StringPtrInput `pulumi:"securityMode"`
	// The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
	Username pulumi.StringPtrInput `pulumi:"username"`
}

func (GmailSendAsAliasSmtpMsaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GmailSendAsAliasSmtpMsa)(nil)).Elem()
}

func (i GmailSendAsAliasSmtpMsaArgs) ToGmailSendAsAliasSmtpMsaOutput() GmailSendAsAliasSmtpMsaOutput {
	return i.ToGmailSendAsAliasSmtpMsaOutputWithContext(context.Background())
}

func (i GmailSendAsAliasSmtpMsaArgs) ToGmailSendAsAliasSmtpMsaOutputWithContext(ctx context.Context) GmailSendAsAliasSmtpMsaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GmailSendAsAliasSmtpMsaOutput)
}

func (i GmailSendAsAliasSmtpMsaArgs) ToGmailSendAsAliasSmtpMsaPtrOutput() GmailSendAsAliasSmtpMsaPtrOutput {
	return i.ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(context.Background())
}

func (i GmailSendAsAliasSmtpMsaArgs) ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(ctx context.Context) GmailSendAsAliasSmtpMsaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GmailSendAsAliasSmtpMsaOutput).ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(ctx)
}

// GmailSendAsAliasSmtpMsaPtrInput is an input type that accepts GmailSendAsAliasSmtpMsaArgs, GmailSendAsAliasSmtpMsaPtr and GmailSendAsAliasSmtpMsaPtrOutput values.
// You can construct a concrete instance of `GmailSendAsAliasSmtpMsaPtrInput` via:
//
//          GmailSendAsAliasSmtpMsaArgs{...}
//
//  or:
//
//          nil
type GmailSendAsAliasSmtpMsaPtrInput interface {
	pulumi.Input

	ToGmailSendAsAliasSmtpMsaPtrOutput() GmailSendAsAliasSmtpMsaPtrOutput
	ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(context.Context) GmailSendAsAliasSmtpMsaPtrOutput
}

type gmailSendAsAliasSmtpMsaPtrType GmailSendAsAliasSmtpMsaArgs

func GmailSendAsAliasSmtpMsaPtr(v *GmailSendAsAliasSmtpMsaArgs) GmailSendAsAliasSmtpMsaPtrInput {
	return (*gmailSendAsAliasSmtpMsaPtrType)(v)
}

func (*gmailSendAsAliasSmtpMsaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GmailSendAsAliasSmtpMsa)(nil)).Elem()
}

func (i *gmailSendAsAliasSmtpMsaPtrType) ToGmailSendAsAliasSmtpMsaPtrOutput() GmailSendAsAliasSmtpMsaPtrOutput {
	return i.ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(context.Background())
}

func (i *gmailSendAsAliasSmtpMsaPtrType) ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(ctx context.Context) GmailSendAsAliasSmtpMsaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GmailSendAsAliasSmtpMsaPtrOutput)
}

type GmailSendAsAliasSmtpMsaOutput struct{ *pulumi.OutputState }

func (GmailSendAsAliasSmtpMsaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GmailSendAsAliasSmtpMsa)(nil)).Elem()
}

func (o GmailSendAsAliasSmtpMsaOutput) ToGmailSendAsAliasSmtpMsaOutput() GmailSendAsAliasSmtpMsaOutput {
	return o
}

func (o GmailSendAsAliasSmtpMsaOutput) ToGmailSendAsAliasSmtpMsaOutputWithContext(ctx context.Context) GmailSendAsAliasSmtpMsaOutput {
	return o
}

func (o GmailSendAsAliasSmtpMsaOutput) ToGmailSendAsAliasSmtpMsaPtrOutput() GmailSendAsAliasSmtpMsaPtrOutput {
	return o.ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(context.Background())
}

func (o GmailSendAsAliasSmtpMsaOutput) ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(ctx context.Context) GmailSendAsAliasSmtpMsaPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v GmailSendAsAliasSmtpMsa) *GmailSendAsAliasSmtpMsa {
		return &v
	}).(GmailSendAsAliasSmtpMsaPtrOutput)
}

// The hostname of the SMTP service.
func (o GmailSendAsAliasSmtpMsaOutput) Host() pulumi.StringOutput {
	return o.ApplyT(func(v GmailSendAsAliasSmtpMsa) string { return v.Host }).(pulumi.StringOutput)
}

// The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
func (o GmailSendAsAliasSmtpMsaOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmailSendAsAliasSmtpMsa) *string { return v.Password }).(pulumi.StringPtrOutput)
}

// The port of the SMTP service.
func (o GmailSendAsAliasSmtpMsaOutput) Port() pulumi.IntOutput {
	return o.ApplyT(func(v GmailSendAsAliasSmtpMsa) int { return v.Port }).(pulumi.IntOutput)
}

// Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
func (o GmailSendAsAliasSmtpMsaOutput) SecurityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmailSendAsAliasSmtpMsa) *string { return v.SecurityMode }).(pulumi.StringPtrOutput)
}

// The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
func (o GmailSendAsAliasSmtpMsaOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GmailSendAsAliasSmtpMsa) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type GmailSendAsAliasSmtpMsaPtrOutput struct{ *pulumi.OutputState }

func (GmailSendAsAliasSmtpMsaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GmailSendAsAliasSmtpMsa)(nil)).Elem()
}

func (o GmailSendAsAliasSmtpMsaPtrOutput) ToGmailSendAsAliasSmtpMsaPtrOutput() GmailSendAsAliasSmtpMsaPtrOutput {
	return o
}

func (o GmailSendAsAliasSmtpMsaPtrOutput) ToGmailSendAsAliasSmtpMsaPtrOutputWithContext(ctx context.Context) GmailSendAsAliasSmtpMsaPtrOutput {
	return o
}

func (o GmailSendAsAliasSmtpMsaPtrOutput) Elem() GmailSendAsAliasSmtpMsaOutput {
	return o.ApplyT(func(v *GmailSendAsAliasSmtpMsa) GmailSendAsAliasSmtpMsa {
		if v != nil {
			return *v
		}
		var ret GmailSendAsAliasSmtpMsa
		return ret
	}).(GmailSendAsAliasSmtpMsaOutput)
}

// The hostname of the SMTP service.
func (o GmailSendAsAliasSmtpMsaPtrOutput) Host() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmailSendAsAliasSmtpMsa) *string {
		if v == nil {
			return nil
		}
		return &v.Host
	}).(pulumi.StringPtrOutput)
}

// The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
func (o GmailSendAsAliasSmtpMsaPtrOutput) Password() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmailSendAsAliasSmtpMsa) *string {
		if v == nil {
			return nil
		}
		return v.Password
	}).(pulumi.StringPtrOutput)
}

// The port of the SMTP service.
func (o GmailSendAsAliasSmtpMsaPtrOutput) Port() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *GmailSendAsAliasSmtpMsa) *int {
		if v == nil {
			return nil
		}
		return &v.Port
	}).(pulumi.IntPtrOutput)
}

// Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
func (o GmailSendAsAliasSmtpMsaPtrOutput) SecurityMode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmailSendAsAliasSmtpMsa) *string {
		if v == nil {
			return nil
		}
		return v.SecurityMode
	}).(pulumi.StringPtrOutput)
}

// The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
func (o GmailSendAsAliasSmtpMsaPtrOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *GmailSendAsAliasSmtpMsa) *string {
		if v == nil {
			return nil
		}
		return v.Username
	}).(pulumi.StringPtrOutput)
}

type GroupMembersMember struct {
	DeliverySettings *string `pulumi:"deliverySettings"`
	Email            string  `pulumi:"email"`
	Id               *string `pulumi:"id"`
	Role             *string `pulumi:"role"`
	Status           *string `pulumi:"status"`
	Type             *string `pulumi:"type"`
}

// GroupMembersMemberInput is an input type that accepts GroupMembersMemberArgs and GroupMembersMemberOutput values.
// You can construct a concrete instance of `GroupMembersMemberInput` via:
//
//          GroupMembersMemberArgs{...}
type GroupMembersMemberInput interface {
	pulumi.Input

	ToGroupMembersMemberOutput() GroupMembersMemberOutput
	ToGroupMembersMemberOutputWithContext(context.Context) GroupMembersMemberOutput
}

type GroupMembersMemberArgs struct {
	DeliverySettings pulumi.StringPtrInput `pulumi:"deliverySettings"`
	Email            pulumi.StringInput    `pulumi:"email"`
	Id               pulumi.StringPtrInput `pulumi:"id"`
	Role             pulumi.StringPtrInput `pulumi:"role"`
	Status           pulumi.StringPtrInput `pulumi:"status"`
	Type             pulumi.StringPtrInput `pulumi:"type"`
}

func (GroupMembersMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembersMember)(nil)).Elem()
}

func (i GroupMembersMemberArgs) ToGroupMembersMemberOutput() GroupMembersMemberOutput {
	return i.ToGroupMembersMemberOutputWithContext(context.Background())
}

func (i GroupMembersMemberArgs) ToGroupMembersMemberOutputWithContext(ctx context.Context) GroupMembersMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembersMemberOutput)
}

// GroupMembersMemberArrayInput is an input type that accepts GroupMembersMemberArray and GroupMembersMemberArrayOutput values.
// You can construct a concrete instance of `GroupMembersMemberArrayInput` via:
//
//          GroupMembersMemberArray{ GroupMembersMemberArgs{...} }
type GroupMembersMemberArrayInput interface {
	pulumi.Input

	ToGroupMembersMemberArrayOutput() GroupMembersMemberArrayOutput
	ToGroupMembersMemberArrayOutputWithContext(context.Context) GroupMembersMemberArrayOutput
}

type GroupMembersMemberArray []GroupMembersMemberInput

func (GroupMembersMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembersMember)(nil)).Elem()
}

func (i GroupMembersMemberArray) ToGroupMembersMemberArrayOutput() GroupMembersMemberArrayOutput {
	return i.ToGroupMembersMemberArrayOutputWithContext(context.Background())
}

func (i GroupMembersMemberArray) ToGroupMembersMemberArrayOutputWithContext(ctx context.Context) GroupMembersMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GroupMembersMemberArrayOutput)
}

type GroupMembersMemberOutput struct{ *pulumi.OutputState }

func (GroupMembersMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GroupMembersMember)(nil)).Elem()
}

func (o GroupMembersMemberOutput) ToGroupMembersMemberOutput() GroupMembersMemberOutput {
	return o
}

func (o GroupMembersMemberOutput) ToGroupMembersMemberOutputWithContext(ctx context.Context) GroupMembersMemberOutput {
	return o
}

func (o GroupMembersMemberOutput) DeliverySettings() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.DeliverySettings }).(pulumi.StringPtrOutput)
}

func (o GroupMembersMemberOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GroupMembersMember) string { return v.Email }).(pulumi.StringOutput)
}

func (o GroupMembersMemberOutput) Id() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.Id }).(pulumi.StringPtrOutput)
}

func (o GroupMembersMemberOutput) Role() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.Role }).(pulumi.StringPtrOutput)
}

func (o GroupMembersMemberOutput) Status() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.Status }).(pulumi.StringPtrOutput)
}

func (o GroupMembersMemberOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v GroupMembersMember) *string { return v.Type }).(pulumi.StringPtrOutput)
}

type GroupMembersMemberArrayOutput struct{ *pulumi.OutputState }

func (GroupMembersMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GroupMembersMember)(nil)).Elem()
}

func (o GroupMembersMemberArrayOutput) ToGroupMembersMemberArrayOutput() GroupMembersMemberArrayOutput {
	return o
}

func (o GroupMembersMemberArrayOutput) ToGroupMembersMemberArrayOutputWithContext(ctx context.Context) GroupMembersMemberArrayOutput {
	return o
}

func (o GroupMembersMemberArrayOutput) Index(i pulumi.IntInput) GroupMembersMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GroupMembersMember {
		return vs[0].([]GroupMembersMember)[vs[1].(int)]
	}).(GroupMembersMemberOutput)
}

type RolePrivilege struct {
	// The name of the privilege.
	PrivilegeName string `pulumi:"privilegeName"`
	// The obfuscated ID of the service this privilege is for.
	ServiceId string `pulumi:"serviceId"`
}

// RolePrivilegeInput is an input type that accepts RolePrivilegeArgs and RolePrivilegeOutput values.
// You can construct a concrete instance of `RolePrivilegeInput` via:
//
//          RolePrivilegeArgs{...}
type RolePrivilegeInput interface {
	pulumi.Input

	ToRolePrivilegeOutput() RolePrivilegeOutput
	ToRolePrivilegeOutputWithContext(context.Context) RolePrivilegeOutput
}

type RolePrivilegeArgs struct {
	// The name of the privilege.
	PrivilegeName pulumi.StringInput `pulumi:"privilegeName"`
	// The obfuscated ID of the service this privilege is for.
	ServiceId pulumi.StringInput `pulumi:"serviceId"`
}

func (RolePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePrivilege)(nil)).Elem()
}

func (i RolePrivilegeArgs) ToRolePrivilegeOutput() RolePrivilegeOutput {
	return i.ToRolePrivilegeOutputWithContext(context.Background())
}

func (i RolePrivilegeArgs) ToRolePrivilegeOutputWithContext(ctx context.Context) RolePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePrivilegeOutput)
}

// RolePrivilegeArrayInput is an input type that accepts RolePrivilegeArray and RolePrivilegeArrayOutput values.
// You can construct a concrete instance of `RolePrivilegeArrayInput` via:
//
//          RolePrivilegeArray{ RolePrivilegeArgs{...} }
type RolePrivilegeArrayInput interface {
	pulumi.Input

	ToRolePrivilegeArrayOutput() RolePrivilegeArrayOutput
	ToRolePrivilegeArrayOutputWithContext(context.Context) RolePrivilegeArrayOutput
}

type RolePrivilegeArray []RolePrivilegeInput

func (RolePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePrivilege)(nil)).Elem()
}

func (i RolePrivilegeArray) ToRolePrivilegeArrayOutput() RolePrivilegeArrayOutput {
	return i.ToRolePrivilegeArrayOutputWithContext(context.Background())
}

func (i RolePrivilegeArray) ToRolePrivilegeArrayOutputWithContext(ctx context.Context) RolePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(RolePrivilegeArrayOutput)
}

type RolePrivilegeOutput struct{ *pulumi.OutputState }

func (RolePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*RolePrivilege)(nil)).Elem()
}

func (o RolePrivilegeOutput) ToRolePrivilegeOutput() RolePrivilegeOutput {
	return o
}

func (o RolePrivilegeOutput) ToRolePrivilegeOutputWithContext(ctx context.Context) RolePrivilegeOutput {
	return o
}

// The name of the privilege.
func (o RolePrivilegeOutput) PrivilegeName() pulumi.StringOutput {
	return o.ApplyT(func(v RolePrivilege) string { return v.PrivilegeName }).(pulumi.StringOutput)
}

// The obfuscated ID of the service this privilege is for.
func (o RolePrivilegeOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v RolePrivilege) string { return v.ServiceId }).(pulumi.StringOutput)
}

type RolePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (RolePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]RolePrivilege)(nil)).Elem()
}

func (o RolePrivilegeArrayOutput) ToRolePrivilegeArrayOutput() RolePrivilegeArrayOutput {
	return o
}

func (o RolePrivilegeArrayOutput) ToRolePrivilegeArrayOutputWithContext(ctx context.Context) RolePrivilegeArrayOutput {
	return o
}

func (o RolePrivilegeArrayOutput) Index(i pulumi.IntInput) RolePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) RolePrivilege {
		return vs[0].([]RolePrivilege)[vs[1].(int)]
	}).(RolePrivilegeOutput)
}

type SchemaField struct {
	DisplayName         *string                         `pulumi:"displayName"`
	Etag                *string                         `pulumi:"etag"`
	FieldId             *string                         `pulumi:"fieldId"`
	FieldName           string                          `pulumi:"fieldName"`
	FieldType           string                          `pulumi:"fieldType"`
	Indexed             *bool                           `pulumi:"indexed"`
	MultiValued         *bool                           `pulumi:"multiValued"`
	NumericIndexingSpec *SchemaFieldNumericIndexingSpec `pulumi:"numericIndexingSpec"`
	ReadAccessType      *string                         `pulumi:"readAccessType"`
}

// SchemaFieldInput is an input type that accepts SchemaFieldArgs and SchemaFieldOutput values.
// You can construct a concrete instance of `SchemaFieldInput` via:
//
//          SchemaFieldArgs{...}
type SchemaFieldInput interface {
	pulumi.Input

	ToSchemaFieldOutput() SchemaFieldOutput
	ToSchemaFieldOutputWithContext(context.Context) SchemaFieldOutput
}

type SchemaFieldArgs struct {
	DisplayName         pulumi.StringPtrInput                  `pulumi:"displayName"`
	Etag                pulumi.StringPtrInput                  `pulumi:"etag"`
	FieldId             pulumi.StringPtrInput                  `pulumi:"fieldId"`
	FieldName           pulumi.StringInput                     `pulumi:"fieldName"`
	FieldType           pulumi.StringInput                     `pulumi:"fieldType"`
	Indexed             pulumi.BoolPtrInput                    `pulumi:"indexed"`
	MultiValued         pulumi.BoolPtrInput                    `pulumi:"multiValued"`
	NumericIndexingSpec SchemaFieldNumericIndexingSpecPtrInput `pulumi:"numericIndexingSpec"`
	ReadAccessType      pulumi.StringPtrInput                  `pulumi:"readAccessType"`
}

func (SchemaFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaField)(nil)).Elem()
}

func (i SchemaFieldArgs) ToSchemaFieldOutput() SchemaFieldOutput {
	return i.ToSchemaFieldOutputWithContext(context.Background())
}

func (i SchemaFieldArgs) ToSchemaFieldOutputWithContext(ctx context.Context) SchemaFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaFieldOutput)
}

// SchemaFieldArrayInput is an input type that accepts SchemaFieldArray and SchemaFieldArrayOutput values.
// You can construct a concrete instance of `SchemaFieldArrayInput` via:
//
//          SchemaFieldArray{ SchemaFieldArgs{...} }
type SchemaFieldArrayInput interface {
	pulumi.Input

	ToSchemaFieldArrayOutput() SchemaFieldArrayOutput
	ToSchemaFieldArrayOutputWithContext(context.Context) SchemaFieldArrayOutput
}

type SchemaFieldArray []SchemaFieldInput

func (SchemaFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaField)(nil)).Elem()
}

func (i SchemaFieldArray) ToSchemaFieldArrayOutput() SchemaFieldArrayOutput {
	return i.ToSchemaFieldArrayOutputWithContext(context.Background())
}

func (i SchemaFieldArray) ToSchemaFieldArrayOutputWithContext(ctx context.Context) SchemaFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaFieldArrayOutput)
}

type SchemaFieldOutput struct{ *pulumi.OutputState }

func (SchemaFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaField)(nil)).Elem()
}

func (o SchemaFieldOutput) ToSchemaFieldOutput() SchemaFieldOutput {
	return o
}

func (o SchemaFieldOutput) ToSchemaFieldOutputWithContext(ctx context.Context) SchemaFieldOutput {
	return o
}

func (o SchemaFieldOutput) DisplayName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaField) *string { return v.DisplayName }).(pulumi.StringPtrOutput)
}

func (o SchemaFieldOutput) Etag() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaField) *string { return v.Etag }).(pulumi.StringPtrOutput)
}

func (o SchemaFieldOutput) FieldId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaField) *string { return v.FieldId }).(pulumi.StringPtrOutput)
}

func (o SchemaFieldOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaField) string { return v.FieldName }).(pulumi.StringOutput)
}

func (o SchemaFieldOutput) FieldType() pulumi.StringOutput {
	return o.ApplyT(func(v SchemaField) string { return v.FieldType }).(pulumi.StringOutput)
}

func (o SchemaFieldOutput) Indexed() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaField) *bool { return v.Indexed }).(pulumi.BoolPtrOutput)
}

func (o SchemaFieldOutput) MultiValued() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v SchemaField) *bool { return v.MultiValued }).(pulumi.BoolPtrOutput)
}

func (o SchemaFieldOutput) NumericIndexingSpec() SchemaFieldNumericIndexingSpecPtrOutput {
	return o.ApplyT(func(v SchemaField) *SchemaFieldNumericIndexingSpec { return v.NumericIndexingSpec }).(SchemaFieldNumericIndexingSpecPtrOutput)
}

func (o SchemaFieldOutput) ReadAccessType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v SchemaField) *string { return v.ReadAccessType }).(pulumi.StringPtrOutput)
}

type SchemaFieldArrayOutput struct{ *pulumi.OutputState }

func (SchemaFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]SchemaField)(nil)).Elem()
}

func (o SchemaFieldArrayOutput) ToSchemaFieldArrayOutput() SchemaFieldArrayOutput {
	return o
}

func (o SchemaFieldArrayOutput) ToSchemaFieldArrayOutputWithContext(ctx context.Context) SchemaFieldArrayOutput {
	return o
}

func (o SchemaFieldArrayOutput) Index(i pulumi.IntInput) SchemaFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) SchemaField {
		return vs[0].([]SchemaField)[vs[1].(int)]
	}).(SchemaFieldOutput)
}

type SchemaFieldNumericIndexingSpec struct {
	MaxValue *float64 `pulumi:"maxValue"`
	MinValue *float64 `pulumi:"minValue"`
}

// SchemaFieldNumericIndexingSpecInput is an input type that accepts SchemaFieldNumericIndexingSpecArgs and SchemaFieldNumericIndexingSpecOutput values.
// You can construct a concrete instance of `SchemaFieldNumericIndexingSpecInput` via:
//
//          SchemaFieldNumericIndexingSpecArgs{...}
type SchemaFieldNumericIndexingSpecInput interface {
	pulumi.Input

	ToSchemaFieldNumericIndexingSpecOutput() SchemaFieldNumericIndexingSpecOutput
	ToSchemaFieldNumericIndexingSpecOutputWithContext(context.Context) SchemaFieldNumericIndexingSpecOutput
}

type SchemaFieldNumericIndexingSpecArgs struct {
	MaxValue pulumi.Float64PtrInput `pulumi:"maxValue"`
	MinValue pulumi.Float64PtrInput `pulumi:"minValue"`
}

func (SchemaFieldNumericIndexingSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaFieldNumericIndexingSpec)(nil)).Elem()
}

func (i SchemaFieldNumericIndexingSpecArgs) ToSchemaFieldNumericIndexingSpecOutput() SchemaFieldNumericIndexingSpecOutput {
	return i.ToSchemaFieldNumericIndexingSpecOutputWithContext(context.Background())
}

func (i SchemaFieldNumericIndexingSpecArgs) ToSchemaFieldNumericIndexingSpecOutputWithContext(ctx context.Context) SchemaFieldNumericIndexingSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaFieldNumericIndexingSpecOutput)
}

func (i SchemaFieldNumericIndexingSpecArgs) ToSchemaFieldNumericIndexingSpecPtrOutput() SchemaFieldNumericIndexingSpecPtrOutput {
	return i.ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(context.Background())
}

func (i SchemaFieldNumericIndexingSpecArgs) ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(ctx context.Context) SchemaFieldNumericIndexingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaFieldNumericIndexingSpecOutput).ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(ctx)
}

// SchemaFieldNumericIndexingSpecPtrInput is an input type that accepts SchemaFieldNumericIndexingSpecArgs, SchemaFieldNumericIndexingSpecPtr and SchemaFieldNumericIndexingSpecPtrOutput values.
// You can construct a concrete instance of `SchemaFieldNumericIndexingSpecPtrInput` via:
//
//          SchemaFieldNumericIndexingSpecArgs{...}
//
//  or:
//
//          nil
type SchemaFieldNumericIndexingSpecPtrInput interface {
	pulumi.Input

	ToSchemaFieldNumericIndexingSpecPtrOutput() SchemaFieldNumericIndexingSpecPtrOutput
	ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(context.Context) SchemaFieldNumericIndexingSpecPtrOutput
}

type schemaFieldNumericIndexingSpecPtrType SchemaFieldNumericIndexingSpecArgs

func SchemaFieldNumericIndexingSpecPtr(v *SchemaFieldNumericIndexingSpecArgs) SchemaFieldNumericIndexingSpecPtrInput {
	return (*schemaFieldNumericIndexingSpecPtrType)(v)
}

func (*schemaFieldNumericIndexingSpecPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaFieldNumericIndexingSpec)(nil)).Elem()
}

func (i *schemaFieldNumericIndexingSpecPtrType) ToSchemaFieldNumericIndexingSpecPtrOutput() SchemaFieldNumericIndexingSpecPtrOutput {
	return i.ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(context.Background())
}

func (i *schemaFieldNumericIndexingSpecPtrType) ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(ctx context.Context) SchemaFieldNumericIndexingSpecPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(SchemaFieldNumericIndexingSpecPtrOutput)
}

type SchemaFieldNumericIndexingSpecOutput struct{ *pulumi.OutputState }

func (SchemaFieldNumericIndexingSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*SchemaFieldNumericIndexingSpec)(nil)).Elem()
}

func (o SchemaFieldNumericIndexingSpecOutput) ToSchemaFieldNumericIndexingSpecOutput() SchemaFieldNumericIndexingSpecOutput {
	return o
}

func (o SchemaFieldNumericIndexingSpecOutput) ToSchemaFieldNumericIndexingSpecOutputWithContext(ctx context.Context) SchemaFieldNumericIndexingSpecOutput {
	return o
}

func (o SchemaFieldNumericIndexingSpecOutput) ToSchemaFieldNumericIndexingSpecPtrOutput() SchemaFieldNumericIndexingSpecPtrOutput {
	return o.ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(context.Background())
}

func (o SchemaFieldNumericIndexingSpecOutput) ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(ctx context.Context) SchemaFieldNumericIndexingSpecPtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v SchemaFieldNumericIndexingSpec) *SchemaFieldNumericIndexingSpec {
		return &v
	}).(SchemaFieldNumericIndexingSpecPtrOutput)
}

func (o SchemaFieldNumericIndexingSpecOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchemaFieldNumericIndexingSpec) *float64 { return v.MaxValue }).(pulumi.Float64PtrOutput)
}

func (o SchemaFieldNumericIndexingSpecOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v SchemaFieldNumericIndexingSpec) *float64 { return v.MinValue }).(pulumi.Float64PtrOutput)
}

type SchemaFieldNumericIndexingSpecPtrOutput struct{ *pulumi.OutputState }

func (SchemaFieldNumericIndexingSpecPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**SchemaFieldNumericIndexingSpec)(nil)).Elem()
}

func (o SchemaFieldNumericIndexingSpecPtrOutput) ToSchemaFieldNumericIndexingSpecPtrOutput() SchemaFieldNumericIndexingSpecPtrOutput {
	return o
}

func (o SchemaFieldNumericIndexingSpecPtrOutput) ToSchemaFieldNumericIndexingSpecPtrOutputWithContext(ctx context.Context) SchemaFieldNumericIndexingSpecPtrOutput {
	return o
}

func (o SchemaFieldNumericIndexingSpecPtrOutput) Elem() SchemaFieldNumericIndexingSpecOutput {
	return o.ApplyT(func(v *SchemaFieldNumericIndexingSpec) SchemaFieldNumericIndexingSpec {
		if v != nil {
			return *v
		}
		var ret SchemaFieldNumericIndexingSpec
		return ret
	}).(SchemaFieldNumericIndexingSpecOutput)
}

func (o SchemaFieldNumericIndexingSpecPtrOutput) MaxValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SchemaFieldNumericIndexingSpec) *float64 {
		if v == nil {
			return nil
		}
		return v.MaxValue
	}).(pulumi.Float64PtrOutput)
}

func (o SchemaFieldNumericIndexingSpecPtrOutput) MinValue() pulumi.Float64PtrOutput {
	return o.ApplyT(func(v *SchemaFieldNumericIndexingSpec) *float64 {
		if v == nil {
			return nil
		}
		return v.MinValue
	}).(pulumi.Float64PtrOutput)
}

type UserAddress struct {
	Country            *string `pulumi:"country"`
	CountryCode        *string `pulumi:"countryCode"`
	CustomType         *string `pulumi:"customType"`
	ExtendedAddress    *string `pulumi:"extendedAddress"`
	Formatted          *string `pulumi:"formatted"`
	Locality           *string `pulumi:"locality"`
	PoBox              *string `pulumi:"poBox"`
	PostalCode         *string `pulumi:"postalCode"`
	Primary            *bool   `pulumi:"primary"`
	Region             *string `pulumi:"region"`
	SourceIsStructured *bool   `pulumi:"sourceIsStructured"`
	StreetAddress      *string `pulumi:"streetAddress"`
	Type               string  `pulumi:"type"`
}

// UserAddressInput is an input type that accepts UserAddressArgs and UserAddressOutput values.
// You can construct a concrete instance of `UserAddressInput` via:
//
//          UserAddressArgs{...}
type UserAddressInput interface {
	pulumi.Input

	ToUserAddressOutput() UserAddressOutput
	ToUserAddressOutputWithContext(context.Context) UserAddressOutput
}

type UserAddressArgs struct {
	Country            pulumi.StringPtrInput `pulumi:"country"`
	CountryCode        pulumi.StringPtrInput `pulumi:"countryCode"`
	CustomType         pulumi.StringPtrInput `pulumi:"customType"`
	ExtendedAddress    pulumi.StringPtrInput `pulumi:"extendedAddress"`
	Formatted          pulumi.StringPtrInput `pulumi:"formatted"`
	Locality           pulumi.StringPtrInput `pulumi:"locality"`
	PoBox              pulumi.StringPtrInput `pulumi:"poBox"`
	PostalCode         pulumi.StringPtrInput `pulumi:"postalCode"`
	Primary            pulumi.BoolPtrInput   `pulumi:"primary"`
	Region             pulumi.StringPtrInput `pulumi:"region"`
	SourceIsStructured pulumi.BoolPtrInput   `pulumi:"sourceIsStructured"`
	StreetAddress      pulumi.StringPtrInput `pulumi:"streetAddress"`
	Type               pulumi.StringInput    `pulumi:"type"`
}

func (UserAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAddress)(nil)).Elem()
}

func (i UserAddressArgs) ToUserAddressOutput() UserAddressOutput {
	return i.ToUserAddressOutputWithContext(context.Background())
}

func (i UserAddressArgs) ToUserAddressOutputWithContext(ctx context.Context) UserAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAddressOutput)
}

// UserAddressArrayInput is an input type that accepts UserAddressArray and UserAddressArrayOutput values.
// You can construct a concrete instance of `UserAddressArrayInput` via:
//
//          UserAddressArray{ UserAddressArgs{...} }
type UserAddressArrayInput interface {
	pulumi.Input

	ToUserAddressArrayOutput() UserAddressArrayOutput
	ToUserAddressArrayOutputWithContext(context.Context) UserAddressArrayOutput
}

type UserAddressArray []UserAddressInput

func (UserAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserAddress)(nil)).Elem()
}

func (i UserAddressArray) ToUserAddressArrayOutput() UserAddressArrayOutput {
	return i.ToUserAddressArrayOutputWithContext(context.Background())
}

func (i UserAddressArray) ToUserAddressArrayOutputWithContext(ctx context.Context) UserAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserAddressArrayOutput)
}

type UserAddressOutput struct{ *pulumi.OutputState }

func (UserAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserAddress)(nil)).Elem()
}

func (o UserAddressOutput) ToUserAddressOutput() UserAddressOutput {
	return o
}

func (o UserAddressOutput) ToUserAddressOutputWithContext(ctx context.Context) UserAddressOutput {
	return o
}

func (o UserAddressOutput) Country() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.Country }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) CountryCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.CountryCode }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) ExtendedAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.ExtendedAddress }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) Formatted() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.Formatted }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) Locality() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.Locality }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) PoBox() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.PoBox }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) PostalCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.PostalCode }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserAddress) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

func (o UserAddressOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.Region }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) SourceIsStructured() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserAddress) *bool { return v.SourceIsStructured }).(pulumi.BoolPtrOutput)
}

func (o UserAddressOutput) StreetAddress() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserAddress) *string { return v.StreetAddress }).(pulumi.StringPtrOutput)
}

func (o UserAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserAddress) string { return v.Type }).(pulumi.StringOutput)
}

type UserAddressArrayOutput struct{ *pulumi.OutputState }

func (UserAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserAddress)(nil)).Elem()
}

func (o UserAddressArrayOutput) ToUserAddressArrayOutput() UserAddressArrayOutput {
	return o
}

func (o UserAddressArrayOutput) ToUserAddressArrayOutputWithContext(ctx context.Context) UserAddressArrayOutput {
	return o
}

func (o UserAddressArrayOutput) Index(i pulumi.IntInput) UserAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserAddress {
		return vs[0].([]UserAddress)[vs[1].(int)]
	}).(UserAddressOutput)
}

type UserCustomSchema struct {
	SchemaName   string            `pulumi:"schemaName"`
	SchemaValues map[string]string `pulumi:"schemaValues"`
}

// UserCustomSchemaInput is an input type that accepts UserCustomSchemaArgs and UserCustomSchemaOutput values.
// You can construct a concrete instance of `UserCustomSchemaInput` via:
//
//          UserCustomSchemaArgs{...}
type UserCustomSchemaInput interface {
	pulumi.Input

	ToUserCustomSchemaOutput() UserCustomSchemaOutput
	ToUserCustomSchemaOutputWithContext(context.Context) UserCustomSchemaOutput
}

type UserCustomSchemaArgs struct {
	SchemaName   pulumi.StringInput    `pulumi:"schemaName"`
	SchemaValues pulumi.StringMapInput `pulumi:"schemaValues"`
}

func (UserCustomSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCustomSchema)(nil)).Elem()
}

func (i UserCustomSchemaArgs) ToUserCustomSchemaOutput() UserCustomSchemaOutput {
	return i.ToUserCustomSchemaOutputWithContext(context.Background())
}

func (i UserCustomSchemaArgs) ToUserCustomSchemaOutputWithContext(ctx context.Context) UserCustomSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCustomSchemaOutput)
}

// UserCustomSchemaArrayInput is an input type that accepts UserCustomSchemaArray and UserCustomSchemaArrayOutput values.
// You can construct a concrete instance of `UserCustomSchemaArrayInput` via:
//
//          UserCustomSchemaArray{ UserCustomSchemaArgs{...} }
type UserCustomSchemaArrayInput interface {
	pulumi.Input

	ToUserCustomSchemaArrayOutput() UserCustomSchemaArrayOutput
	ToUserCustomSchemaArrayOutputWithContext(context.Context) UserCustomSchemaArrayOutput
}

type UserCustomSchemaArray []UserCustomSchemaInput

func (UserCustomSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserCustomSchema)(nil)).Elem()
}

func (i UserCustomSchemaArray) ToUserCustomSchemaArrayOutput() UserCustomSchemaArrayOutput {
	return i.ToUserCustomSchemaArrayOutputWithContext(context.Background())
}

func (i UserCustomSchemaArray) ToUserCustomSchemaArrayOutputWithContext(ctx context.Context) UserCustomSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserCustomSchemaArrayOutput)
}

type UserCustomSchemaOutput struct{ *pulumi.OutputState }

func (UserCustomSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserCustomSchema)(nil)).Elem()
}

func (o UserCustomSchemaOutput) ToUserCustomSchemaOutput() UserCustomSchemaOutput {
	return o
}

func (o UserCustomSchemaOutput) ToUserCustomSchemaOutputWithContext(ctx context.Context) UserCustomSchemaOutput {
	return o
}

func (o UserCustomSchemaOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v UserCustomSchema) string { return v.SchemaName }).(pulumi.StringOutput)
}

func (o UserCustomSchemaOutput) SchemaValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v UserCustomSchema) map[string]string { return v.SchemaValues }).(pulumi.StringMapOutput)
}

type UserCustomSchemaArrayOutput struct{ *pulumi.OutputState }

func (UserCustomSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserCustomSchema)(nil)).Elem()
}

func (o UserCustomSchemaArrayOutput) ToUserCustomSchemaArrayOutput() UserCustomSchemaArrayOutput {
	return o
}

func (o UserCustomSchemaArrayOutput) ToUserCustomSchemaArrayOutputWithContext(ctx context.Context) UserCustomSchemaArrayOutput {
	return o
}

func (o UserCustomSchemaArrayOutput) Index(i pulumi.IntInput) UserCustomSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserCustomSchema {
		return vs[0].([]UserCustomSchema)[vs[1].(int)]
	}).(UserCustomSchemaOutput)
}

type UserEmail struct {
	Address    *string `pulumi:"address"`
	CustomType *string `pulumi:"customType"`
	Primary    *bool   `pulumi:"primary"`
	Type       string  `pulumi:"type"`
}

// UserEmailInput is an input type that accepts UserEmailArgs and UserEmailOutput values.
// You can construct a concrete instance of `UserEmailInput` via:
//
//          UserEmailArgs{...}
type UserEmailInput interface {
	pulumi.Input

	ToUserEmailOutput() UserEmailOutput
	ToUserEmailOutputWithContext(context.Context) UserEmailOutput
}

type UserEmailArgs struct {
	Address    pulumi.StringPtrInput `pulumi:"address"`
	CustomType pulumi.StringPtrInput `pulumi:"customType"`
	Primary    pulumi.BoolPtrInput   `pulumi:"primary"`
	Type       pulumi.StringInput    `pulumi:"type"`
}

func (UserEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserEmail)(nil)).Elem()
}

func (i UserEmailArgs) ToUserEmailOutput() UserEmailOutput {
	return i.ToUserEmailOutputWithContext(context.Background())
}

func (i UserEmailArgs) ToUserEmailOutputWithContext(ctx context.Context) UserEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserEmailOutput)
}

// UserEmailArrayInput is an input type that accepts UserEmailArray and UserEmailArrayOutput values.
// You can construct a concrete instance of `UserEmailArrayInput` via:
//
//          UserEmailArray{ UserEmailArgs{...} }
type UserEmailArrayInput interface {
	pulumi.Input

	ToUserEmailArrayOutput() UserEmailArrayOutput
	ToUserEmailArrayOutputWithContext(context.Context) UserEmailArrayOutput
}

type UserEmailArray []UserEmailInput

func (UserEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserEmail)(nil)).Elem()
}

func (i UserEmailArray) ToUserEmailArrayOutput() UserEmailArrayOutput {
	return i.ToUserEmailArrayOutputWithContext(context.Background())
}

func (i UserEmailArray) ToUserEmailArrayOutputWithContext(ctx context.Context) UserEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserEmailArrayOutput)
}

type UserEmailOutput struct{ *pulumi.OutputState }

func (UserEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserEmail)(nil)).Elem()
}

func (o UserEmailOutput) ToUserEmailOutput() UserEmailOutput {
	return o
}

func (o UserEmailOutput) ToUserEmailOutputWithContext(ctx context.Context) UserEmailOutput {
	return o
}

func (o UserEmailOutput) Address() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserEmail) *string { return v.Address }).(pulumi.StringPtrOutput)
}

func (o UserEmailOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserEmail) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserEmailOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserEmail) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

func (o UserEmailOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserEmail) string { return v.Type }).(pulumi.StringOutput)
}

type UserEmailArrayOutput struct{ *pulumi.OutputState }

func (UserEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserEmail)(nil)).Elem()
}

func (o UserEmailArrayOutput) ToUserEmailArrayOutput() UserEmailArrayOutput {
	return o
}

func (o UserEmailArrayOutput) ToUserEmailArrayOutputWithContext(ctx context.Context) UserEmailArrayOutput {
	return o
}

func (o UserEmailArrayOutput) Index(i pulumi.IntInput) UserEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserEmail {
		return vs[0].([]UserEmail)[vs[1].(int)]
	}).(UserEmailOutput)
}

type UserExternalId struct {
	CustomType *string `pulumi:"customType"`
	Type       string  `pulumi:"type"`
	Value      string  `pulumi:"value"`
}

// UserExternalIdInput is an input type that accepts UserExternalIdArgs and UserExternalIdOutput values.
// You can construct a concrete instance of `UserExternalIdInput` via:
//
//          UserExternalIdArgs{...}
type UserExternalIdInput interface {
	pulumi.Input

	ToUserExternalIdOutput() UserExternalIdOutput
	ToUserExternalIdOutputWithContext(context.Context) UserExternalIdOutput
}

type UserExternalIdArgs struct {
	CustomType pulumi.StringPtrInput `pulumi:"customType"`
	Type       pulumi.StringInput    `pulumi:"type"`
	Value      pulumi.StringInput    `pulumi:"value"`
}

func (UserExternalIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserExternalId)(nil)).Elem()
}

func (i UserExternalIdArgs) ToUserExternalIdOutput() UserExternalIdOutput {
	return i.ToUserExternalIdOutputWithContext(context.Background())
}

func (i UserExternalIdArgs) ToUserExternalIdOutputWithContext(ctx context.Context) UserExternalIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExternalIdOutput)
}

// UserExternalIdArrayInput is an input type that accepts UserExternalIdArray and UserExternalIdArrayOutput values.
// You can construct a concrete instance of `UserExternalIdArrayInput` via:
//
//          UserExternalIdArray{ UserExternalIdArgs{...} }
type UserExternalIdArrayInput interface {
	pulumi.Input

	ToUserExternalIdArrayOutput() UserExternalIdArrayOutput
	ToUserExternalIdArrayOutputWithContext(context.Context) UserExternalIdArrayOutput
}

type UserExternalIdArray []UserExternalIdInput

func (UserExternalIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserExternalId)(nil)).Elem()
}

func (i UserExternalIdArray) ToUserExternalIdArrayOutput() UserExternalIdArrayOutput {
	return i.ToUserExternalIdArrayOutputWithContext(context.Background())
}

func (i UserExternalIdArray) ToUserExternalIdArrayOutputWithContext(ctx context.Context) UserExternalIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserExternalIdArrayOutput)
}

type UserExternalIdOutput struct{ *pulumi.OutputState }

func (UserExternalIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserExternalId)(nil)).Elem()
}

func (o UserExternalIdOutput) ToUserExternalIdOutput() UserExternalIdOutput {
	return o
}

func (o UserExternalIdOutput) ToUserExternalIdOutputWithContext(ctx context.Context) UserExternalIdOutput {
	return o
}

func (o UserExternalIdOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserExternalId) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserExternalIdOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserExternalId) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserExternalIdOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserExternalId) string { return v.Value }).(pulumi.StringOutput)
}

type UserExternalIdArrayOutput struct{ *pulumi.OutputState }

func (UserExternalIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserExternalId)(nil)).Elem()
}

func (o UserExternalIdArrayOutput) ToUserExternalIdArrayOutput() UserExternalIdArrayOutput {
	return o
}

func (o UserExternalIdArrayOutput) ToUserExternalIdArrayOutputWithContext(ctx context.Context) UserExternalIdArrayOutput {
	return o
}

func (o UserExternalIdArrayOutput) Index(i pulumi.IntInput) UserExternalIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserExternalId {
		return vs[0].([]UserExternalId)[vs[1].(int)]
	}).(UserExternalIdOutput)
}

type UserIm struct {
	CustomProtocol *string `pulumi:"customProtocol"`
	CustomType     *string `pulumi:"customType"`
	Im             *string `pulumi:"im"`
	Primary        *bool   `pulumi:"primary"`
	Protocol       string  `pulumi:"protocol"`
	Type           string  `pulumi:"type"`
}

// UserImInput is an input type that accepts UserImArgs and UserImOutput values.
// You can construct a concrete instance of `UserImInput` via:
//
//          UserImArgs{...}
type UserImInput interface {
	pulumi.Input

	ToUserImOutput() UserImOutput
	ToUserImOutputWithContext(context.Context) UserImOutput
}

type UserImArgs struct {
	CustomProtocol pulumi.StringPtrInput `pulumi:"customProtocol"`
	CustomType     pulumi.StringPtrInput `pulumi:"customType"`
	Im             pulumi.StringPtrInput `pulumi:"im"`
	Primary        pulumi.BoolPtrInput   `pulumi:"primary"`
	Protocol       pulumi.StringInput    `pulumi:"protocol"`
	Type           pulumi.StringInput    `pulumi:"type"`
}

func (UserImArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIm)(nil)).Elem()
}

func (i UserImArgs) ToUserImOutput() UserImOutput {
	return i.ToUserImOutputWithContext(context.Background())
}

func (i UserImArgs) ToUserImOutputWithContext(ctx context.Context) UserImOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserImOutput)
}

// UserImArrayInput is an input type that accepts UserImArray and UserImArrayOutput values.
// You can construct a concrete instance of `UserImArrayInput` via:
//
//          UserImArray{ UserImArgs{...} }
type UserImArrayInput interface {
	pulumi.Input

	ToUserImArrayOutput() UserImArrayOutput
	ToUserImArrayOutputWithContext(context.Context) UserImArrayOutput
}

type UserImArray []UserImInput

func (UserImArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserIm)(nil)).Elem()
}

func (i UserImArray) ToUserImArrayOutput() UserImArrayOutput {
	return i.ToUserImArrayOutputWithContext(context.Background())
}

func (i UserImArray) ToUserImArrayOutputWithContext(ctx context.Context) UserImArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserImArrayOutput)
}

type UserImOutput struct{ *pulumi.OutputState }

func (UserImOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserIm)(nil)).Elem()
}

func (o UserImOutput) ToUserImOutput() UserImOutput {
	return o
}

func (o UserImOutput) ToUserImOutputWithContext(ctx context.Context) UserImOutput {
	return o
}

func (o UserImOutput) CustomProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIm) *string { return v.CustomProtocol }).(pulumi.StringPtrOutput)
}

func (o UserImOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIm) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserImOutput) Im() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserIm) *string { return v.Im }).(pulumi.StringPtrOutput)
}

func (o UserImOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserIm) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

func (o UserImOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v UserIm) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o UserImOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserIm) string { return v.Type }).(pulumi.StringOutput)
}

type UserImArrayOutput struct{ *pulumi.OutputState }

func (UserImArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserIm)(nil)).Elem()
}

func (o UserImArrayOutput) ToUserImArrayOutput() UserImArrayOutput {
	return o
}

func (o UserImArrayOutput) ToUserImArrayOutputWithContext(ctx context.Context) UserImArrayOutput {
	return o
}

func (o UserImArrayOutput) Index(i pulumi.IntInput) UserImOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserIm {
		return vs[0].([]UserIm)[vs[1].(int)]
	}).(UserImOutput)
}

type UserKeyword struct {
	CustomType *string `pulumi:"customType"`
	Type       string  `pulumi:"type"`
	Value      string  `pulumi:"value"`
}

// UserKeywordInput is an input type that accepts UserKeywordArgs and UserKeywordOutput values.
// You can construct a concrete instance of `UserKeywordInput` via:
//
//          UserKeywordArgs{...}
type UserKeywordInput interface {
	pulumi.Input

	ToUserKeywordOutput() UserKeywordOutput
	ToUserKeywordOutputWithContext(context.Context) UserKeywordOutput
}

type UserKeywordArgs struct {
	CustomType pulumi.StringPtrInput `pulumi:"customType"`
	Type       pulumi.StringInput    `pulumi:"type"`
	Value      pulumi.StringInput    `pulumi:"value"`
}

func (UserKeywordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserKeyword)(nil)).Elem()
}

func (i UserKeywordArgs) ToUserKeywordOutput() UserKeywordOutput {
	return i.ToUserKeywordOutputWithContext(context.Background())
}

func (i UserKeywordArgs) ToUserKeywordOutputWithContext(ctx context.Context) UserKeywordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserKeywordOutput)
}

// UserKeywordArrayInput is an input type that accepts UserKeywordArray and UserKeywordArrayOutput values.
// You can construct a concrete instance of `UserKeywordArrayInput` via:
//
//          UserKeywordArray{ UserKeywordArgs{...} }
type UserKeywordArrayInput interface {
	pulumi.Input

	ToUserKeywordArrayOutput() UserKeywordArrayOutput
	ToUserKeywordArrayOutputWithContext(context.Context) UserKeywordArrayOutput
}

type UserKeywordArray []UserKeywordInput

func (UserKeywordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserKeyword)(nil)).Elem()
}

func (i UserKeywordArray) ToUserKeywordArrayOutput() UserKeywordArrayOutput {
	return i.ToUserKeywordArrayOutputWithContext(context.Background())
}

func (i UserKeywordArray) ToUserKeywordArrayOutputWithContext(ctx context.Context) UserKeywordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserKeywordArrayOutput)
}

type UserKeywordOutput struct{ *pulumi.OutputState }

func (UserKeywordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserKeyword)(nil)).Elem()
}

func (o UserKeywordOutput) ToUserKeywordOutput() UserKeywordOutput {
	return o
}

func (o UserKeywordOutput) ToUserKeywordOutputWithContext(ctx context.Context) UserKeywordOutput {
	return o
}

func (o UserKeywordOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserKeyword) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserKeywordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserKeyword) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserKeywordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserKeyword) string { return v.Value }).(pulumi.StringOutput)
}

type UserKeywordArrayOutput struct{ *pulumi.OutputState }

func (UserKeywordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserKeyword)(nil)).Elem()
}

func (o UserKeywordArrayOutput) ToUserKeywordArrayOutput() UserKeywordArrayOutput {
	return o
}

func (o UserKeywordArrayOutput) ToUserKeywordArrayOutputWithContext(ctx context.Context) UserKeywordArrayOutput {
	return o
}

func (o UserKeywordArrayOutput) Index(i pulumi.IntInput) UserKeywordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserKeyword {
		return vs[0].([]UserKeyword)[vs[1].(int)]
	}).(UserKeywordOutput)
}

type UserLanguage struct {
	CustomLanguage *string `pulumi:"customLanguage"`
	LanguageCode   *string `pulumi:"languageCode"`
	Preference     *string `pulumi:"preference"`
}

// UserLanguageInput is an input type that accepts UserLanguageArgs and UserLanguageOutput values.
// You can construct a concrete instance of `UserLanguageInput` via:
//
//          UserLanguageArgs{...}
type UserLanguageInput interface {
	pulumi.Input

	ToUserLanguageOutput() UserLanguageOutput
	ToUserLanguageOutputWithContext(context.Context) UserLanguageOutput
}

type UserLanguageArgs struct {
	CustomLanguage pulumi.StringPtrInput `pulumi:"customLanguage"`
	LanguageCode   pulumi.StringPtrInput `pulumi:"languageCode"`
	Preference     pulumi.StringPtrInput `pulumi:"preference"`
}

func (UserLanguageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLanguage)(nil)).Elem()
}

func (i UserLanguageArgs) ToUserLanguageOutput() UserLanguageOutput {
	return i.ToUserLanguageOutputWithContext(context.Background())
}

func (i UserLanguageArgs) ToUserLanguageOutputWithContext(ctx context.Context) UserLanguageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLanguageOutput)
}

// UserLanguageArrayInput is an input type that accepts UserLanguageArray and UserLanguageArrayOutput values.
// You can construct a concrete instance of `UserLanguageArrayInput` via:
//
//          UserLanguageArray{ UserLanguageArgs{...} }
type UserLanguageArrayInput interface {
	pulumi.Input

	ToUserLanguageArrayOutput() UserLanguageArrayOutput
	ToUserLanguageArrayOutputWithContext(context.Context) UserLanguageArrayOutput
}

type UserLanguageArray []UserLanguageInput

func (UserLanguageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserLanguage)(nil)).Elem()
}

func (i UserLanguageArray) ToUserLanguageArrayOutput() UserLanguageArrayOutput {
	return i.ToUserLanguageArrayOutputWithContext(context.Background())
}

func (i UserLanguageArray) ToUserLanguageArrayOutputWithContext(ctx context.Context) UserLanguageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLanguageArrayOutput)
}

type UserLanguageOutput struct{ *pulumi.OutputState }

func (UserLanguageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLanguage)(nil)).Elem()
}

func (o UserLanguageOutput) ToUserLanguageOutput() UserLanguageOutput {
	return o
}

func (o UserLanguageOutput) ToUserLanguageOutputWithContext(ctx context.Context) UserLanguageOutput {
	return o
}

func (o UserLanguageOutput) CustomLanguage() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLanguage) *string { return v.CustomLanguage }).(pulumi.StringPtrOutput)
}

func (o UserLanguageOutput) LanguageCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLanguage) *string { return v.LanguageCode }).(pulumi.StringPtrOutput)
}

func (o UserLanguageOutput) Preference() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLanguage) *string { return v.Preference }).(pulumi.StringPtrOutput)
}

type UserLanguageArrayOutput struct{ *pulumi.OutputState }

func (UserLanguageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserLanguage)(nil)).Elem()
}

func (o UserLanguageArrayOutput) ToUserLanguageArrayOutput() UserLanguageArrayOutput {
	return o
}

func (o UserLanguageArrayOutput) ToUserLanguageArrayOutputWithContext(ctx context.Context) UserLanguageArrayOutput {
	return o
}

func (o UserLanguageArrayOutput) Index(i pulumi.IntInput) UserLanguageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserLanguage {
		return vs[0].([]UserLanguage)[vs[1].(int)]
	}).(UserLanguageOutput)
}

type UserLocation struct {
	Area         *string `pulumi:"area"`
	BuildingId   *string `pulumi:"buildingId"`
	CustomType   *string `pulumi:"customType"`
	DeskCode     *string `pulumi:"deskCode"`
	FloorName    *string `pulumi:"floorName"`
	FloorSection *string `pulumi:"floorSection"`
	Type         string  `pulumi:"type"`
}

// UserLocationInput is an input type that accepts UserLocationArgs and UserLocationOutput values.
// You can construct a concrete instance of `UserLocationInput` via:
//
//          UserLocationArgs{...}
type UserLocationInput interface {
	pulumi.Input

	ToUserLocationOutput() UserLocationOutput
	ToUserLocationOutputWithContext(context.Context) UserLocationOutput
}

type UserLocationArgs struct {
	Area         pulumi.StringPtrInput `pulumi:"area"`
	BuildingId   pulumi.StringPtrInput `pulumi:"buildingId"`
	CustomType   pulumi.StringPtrInput `pulumi:"customType"`
	DeskCode     pulumi.StringPtrInput `pulumi:"deskCode"`
	FloorName    pulumi.StringPtrInput `pulumi:"floorName"`
	FloorSection pulumi.StringPtrInput `pulumi:"floorSection"`
	Type         pulumi.StringInput    `pulumi:"type"`
}

func (UserLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLocation)(nil)).Elem()
}

func (i UserLocationArgs) ToUserLocationOutput() UserLocationOutput {
	return i.ToUserLocationOutputWithContext(context.Background())
}

func (i UserLocationArgs) ToUserLocationOutputWithContext(ctx context.Context) UserLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLocationOutput)
}

// UserLocationArrayInput is an input type that accepts UserLocationArray and UserLocationArrayOutput values.
// You can construct a concrete instance of `UserLocationArrayInput` via:
//
//          UserLocationArray{ UserLocationArgs{...} }
type UserLocationArrayInput interface {
	pulumi.Input

	ToUserLocationArrayOutput() UserLocationArrayOutput
	ToUserLocationArrayOutputWithContext(context.Context) UserLocationArrayOutput
}

type UserLocationArray []UserLocationInput

func (UserLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserLocation)(nil)).Elem()
}

func (i UserLocationArray) ToUserLocationArrayOutput() UserLocationArrayOutput {
	return i.ToUserLocationArrayOutputWithContext(context.Background())
}

func (i UserLocationArray) ToUserLocationArrayOutputWithContext(ctx context.Context) UserLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserLocationArrayOutput)
}

type UserLocationOutput struct{ *pulumi.OutputState }

func (UserLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserLocation)(nil)).Elem()
}

func (o UserLocationOutput) ToUserLocationOutput() UserLocationOutput {
	return o
}

func (o UserLocationOutput) ToUserLocationOutputWithContext(ctx context.Context) UserLocationOutput {
	return o
}

func (o UserLocationOutput) Area() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLocation) *string { return v.Area }).(pulumi.StringPtrOutput)
}

func (o UserLocationOutput) BuildingId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLocation) *string { return v.BuildingId }).(pulumi.StringPtrOutput)
}

func (o UserLocationOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLocation) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserLocationOutput) DeskCode() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLocation) *string { return v.DeskCode }).(pulumi.StringPtrOutput)
}

func (o UserLocationOutput) FloorName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLocation) *string { return v.FloorName }).(pulumi.StringPtrOutput)
}

func (o UserLocationOutput) FloorSection() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserLocation) *string { return v.FloorSection }).(pulumi.StringPtrOutput)
}

func (o UserLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserLocation) string { return v.Type }).(pulumi.StringOutput)
}

type UserLocationArrayOutput struct{ *pulumi.OutputState }

func (UserLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserLocation)(nil)).Elem()
}

func (o UserLocationArrayOutput) ToUserLocationArrayOutput() UserLocationArrayOutput {
	return o
}

func (o UserLocationArrayOutput) ToUserLocationArrayOutputWithContext(ctx context.Context) UserLocationArrayOutput {
	return o
}

func (o UserLocationArrayOutput) Index(i pulumi.IntInput) UserLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserLocation {
		return vs[0].([]UserLocation)[vs[1].(int)]
	}).(UserLocationOutput)
}

type UserName struct {
	FamilyName string  `pulumi:"familyName"`
	FullName   *string `pulumi:"fullName"`
	GivenName  *string `pulumi:"givenName"`
}

// UserNameInput is an input type that accepts UserNameArgs and UserNameOutput values.
// You can construct a concrete instance of `UserNameInput` via:
//
//          UserNameArgs{...}
type UserNameInput interface {
	pulumi.Input

	ToUserNameOutput() UserNameOutput
	ToUserNameOutputWithContext(context.Context) UserNameOutput
}

type UserNameArgs struct {
	FamilyName pulumi.StringInput    `pulumi:"familyName"`
	FullName   pulumi.StringPtrInput `pulumi:"fullName"`
	GivenName  pulumi.StringPtrInput `pulumi:"givenName"`
}

func (UserNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserName)(nil)).Elem()
}

func (i UserNameArgs) ToUserNameOutput() UserNameOutput {
	return i.ToUserNameOutputWithContext(context.Background())
}

func (i UserNameArgs) ToUserNameOutputWithContext(ctx context.Context) UserNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserNameOutput)
}

func (i UserNameArgs) ToUserNamePtrOutput() UserNamePtrOutput {
	return i.ToUserNamePtrOutputWithContext(context.Background())
}

func (i UserNameArgs) ToUserNamePtrOutputWithContext(ctx context.Context) UserNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserNameOutput).ToUserNamePtrOutputWithContext(ctx)
}

// UserNamePtrInput is an input type that accepts UserNameArgs, UserNamePtr and UserNamePtrOutput values.
// You can construct a concrete instance of `UserNamePtrInput` via:
//
//          UserNameArgs{...}
//
//  or:
//
//          nil
type UserNamePtrInput interface {
	pulumi.Input

	ToUserNamePtrOutput() UserNamePtrOutput
	ToUserNamePtrOutputWithContext(context.Context) UserNamePtrOutput
}

type userNamePtrType UserNameArgs

func UserNamePtr(v *UserNameArgs) UserNamePtrInput {
	return (*userNamePtrType)(v)
}

func (*userNamePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**UserName)(nil)).Elem()
}

func (i *userNamePtrType) ToUserNamePtrOutput() UserNamePtrOutput {
	return i.ToUserNamePtrOutputWithContext(context.Background())
}

func (i *userNamePtrType) ToUserNamePtrOutputWithContext(ctx context.Context) UserNamePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserNamePtrOutput)
}

type UserNameOutput struct{ *pulumi.OutputState }

func (UserNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserName)(nil)).Elem()
}

func (o UserNameOutput) ToUserNameOutput() UserNameOutput {
	return o
}

func (o UserNameOutput) ToUserNameOutputWithContext(ctx context.Context) UserNameOutput {
	return o
}

func (o UserNameOutput) ToUserNamePtrOutput() UserNamePtrOutput {
	return o.ToUserNamePtrOutputWithContext(context.Background())
}

func (o UserNameOutput) ToUserNamePtrOutputWithContext(ctx context.Context) UserNamePtrOutput {
	return o.ApplyTWithContext(ctx, func(_ context.Context, v UserName) *UserName {
		return &v
	}).(UserNamePtrOutput)
}

func (o UserNameOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v UserName) string { return v.FamilyName }).(pulumi.StringOutput)
}

func (o UserNameOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserName) *string { return v.FullName }).(pulumi.StringPtrOutput)
}

func (o UserNameOutput) GivenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserName) *string { return v.GivenName }).(pulumi.StringPtrOutput)
}

type UserNamePtrOutput struct{ *pulumi.OutputState }

func (UserNamePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**UserName)(nil)).Elem()
}

func (o UserNamePtrOutput) ToUserNamePtrOutput() UserNamePtrOutput {
	return o
}

func (o UserNamePtrOutput) ToUserNamePtrOutputWithContext(ctx context.Context) UserNamePtrOutput {
	return o
}

func (o UserNamePtrOutput) Elem() UserNameOutput {
	return o.ApplyT(func(v *UserName) UserName {
		if v != nil {
			return *v
		}
		var ret UserName
		return ret
	}).(UserNameOutput)
}

func (o UserNamePtrOutput) FamilyName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserName) *string {
		if v == nil {
			return nil
		}
		return &v.FamilyName
	}).(pulumi.StringPtrOutput)
}

func (o UserNamePtrOutput) FullName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserName) *string {
		if v == nil {
			return nil
		}
		return v.FullName
	}).(pulumi.StringPtrOutput)
}

func (o UserNamePtrOutput) GivenName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *UserName) *string {
		if v == nil {
			return nil
		}
		return v.GivenName
	}).(pulumi.StringPtrOutput)
}

type UserOrganization struct {
	CostCenter         *string `pulumi:"costCenter"`
	CustomType         *string `pulumi:"customType"`
	Department         *string `pulumi:"department"`
	Description        *string `pulumi:"description"`
	Domain             *string `pulumi:"domain"`
	FullTimeEquivalent *int    `pulumi:"fullTimeEquivalent"`
	Location           *string `pulumi:"location"`
	Name               *string `pulumi:"name"`
	Primary            *bool   `pulumi:"primary"`
	Symbol             *string `pulumi:"symbol"`
	Title              *string `pulumi:"title"`
	Type               string  `pulumi:"type"`
}

// UserOrganizationInput is an input type that accepts UserOrganizationArgs and UserOrganizationOutput values.
// You can construct a concrete instance of `UserOrganizationInput` via:
//
//          UserOrganizationArgs{...}
type UserOrganizationInput interface {
	pulumi.Input

	ToUserOrganizationOutput() UserOrganizationOutput
	ToUserOrganizationOutputWithContext(context.Context) UserOrganizationOutput
}

type UserOrganizationArgs struct {
	CostCenter         pulumi.StringPtrInput `pulumi:"costCenter"`
	CustomType         pulumi.StringPtrInput `pulumi:"customType"`
	Department         pulumi.StringPtrInput `pulumi:"department"`
	Description        pulumi.StringPtrInput `pulumi:"description"`
	Domain             pulumi.StringPtrInput `pulumi:"domain"`
	FullTimeEquivalent pulumi.IntPtrInput    `pulumi:"fullTimeEquivalent"`
	Location           pulumi.StringPtrInput `pulumi:"location"`
	Name               pulumi.StringPtrInput `pulumi:"name"`
	Primary            pulumi.BoolPtrInput   `pulumi:"primary"`
	Symbol             pulumi.StringPtrInput `pulumi:"symbol"`
	Title              pulumi.StringPtrInput `pulumi:"title"`
	Type               pulumi.StringInput    `pulumi:"type"`
}

func (UserOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserOrganization)(nil)).Elem()
}

func (i UserOrganizationArgs) ToUserOrganizationOutput() UserOrganizationOutput {
	return i.ToUserOrganizationOutputWithContext(context.Background())
}

func (i UserOrganizationArgs) ToUserOrganizationOutputWithContext(ctx context.Context) UserOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOrganizationOutput)
}

// UserOrganizationArrayInput is an input type that accepts UserOrganizationArray and UserOrganizationArrayOutput values.
// You can construct a concrete instance of `UserOrganizationArrayInput` via:
//
//          UserOrganizationArray{ UserOrganizationArgs{...} }
type UserOrganizationArrayInput interface {
	pulumi.Input

	ToUserOrganizationArrayOutput() UserOrganizationArrayOutput
	ToUserOrganizationArrayOutputWithContext(context.Context) UserOrganizationArrayOutput
}

type UserOrganizationArray []UserOrganizationInput

func (UserOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserOrganization)(nil)).Elem()
}

func (i UserOrganizationArray) ToUserOrganizationArrayOutput() UserOrganizationArrayOutput {
	return i.ToUserOrganizationArrayOutputWithContext(context.Background())
}

func (i UserOrganizationArray) ToUserOrganizationArrayOutputWithContext(ctx context.Context) UserOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserOrganizationArrayOutput)
}

type UserOrganizationOutput struct{ *pulumi.OutputState }

func (UserOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserOrganization)(nil)).Elem()
}

func (o UserOrganizationOutput) ToUserOrganizationOutput() UserOrganizationOutput {
	return o
}

func (o UserOrganizationOutput) ToUserOrganizationOutputWithContext(ctx context.Context) UserOrganizationOutput {
	return o
}

func (o UserOrganizationOutput) CostCenter() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.CostCenter }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) Department() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.Department }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.Description }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) Domain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.Domain }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) FullTimeEquivalent() pulumi.IntPtrOutput {
	return o.ApplyT(func(v UserOrganization) *int { return v.FullTimeEquivalent }).(pulumi.IntPtrOutput)
}

func (o UserOrganizationOutput) Location() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.Location }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) Name() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.Name }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserOrganization) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

func (o UserOrganizationOutput) Symbol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.Symbol }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) Title() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserOrganization) *string { return v.Title }).(pulumi.StringPtrOutput)
}

func (o UserOrganizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserOrganization) string { return v.Type }).(pulumi.StringOutput)
}

type UserOrganizationArrayOutput struct{ *pulumi.OutputState }

func (UserOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserOrganization)(nil)).Elem()
}

func (o UserOrganizationArrayOutput) ToUserOrganizationArrayOutput() UserOrganizationArrayOutput {
	return o
}

func (o UserOrganizationArrayOutput) ToUserOrganizationArrayOutputWithContext(ctx context.Context) UserOrganizationArrayOutput {
	return o
}

func (o UserOrganizationArrayOutput) Index(i pulumi.IntInput) UserOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserOrganization {
		return vs[0].([]UserOrganization)[vs[1].(int)]
	}).(UserOrganizationOutput)
}

type UserPhone struct {
	CustomType *string `pulumi:"customType"`
	Primary    *bool   `pulumi:"primary"`
	Type       string  `pulumi:"type"`
	Value      string  `pulumi:"value"`
}

// UserPhoneInput is an input type that accepts UserPhoneArgs and UserPhoneOutput values.
// You can construct a concrete instance of `UserPhoneInput` via:
//
//          UserPhoneArgs{...}
type UserPhoneInput interface {
	pulumi.Input

	ToUserPhoneOutput() UserPhoneOutput
	ToUserPhoneOutputWithContext(context.Context) UserPhoneOutput
}

type UserPhoneArgs struct {
	CustomType pulumi.StringPtrInput `pulumi:"customType"`
	Primary    pulumi.BoolPtrInput   `pulumi:"primary"`
	Type       pulumi.StringInput    `pulumi:"type"`
	Value      pulumi.StringInput    `pulumi:"value"`
}

func (UserPhoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPhone)(nil)).Elem()
}

func (i UserPhoneArgs) ToUserPhoneOutput() UserPhoneOutput {
	return i.ToUserPhoneOutputWithContext(context.Background())
}

func (i UserPhoneArgs) ToUserPhoneOutputWithContext(ctx context.Context) UserPhoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPhoneOutput)
}

// UserPhoneArrayInput is an input type that accepts UserPhoneArray and UserPhoneArrayOutput values.
// You can construct a concrete instance of `UserPhoneArrayInput` via:
//
//          UserPhoneArray{ UserPhoneArgs{...} }
type UserPhoneArrayInput interface {
	pulumi.Input

	ToUserPhoneArrayOutput() UserPhoneArrayOutput
	ToUserPhoneArrayOutputWithContext(context.Context) UserPhoneArrayOutput
}

type UserPhoneArray []UserPhoneInput

func (UserPhoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPhone)(nil)).Elem()
}

func (i UserPhoneArray) ToUserPhoneArrayOutput() UserPhoneArrayOutput {
	return i.ToUserPhoneArrayOutputWithContext(context.Background())
}

func (i UserPhoneArray) ToUserPhoneArrayOutputWithContext(ctx context.Context) UserPhoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPhoneArrayOutput)
}

type UserPhoneOutput struct{ *pulumi.OutputState }

func (UserPhoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPhone)(nil)).Elem()
}

func (o UserPhoneOutput) ToUserPhoneOutput() UserPhoneOutput {
	return o
}

func (o UserPhoneOutput) ToUserPhoneOutputWithContext(ctx context.Context) UserPhoneOutput {
	return o
}

func (o UserPhoneOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPhone) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserPhoneOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserPhone) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

func (o UserPhoneOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserPhone) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserPhoneOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserPhone) string { return v.Value }).(pulumi.StringOutput)
}

type UserPhoneArrayOutput struct{ *pulumi.OutputState }

func (UserPhoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPhone)(nil)).Elem()
}

func (o UserPhoneArrayOutput) ToUserPhoneArrayOutput() UserPhoneArrayOutput {
	return o
}

func (o UserPhoneArrayOutput) ToUserPhoneArrayOutputWithContext(ctx context.Context) UserPhoneArrayOutput {
	return o
}

func (o UserPhoneArrayOutput) Index(i pulumi.IntInput) UserPhoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPhone {
		return vs[0].([]UserPhone)[vs[1].(int)]
	}).(UserPhoneOutput)
}

type UserPosixAccount struct {
	AccountId           *string `pulumi:"accountId"`
	Gecos               *string `pulumi:"gecos"`
	Gid                 *string `pulumi:"gid"`
	HomeDirectory       *string `pulumi:"homeDirectory"`
	OperatingSystemType *string `pulumi:"operatingSystemType"`
	Primary             *bool   `pulumi:"primary"`
	Shell               *string `pulumi:"shell"`
	SystemId            *string `pulumi:"systemId"`
	Uid                 *string `pulumi:"uid"`
	Username            *string `pulumi:"username"`
}

// UserPosixAccountInput is an input type that accepts UserPosixAccountArgs and UserPosixAccountOutput values.
// You can construct a concrete instance of `UserPosixAccountInput` via:
//
//          UserPosixAccountArgs{...}
type UserPosixAccountInput interface {
	pulumi.Input

	ToUserPosixAccountOutput() UserPosixAccountOutput
	ToUserPosixAccountOutputWithContext(context.Context) UserPosixAccountOutput
}

type UserPosixAccountArgs struct {
	AccountId           pulumi.StringPtrInput `pulumi:"accountId"`
	Gecos               pulumi.StringPtrInput `pulumi:"gecos"`
	Gid                 pulumi.StringPtrInput `pulumi:"gid"`
	HomeDirectory       pulumi.StringPtrInput `pulumi:"homeDirectory"`
	OperatingSystemType pulumi.StringPtrInput `pulumi:"operatingSystemType"`
	Primary             pulumi.BoolPtrInput   `pulumi:"primary"`
	Shell               pulumi.StringPtrInput `pulumi:"shell"`
	SystemId            pulumi.StringPtrInput `pulumi:"systemId"`
	Uid                 pulumi.StringPtrInput `pulumi:"uid"`
	Username            pulumi.StringPtrInput `pulumi:"username"`
}

func (UserPosixAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPosixAccount)(nil)).Elem()
}

func (i UserPosixAccountArgs) ToUserPosixAccountOutput() UserPosixAccountOutput {
	return i.ToUserPosixAccountOutputWithContext(context.Background())
}

func (i UserPosixAccountArgs) ToUserPosixAccountOutputWithContext(ctx context.Context) UserPosixAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPosixAccountOutput)
}

// UserPosixAccountArrayInput is an input type that accepts UserPosixAccountArray and UserPosixAccountArrayOutput values.
// You can construct a concrete instance of `UserPosixAccountArrayInput` via:
//
//          UserPosixAccountArray{ UserPosixAccountArgs{...} }
type UserPosixAccountArrayInput interface {
	pulumi.Input

	ToUserPosixAccountArrayOutput() UserPosixAccountArrayOutput
	ToUserPosixAccountArrayOutputWithContext(context.Context) UserPosixAccountArrayOutput
}

type UserPosixAccountArray []UserPosixAccountInput

func (UserPosixAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPosixAccount)(nil)).Elem()
}

func (i UserPosixAccountArray) ToUserPosixAccountArrayOutput() UserPosixAccountArrayOutput {
	return i.ToUserPosixAccountArrayOutputWithContext(context.Background())
}

func (i UserPosixAccountArray) ToUserPosixAccountArrayOutputWithContext(ctx context.Context) UserPosixAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserPosixAccountArrayOutput)
}

type UserPosixAccountOutput struct{ *pulumi.OutputState }

func (UserPosixAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserPosixAccount)(nil)).Elem()
}

func (o UserPosixAccountOutput) ToUserPosixAccountOutput() UserPosixAccountOutput {
	return o
}

func (o UserPosixAccountOutput) ToUserPosixAccountOutputWithContext(ctx context.Context) UserPosixAccountOutput {
	return o
}

func (o UserPosixAccountOutput) AccountId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.AccountId }).(pulumi.StringPtrOutput)
}

func (o UserPosixAccountOutput) Gecos() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.Gecos }).(pulumi.StringPtrOutput)
}

func (o UserPosixAccountOutput) Gid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.Gid }).(pulumi.StringPtrOutput)
}

func (o UserPosixAccountOutput) HomeDirectory() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.HomeDirectory }).(pulumi.StringPtrOutput)
}

func (o UserPosixAccountOutput) OperatingSystemType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.OperatingSystemType }).(pulumi.StringPtrOutput)
}

func (o UserPosixAccountOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

func (o UserPosixAccountOutput) Shell() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.Shell }).(pulumi.StringPtrOutput)
}

func (o UserPosixAccountOutput) SystemId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.SystemId }).(pulumi.StringPtrOutput)
}

func (o UserPosixAccountOutput) Uid() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.Uid }).(pulumi.StringPtrOutput)
}

func (o UserPosixAccountOutput) Username() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserPosixAccount) *string { return v.Username }).(pulumi.StringPtrOutput)
}

type UserPosixAccountArrayOutput struct{ *pulumi.OutputState }

func (UserPosixAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserPosixAccount)(nil)).Elem()
}

func (o UserPosixAccountArrayOutput) ToUserPosixAccountArrayOutput() UserPosixAccountArrayOutput {
	return o
}

func (o UserPosixAccountArrayOutput) ToUserPosixAccountArrayOutputWithContext(ctx context.Context) UserPosixAccountArrayOutput {
	return o
}

func (o UserPosixAccountArrayOutput) Index(i pulumi.IntInput) UserPosixAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserPosixAccount {
		return vs[0].([]UserPosixAccount)[vs[1].(int)]
	}).(UserPosixAccountOutput)
}

type UserRelation struct {
	CustomType *string `pulumi:"customType"`
	Type       string  `pulumi:"type"`
	Value      string  `pulumi:"value"`
}

// UserRelationInput is an input type that accepts UserRelationArgs and UserRelationOutput values.
// You can construct a concrete instance of `UserRelationInput` via:
//
//          UserRelationArgs{...}
type UserRelationInput interface {
	pulumi.Input

	ToUserRelationOutput() UserRelationOutput
	ToUserRelationOutputWithContext(context.Context) UserRelationOutput
}

type UserRelationArgs struct {
	CustomType pulumi.StringPtrInput `pulumi:"customType"`
	Type       pulumi.StringInput    `pulumi:"type"`
	Value      pulumi.StringInput    `pulumi:"value"`
}

func (UserRelationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserRelation)(nil)).Elem()
}

func (i UserRelationArgs) ToUserRelationOutput() UserRelationOutput {
	return i.ToUserRelationOutputWithContext(context.Background())
}

func (i UserRelationArgs) ToUserRelationOutputWithContext(ctx context.Context) UserRelationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRelationOutput)
}

// UserRelationArrayInput is an input type that accepts UserRelationArray and UserRelationArrayOutput values.
// You can construct a concrete instance of `UserRelationArrayInput` via:
//
//          UserRelationArray{ UserRelationArgs{...} }
type UserRelationArrayInput interface {
	pulumi.Input

	ToUserRelationArrayOutput() UserRelationArrayOutput
	ToUserRelationArrayOutputWithContext(context.Context) UserRelationArrayOutput
}

type UserRelationArray []UserRelationInput

func (UserRelationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserRelation)(nil)).Elem()
}

func (i UserRelationArray) ToUserRelationArrayOutput() UserRelationArrayOutput {
	return i.ToUserRelationArrayOutputWithContext(context.Background())
}

func (i UserRelationArray) ToUserRelationArrayOutputWithContext(ctx context.Context) UserRelationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserRelationArrayOutput)
}

type UserRelationOutput struct{ *pulumi.OutputState }

func (UserRelationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserRelation)(nil)).Elem()
}

func (o UserRelationOutput) ToUserRelationOutput() UserRelationOutput {
	return o
}

func (o UserRelationOutput) ToUserRelationOutputWithContext(ctx context.Context) UserRelationOutput {
	return o
}

func (o UserRelationOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserRelation) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserRelationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserRelation) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserRelationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserRelation) string { return v.Value }).(pulumi.StringOutput)
}

type UserRelationArrayOutput struct{ *pulumi.OutputState }

func (UserRelationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserRelation)(nil)).Elem()
}

func (o UserRelationArrayOutput) ToUserRelationArrayOutput() UserRelationArrayOutput {
	return o
}

func (o UserRelationArrayOutput) ToUserRelationArrayOutputWithContext(ctx context.Context) UserRelationArrayOutput {
	return o
}

func (o UserRelationArrayOutput) Index(i pulumi.IntInput) UserRelationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserRelation {
		return vs[0].([]UserRelation)[vs[1].(int)]
	}).(UserRelationOutput)
}

type UserSshPublicKey struct {
	ExpirationTimeUsec *string `pulumi:"expirationTimeUsec"`
	Fingerprint        *string `pulumi:"fingerprint"`
	Key                string  `pulumi:"key"`
}

// UserSshPublicKeyInput is an input type that accepts UserSshPublicKeyArgs and UserSshPublicKeyOutput values.
// You can construct a concrete instance of `UserSshPublicKeyInput` via:
//
//          UserSshPublicKeyArgs{...}
type UserSshPublicKeyInput interface {
	pulumi.Input

	ToUserSshPublicKeyOutput() UserSshPublicKeyOutput
	ToUserSshPublicKeyOutputWithContext(context.Context) UserSshPublicKeyOutput
}

type UserSshPublicKeyArgs struct {
	ExpirationTimeUsec pulumi.StringPtrInput `pulumi:"expirationTimeUsec"`
	Fingerprint        pulumi.StringPtrInput `pulumi:"fingerprint"`
	Key                pulumi.StringInput    `pulumi:"key"`
}

func (UserSshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSshPublicKey)(nil)).Elem()
}

func (i UserSshPublicKeyArgs) ToUserSshPublicKeyOutput() UserSshPublicKeyOutput {
	return i.ToUserSshPublicKeyOutputWithContext(context.Background())
}

func (i UserSshPublicKeyArgs) ToUserSshPublicKeyOutputWithContext(ctx context.Context) UserSshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSshPublicKeyOutput)
}

// UserSshPublicKeyArrayInput is an input type that accepts UserSshPublicKeyArray and UserSshPublicKeyArrayOutput values.
// You can construct a concrete instance of `UserSshPublicKeyArrayInput` via:
//
//          UserSshPublicKeyArray{ UserSshPublicKeyArgs{...} }
type UserSshPublicKeyArrayInput interface {
	pulumi.Input

	ToUserSshPublicKeyArrayOutput() UserSshPublicKeyArrayOutput
	ToUserSshPublicKeyArrayOutputWithContext(context.Context) UserSshPublicKeyArrayOutput
}

type UserSshPublicKeyArray []UserSshPublicKeyInput

func (UserSshPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSshPublicKey)(nil)).Elem()
}

func (i UserSshPublicKeyArray) ToUserSshPublicKeyArrayOutput() UserSshPublicKeyArrayOutput {
	return i.ToUserSshPublicKeyArrayOutputWithContext(context.Background())
}

func (i UserSshPublicKeyArray) ToUserSshPublicKeyArrayOutputWithContext(ctx context.Context) UserSshPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserSshPublicKeyArrayOutput)
}

type UserSshPublicKeyOutput struct{ *pulumi.OutputState }

func (UserSshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserSshPublicKey)(nil)).Elem()
}

func (o UserSshPublicKeyOutput) ToUserSshPublicKeyOutput() UserSshPublicKeyOutput {
	return o
}

func (o UserSshPublicKeyOutput) ToUserSshPublicKeyOutputWithContext(ctx context.Context) UserSshPublicKeyOutput {
	return o
}

func (o UserSshPublicKeyOutput) ExpirationTimeUsec() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSshPublicKey) *string { return v.ExpirationTimeUsec }).(pulumi.StringPtrOutput)
}

func (o UserSshPublicKeyOutput) Fingerprint() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserSshPublicKey) *string { return v.Fingerprint }).(pulumi.StringPtrOutput)
}

func (o UserSshPublicKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v UserSshPublicKey) string { return v.Key }).(pulumi.StringOutput)
}

type UserSshPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (UserSshPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserSshPublicKey)(nil)).Elem()
}

func (o UserSshPublicKeyArrayOutput) ToUserSshPublicKeyArrayOutput() UserSshPublicKeyArrayOutput {
	return o
}

func (o UserSshPublicKeyArrayOutput) ToUserSshPublicKeyArrayOutputWithContext(ctx context.Context) UserSshPublicKeyArrayOutput {
	return o
}

func (o UserSshPublicKeyArrayOutput) Index(i pulumi.IntInput) UserSshPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserSshPublicKey {
		return vs[0].([]UserSshPublicKey)[vs[1].(int)]
	}).(UserSshPublicKeyOutput)
}

type UserWebsite struct {
	CustomType *string `pulumi:"customType"`
	Primary    *bool   `pulumi:"primary"`
	Type       string  `pulumi:"type"`
	Value      string  `pulumi:"value"`
}

// UserWebsiteInput is an input type that accepts UserWebsiteArgs and UserWebsiteOutput values.
// You can construct a concrete instance of `UserWebsiteInput` via:
//
//          UserWebsiteArgs{...}
type UserWebsiteInput interface {
	pulumi.Input

	ToUserWebsiteOutput() UserWebsiteOutput
	ToUserWebsiteOutputWithContext(context.Context) UserWebsiteOutput
}

type UserWebsiteArgs struct {
	CustomType pulumi.StringPtrInput `pulumi:"customType"`
	Primary    pulumi.BoolPtrInput   `pulumi:"primary"`
	Type       pulumi.StringInput    `pulumi:"type"`
	Value      pulumi.StringInput    `pulumi:"value"`
}

func (UserWebsiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*UserWebsite)(nil)).Elem()
}

func (i UserWebsiteArgs) ToUserWebsiteOutput() UserWebsiteOutput {
	return i.ToUserWebsiteOutputWithContext(context.Background())
}

func (i UserWebsiteArgs) ToUserWebsiteOutputWithContext(ctx context.Context) UserWebsiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWebsiteOutput)
}

// UserWebsiteArrayInput is an input type that accepts UserWebsiteArray and UserWebsiteArrayOutput values.
// You can construct a concrete instance of `UserWebsiteArrayInput` via:
//
//          UserWebsiteArray{ UserWebsiteArgs{...} }
type UserWebsiteArrayInput interface {
	pulumi.Input

	ToUserWebsiteArrayOutput() UserWebsiteArrayOutput
	ToUserWebsiteArrayOutputWithContext(context.Context) UserWebsiteArrayOutput
}

type UserWebsiteArray []UserWebsiteInput

func (UserWebsiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserWebsite)(nil)).Elem()
}

func (i UserWebsiteArray) ToUserWebsiteArrayOutput() UserWebsiteArrayOutput {
	return i.ToUserWebsiteArrayOutputWithContext(context.Background())
}

func (i UserWebsiteArray) ToUserWebsiteArrayOutputWithContext(ctx context.Context) UserWebsiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(UserWebsiteArrayOutput)
}

type UserWebsiteOutput struct{ *pulumi.OutputState }

func (UserWebsiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*UserWebsite)(nil)).Elem()
}

func (o UserWebsiteOutput) ToUserWebsiteOutput() UserWebsiteOutput {
	return o
}

func (o UserWebsiteOutput) ToUserWebsiteOutputWithContext(ctx context.Context) UserWebsiteOutput {
	return o
}

func (o UserWebsiteOutput) CustomType() pulumi.StringPtrOutput {
	return o.ApplyT(func(v UserWebsite) *string { return v.CustomType }).(pulumi.StringPtrOutput)
}

func (o UserWebsiteOutput) Primary() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v UserWebsite) *bool { return v.Primary }).(pulumi.BoolPtrOutput)
}

func (o UserWebsiteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v UserWebsite) string { return v.Type }).(pulumi.StringOutput)
}

func (o UserWebsiteOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v UserWebsite) string { return v.Value }).(pulumi.StringOutput)
}

type UserWebsiteArrayOutput struct{ *pulumi.OutputState }

func (UserWebsiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]UserWebsite)(nil)).Elem()
}

func (o UserWebsiteArrayOutput) ToUserWebsiteArrayOutput() UserWebsiteArrayOutput {
	return o
}

func (o UserWebsiteArrayOutput) ToUserWebsiteArrayOutputWithContext(ctx context.Context) UserWebsiteArrayOutput {
	return o
}

func (o UserWebsiteArrayOutput) Index(i pulumi.IntInput) UserWebsiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) UserWebsite {
		return vs[0].([]UserWebsite)[vs[1].(int)]
	}).(UserWebsiteOutput)
}

type GetChromePolicySchemaAdditionalTargetKeyName struct {
	Key            string `pulumi:"key"`
	KeyDescription string `pulumi:"keyDescription"`
}

// GetChromePolicySchemaAdditionalTargetKeyNameInput is an input type that accepts GetChromePolicySchemaAdditionalTargetKeyNameArgs and GetChromePolicySchemaAdditionalTargetKeyNameOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaAdditionalTargetKeyNameInput` via:
//
//          GetChromePolicySchemaAdditionalTargetKeyNameArgs{...}
type GetChromePolicySchemaAdditionalTargetKeyNameInput interface {
	pulumi.Input

	ToGetChromePolicySchemaAdditionalTargetKeyNameOutput() GetChromePolicySchemaAdditionalTargetKeyNameOutput
	ToGetChromePolicySchemaAdditionalTargetKeyNameOutputWithContext(context.Context) GetChromePolicySchemaAdditionalTargetKeyNameOutput
}

type GetChromePolicySchemaAdditionalTargetKeyNameArgs struct {
	Key            pulumi.StringInput `pulumi:"key"`
	KeyDescription pulumi.StringInput `pulumi:"keyDescription"`
}

func (GetChromePolicySchemaAdditionalTargetKeyNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaAdditionalTargetKeyName)(nil)).Elem()
}

func (i GetChromePolicySchemaAdditionalTargetKeyNameArgs) ToGetChromePolicySchemaAdditionalTargetKeyNameOutput() GetChromePolicySchemaAdditionalTargetKeyNameOutput {
	return i.ToGetChromePolicySchemaAdditionalTargetKeyNameOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaAdditionalTargetKeyNameArgs) ToGetChromePolicySchemaAdditionalTargetKeyNameOutputWithContext(ctx context.Context) GetChromePolicySchemaAdditionalTargetKeyNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaAdditionalTargetKeyNameOutput)
}

// GetChromePolicySchemaAdditionalTargetKeyNameArrayInput is an input type that accepts GetChromePolicySchemaAdditionalTargetKeyNameArray and GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaAdditionalTargetKeyNameArrayInput` via:
//
//          GetChromePolicySchemaAdditionalTargetKeyNameArray{ GetChromePolicySchemaAdditionalTargetKeyNameArgs{...} }
type GetChromePolicySchemaAdditionalTargetKeyNameArrayInput interface {
	pulumi.Input

	ToGetChromePolicySchemaAdditionalTargetKeyNameArrayOutput() GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput
	ToGetChromePolicySchemaAdditionalTargetKeyNameArrayOutputWithContext(context.Context) GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput
}

type GetChromePolicySchemaAdditionalTargetKeyNameArray []GetChromePolicySchemaAdditionalTargetKeyNameInput

func (GetChromePolicySchemaAdditionalTargetKeyNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaAdditionalTargetKeyName)(nil)).Elem()
}

func (i GetChromePolicySchemaAdditionalTargetKeyNameArray) ToGetChromePolicySchemaAdditionalTargetKeyNameArrayOutput() GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput {
	return i.ToGetChromePolicySchemaAdditionalTargetKeyNameArrayOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaAdditionalTargetKeyNameArray) ToGetChromePolicySchemaAdditionalTargetKeyNameArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput)
}

type GetChromePolicySchemaAdditionalTargetKeyNameOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaAdditionalTargetKeyNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaAdditionalTargetKeyName)(nil)).Elem()
}

func (o GetChromePolicySchemaAdditionalTargetKeyNameOutput) ToGetChromePolicySchemaAdditionalTargetKeyNameOutput() GetChromePolicySchemaAdditionalTargetKeyNameOutput {
	return o
}

func (o GetChromePolicySchemaAdditionalTargetKeyNameOutput) ToGetChromePolicySchemaAdditionalTargetKeyNameOutputWithContext(ctx context.Context) GetChromePolicySchemaAdditionalTargetKeyNameOutput {
	return o
}

func (o GetChromePolicySchemaAdditionalTargetKeyNameOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaAdditionalTargetKeyName) string { return v.Key }).(pulumi.StringOutput)
}

func (o GetChromePolicySchemaAdditionalTargetKeyNameOutput) KeyDescription() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaAdditionalTargetKeyName) string { return v.KeyDescription }).(pulumi.StringOutput)
}

type GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaAdditionalTargetKeyName)(nil)).Elem()
}

func (o GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput) ToGetChromePolicySchemaAdditionalTargetKeyNameArrayOutput() GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput {
	return o
}

func (o GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput) ToGetChromePolicySchemaAdditionalTargetKeyNameArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput {
	return o
}

func (o GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput) Index(i pulumi.IntInput) GetChromePolicySchemaAdditionalTargetKeyNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChromePolicySchemaAdditionalTargetKeyName {
		return vs[0].([]GetChromePolicySchemaAdditionalTargetKeyName)[vs[1].(int)]
	}).(GetChromePolicySchemaAdditionalTargetKeyNameOutput)
}

type GetChromePolicySchemaDefinition struct {
	EnumTypes   []GetChromePolicySchemaDefinitionEnumType `pulumi:"enumTypes"`
	MessageType string                                    `pulumi:"messageType"`
	Name        string                                    `pulumi:"name"`
	Package     string                                    `pulumi:"package"`
	Syntax      string                                    `pulumi:"syntax"`
}

// GetChromePolicySchemaDefinitionInput is an input type that accepts GetChromePolicySchemaDefinitionArgs and GetChromePolicySchemaDefinitionOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaDefinitionInput` via:
//
//          GetChromePolicySchemaDefinitionArgs{...}
type GetChromePolicySchemaDefinitionInput interface {
	pulumi.Input

	ToGetChromePolicySchemaDefinitionOutput() GetChromePolicySchemaDefinitionOutput
	ToGetChromePolicySchemaDefinitionOutputWithContext(context.Context) GetChromePolicySchemaDefinitionOutput
}

type GetChromePolicySchemaDefinitionArgs struct {
	EnumTypes   GetChromePolicySchemaDefinitionEnumTypeArrayInput `pulumi:"enumTypes"`
	MessageType pulumi.StringInput                                `pulumi:"messageType"`
	Name        pulumi.StringInput                                `pulumi:"name"`
	Package     pulumi.StringInput                                `pulumi:"package"`
	Syntax      pulumi.StringInput                                `pulumi:"syntax"`
}

func (GetChromePolicySchemaDefinitionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaDefinition)(nil)).Elem()
}

func (i GetChromePolicySchemaDefinitionArgs) ToGetChromePolicySchemaDefinitionOutput() GetChromePolicySchemaDefinitionOutput {
	return i.ToGetChromePolicySchemaDefinitionOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaDefinitionArgs) ToGetChromePolicySchemaDefinitionOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaDefinitionOutput)
}

// GetChromePolicySchemaDefinitionArrayInput is an input type that accepts GetChromePolicySchemaDefinitionArray and GetChromePolicySchemaDefinitionArrayOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaDefinitionArrayInput` via:
//
//          GetChromePolicySchemaDefinitionArray{ GetChromePolicySchemaDefinitionArgs{...} }
type GetChromePolicySchemaDefinitionArrayInput interface {
	pulumi.Input

	ToGetChromePolicySchemaDefinitionArrayOutput() GetChromePolicySchemaDefinitionArrayOutput
	ToGetChromePolicySchemaDefinitionArrayOutputWithContext(context.Context) GetChromePolicySchemaDefinitionArrayOutput
}

type GetChromePolicySchemaDefinitionArray []GetChromePolicySchemaDefinitionInput

func (GetChromePolicySchemaDefinitionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaDefinition)(nil)).Elem()
}

func (i GetChromePolicySchemaDefinitionArray) ToGetChromePolicySchemaDefinitionArrayOutput() GetChromePolicySchemaDefinitionArrayOutput {
	return i.ToGetChromePolicySchemaDefinitionArrayOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaDefinitionArray) ToGetChromePolicySchemaDefinitionArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaDefinitionArrayOutput)
}

type GetChromePolicySchemaDefinitionOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaDefinitionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaDefinition)(nil)).Elem()
}

func (o GetChromePolicySchemaDefinitionOutput) ToGetChromePolicySchemaDefinitionOutput() GetChromePolicySchemaDefinitionOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionOutput) ToGetChromePolicySchemaDefinitionOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionOutput) EnumTypes() GetChromePolicySchemaDefinitionEnumTypeArrayOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinition) []GetChromePolicySchemaDefinitionEnumType { return v.EnumTypes }).(GetChromePolicySchemaDefinitionEnumTypeArrayOutput)
}

func (o GetChromePolicySchemaDefinitionOutput) MessageType() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinition) string { return v.MessageType }).(pulumi.StringOutput)
}

func (o GetChromePolicySchemaDefinitionOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinition) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetChromePolicySchemaDefinitionOutput) Package() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinition) string { return v.Package }).(pulumi.StringOutput)
}

func (o GetChromePolicySchemaDefinitionOutput) Syntax() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinition) string { return v.Syntax }).(pulumi.StringOutput)
}

type GetChromePolicySchemaDefinitionArrayOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaDefinitionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaDefinition)(nil)).Elem()
}

func (o GetChromePolicySchemaDefinitionArrayOutput) ToGetChromePolicySchemaDefinitionArrayOutput() GetChromePolicySchemaDefinitionArrayOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionArrayOutput) ToGetChromePolicySchemaDefinitionArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionArrayOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionArrayOutput) Index(i pulumi.IntInput) GetChromePolicySchemaDefinitionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChromePolicySchemaDefinition {
		return vs[0].([]GetChromePolicySchemaDefinition)[vs[1].(int)]
	}).(GetChromePolicySchemaDefinitionOutput)
}

type GetChromePolicySchemaDefinitionEnumType struct {
	Name   string                                         `pulumi:"name"`
	Values []GetChromePolicySchemaDefinitionEnumTypeValue `pulumi:"values"`
}

// GetChromePolicySchemaDefinitionEnumTypeInput is an input type that accepts GetChromePolicySchemaDefinitionEnumTypeArgs and GetChromePolicySchemaDefinitionEnumTypeOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaDefinitionEnumTypeInput` via:
//
//          GetChromePolicySchemaDefinitionEnumTypeArgs{...}
type GetChromePolicySchemaDefinitionEnumTypeInput interface {
	pulumi.Input

	ToGetChromePolicySchemaDefinitionEnumTypeOutput() GetChromePolicySchemaDefinitionEnumTypeOutput
	ToGetChromePolicySchemaDefinitionEnumTypeOutputWithContext(context.Context) GetChromePolicySchemaDefinitionEnumTypeOutput
}

type GetChromePolicySchemaDefinitionEnumTypeArgs struct {
	Name   pulumi.StringInput                                     `pulumi:"name"`
	Values GetChromePolicySchemaDefinitionEnumTypeValueArrayInput `pulumi:"values"`
}

func (GetChromePolicySchemaDefinitionEnumTypeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaDefinitionEnumType)(nil)).Elem()
}

func (i GetChromePolicySchemaDefinitionEnumTypeArgs) ToGetChromePolicySchemaDefinitionEnumTypeOutput() GetChromePolicySchemaDefinitionEnumTypeOutput {
	return i.ToGetChromePolicySchemaDefinitionEnumTypeOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaDefinitionEnumTypeArgs) ToGetChromePolicySchemaDefinitionEnumTypeOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionEnumTypeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaDefinitionEnumTypeOutput)
}

// GetChromePolicySchemaDefinitionEnumTypeArrayInput is an input type that accepts GetChromePolicySchemaDefinitionEnumTypeArray and GetChromePolicySchemaDefinitionEnumTypeArrayOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaDefinitionEnumTypeArrayInput` via:
//
//          GetChromePolicySchemaDefinitionEnumTypeArray{ GetChromePolicySchemaDefinitionEnumTypeArgs{...} }
type GetChromePolicySchemaDefinitionEnumTypeArrayInput interface {
	pulumi.Input

	ToGetChromePolicySchemaDefinitionEnumTypeArrayOutput() GetChromePolicySchemaDefinitionEnumTypeArrayOutput
	ToGetChromePolicySchemaDefinitionEnumTypeArrayOutputWithContext(context.Context) GetChromePolicySchemaDefinitionEnumTypeArrayOutput
}

type GetChromePolicySchemaDefinitionEnumTypeArray []GetChromePolicySchemaDefinitionEnumTypeInput

func (GetChromePolicySchemaDefinitionEnumTypeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaDefinitionEnumType)(nil)).Elem()
}

func (i GetChromePolicySchemaDefinitionEnumTypeArray) ToGetChromePolicySchemaDefinitionEnumTypeArrayOutput() GetChromePolicySchemaDefinitionEnumTypeArrayOutput {
	return i.ToGetChromePolicySchemaDefinitionEnumTypeArrayOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaDefinitionEnumTypeArray) ToGetChromePolicySchemaDefinitionEnumTypeArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionEnumTypeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaDefinitionEnumTypeArrayOutput)
}

type GetChromePolicySchemaDefinitionEnumTypeOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaDefinitionEnumTypeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaDefinitionEnumType)(nil)).Elem()
}

func (o GetChromePolicySchemaDefinitionEnumTypeOutput) ToGetChromePolicySchemaDefinitionEnumTypeOutput() GetChromePolicySchemaDefinitionEnumTypeOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionEnumTypeOutput) ToGetChromePolicySchemaDefinitionEnumTypeOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionEnumTypeOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionEnumTypeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinitionEnumType) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetChromePolicySchemaDefinitionEnumTypeOutput) Values() GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinitionEnumType) []GetChromePolicySchemaDefinitionEnumTypeValue {
		return v.Values
	}).(GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput)
}

type GetChromePolicySchemaDefinitionEnumTypeArrayOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaDefinitionEnumTypeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaDefinitionEnumType)(nil)).Elem()
}

func (o GetChromePolicySchemaDefinitionEnumTypeArrayOutput) ToGetChromePolicySchemaDefinitionEnumTypeArrayOutput() GetChromePolicySchemaDefinitionEnumTypeArrayOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionEnumTypeArrayOutput) ToGetChromePolicySchemaDefinitionEnumTypeArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionEnumTypeArrayOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionEnumTypeArrayOutput) Index(i pulumi.IntInput) GetChromePolicySchemaDefinitionEnumTypeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChromePolicySchemaDefinitionEnumType {
		return vs[0].([]GetChromePolicySchemaDefinitionEnumType)[vs[1].(int)]
	}).(GetChromePolicySchemaDefinitionEnumTypeOutput)
}

type GetChromePolicySchemaDefinitionEnumTypeValue struct {
	Name   string `pulumi:"name"`
	Number int    `pulumi:"number"`
}

// GetChromePolicySchemaDefinitionEnumTypeValueInput is an input type that accepts GetChromePolicySchemaDefinitionEnumTypeValueArgs and GetChromePolicySchemaDefinitionEnumTypeValueOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaDefinitionEnumTypeValueInput` via:
//
//          GetChromePolicySchemaDefinitionEnumTypeValueArgs{...}
type GetChromePolicySchemaDefinitionEnumTypeValueInput interface {
	pulumi.Input

	ToGetChromePolicySchemaDefinitionEnumTypeValueOutput() GetChromePolicySchemaDefinitionEnumTypeValueOutput
	ToGetChromePolicySchemaDefinitionEnumTypeValueOutputWithContext(context.Context) GetChromePolicySchemaDefinitionEnumTypeValueOutput
}

type GetChromePolicySchemaDefinitionEnumTypeValueArgs struct {
	Name   pulumi.StringInput `pulumi:"name"`
	Number pulumi.IntInput    `pulumi:"number"`
}

func (GetChromePolicySchemaDefinitionEnumTypeValueArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaDefinitionEnumTypeValue)(nil)).Elem()
}

func (i GetChromePolicySchemaDefinitionEnumTypeValueArgs) ToGetChromePolicySchemaDefinitionEnumTypeValueOutput() GetChromePolicySchemaDefinitionEnumTypeValueOutput {
	return i.ToGetChromePolicySchemaDefinitionEnumTypeValueOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaDefinitionEnumTypeValueArgs) ToGetChromePolicySchemaDefinitionEnumTypeValueOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionEnumTypeValueOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaDefinitionEnumTypeValueOutput)
}

// GetChromePolicySchemaDefinitionEnumTypeValueArrayInput is an input type that accepts GetChromePolicySchemaDefinitionEnumTypeValueArray and GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaDefinitionEnumTypeValueArrayInput` via:
//
//          GetChromePolicySchemaDefinitionEnumTypeValueArray{ GetChromePolicySchemaDefinitionEnumTypeValueArgs{...} }
type GetChromePolicySchemaDefinitionEnumTypeValueArrayInput interface {
	pulumi.Input

	ToGetChromePolicySchemaDefinitionEnumTypeValueArrayOutput() GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput
	ToGetChromePolicySchemaDefinitionEnumTypeValueArrayOutputWithContext(context.Context) GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput
}

type GetChromePolicySchemaDefinitionEnumTypeValueArray []GetChromePolicySchemaDefinitionEnumTypeValueInput

func (GetChromePolicySchemaDefinitionEnumTypeValueArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaDefinitionEnumTypeValue)(nil)).Elem()
}

func (i GetChromePolicySchemaDefinitionEnumTypeValueArray) ToGetChromePolicySchemaDefinitionEnumTypeValueArrayOutput() GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput {
	return i.ToGetChromePolicySchemaDefinitionEnumTypeValueArrayOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaDefinitionEnumTypeValueArray) ToGetChromePolicySchemaDefinitionEnumTypeValueArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput)
}

type GetChromePolicySchemaDefinitionEnumTypeValueOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaDefinitionEnumTypeValueOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaDefinitionEnumTypeValue)(nil)).Elem()
}

func (o GetChromePolicySchemaDefinitionEnumTypeValueOutput) ToGetChromePolicySchemaDefinitionEnumTypeValueOutput() GetChromePolicySchemaDefinitionEnumTypeValueOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionEnumTypeValueOutput) ToGetChromePolicySchemaDefinitionEnumTypeValueOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionEnumTypeValueOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionEnumTypeValueOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinitionEnumTypeValue) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetChromePolicySchemaDefinitionEnumTypeValueOutput) Number() pulumi.IntOutput {
	return o.ApplyT(func(v GetChromePolicySchemaDefinitionEnumTypeValue) int { return v.Number }).(pulumi.IntOutput)
}

type GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaDefinitionEnumTypeValue)(nil)).Elem()
}

func (o GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput) ToGetChromePolicySchemaDefinitionEnumTypeValueArrayOutput() GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput) ToGetChromePolicySchemaDefinitionEnumTypeValueArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput {
	return o
}

func (o GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput) Index(i pulumi.IntInput) GetChromePolicySchemaDefinitionEnumTypeValueOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChromePolicySchemaDefinitionEnumTypeValue {
		return vs[0].([]GetChromePolicySchemaDefinitionEnumTypeValue)[vs[1].(int)]
	}).(GetChromePolicySchemaDefinitionEnumTypeValueOutput)
}

type GetChromePolicySchemaNotice struct {
	AcknowledgementRequired bool   `pulumi:"acknowledgementRequired"`
	Field                   string `pulumi:"field"`
	NoticeMessage           string `pulumi:"noticeMessage"`
	NoticeValue             string `pulumi:"noticeValue"`
}

// GetChromePolicySchemaNoticeInput is an input type that accepts GetChromePolicySchemaNoticeArgs and GetChromePolicySchemaNoticeOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaNoticeInput` via:
//
//          GetChromePolicySchemaNoticeArgs{...}
type GetChromePolicySchemaNoticeInput interface {
	pulumi.Input

	ToGetChromePolicySchemaNoticeOutput() GetChromePolicySchemaNoticeOutput
	ToGetChromePolicySchemaNoticeOutputWithContext(context.Context) GetChromePolicySchemaNoticeOutput
}

type GetChromePolicySchemaNoticeArgs struct {
	AcknowledgementRequired pulumi.BoolInput   `pulumi:"acknowledgementRequired"`
	Field                   pulumi.StringInput `pulumi:"field"`
	NoticeMessage           pulumi.StringInput `pulumi:"noticeMessage"`
	NoticeValue             pulumi.StringInput `pulumi:"noticeValue"`
}

func (GetChromePolicySchemaNoticeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaNotice)(nil)).Elem()
}

func (i GetChromePolicySchemaNoticeArgs) ToGetChromePolicySchemaNoticeOutput() GetChromePolicySchemaNoticeOutput {
	return i.ToGetChromePolicySchemaNoticeOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaNoticeArgs) ToGetChromePolicySchemaNoticeOutputWithContext(ctx context.Context) GetChromePolicySchemaNoticeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaNoticeOutput)
}

// GetChromePolicySchemaNoticeArrayInput is an input type that accepts GetChromePolicySchemaNoticeArray and GetChromePolicySchemaNoticeArrayOutput values.
// You can construct a concrete instance of `GetChromePolicySchemaNoticeArrayInput` via:
//
//          GetChromePolicySchemaNoticeArray{ GetChromePolicySchemaNoticeArgs{...} }
type GetChromePolicySchemaNoticeArrayInput interface {
	pulumi.Input

	ToGetChromePolicySchemaNoticeArrayOutput() GetChromePolicySchemaNoticeArrayOutput
	ToGetChromePolicySchemaNoticeArrayOutputWithContext(context.Context) GetChromePolicySchemaNoticeArrayOutput
}

type GetChromePolicySchemaNoticeArray []GetChromePolicySchemaNoticeInput

func (GetChromePolicySchemaNoticeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaNotice)(nil)).Elem()
}

func (i GetChromePolicySchemaNoticeArray) ToGetChromePolicySchemaNoticeArrayOutput() GetChromePolicySchemaNoticeArrayOutput {
	return i.ToGetChromePolicySchemaNoticeArrayOutputWithContext(context.Background())
}

func (i GetChromePolicySchemaNoticeArray) ToGetChromePolicySchemaNoticeArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaNoticeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetChromePolicySchemaNoticeArrayOutput)
}

type GetChromePolicySchemaNoticeOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaNoticeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetChromePolicySchemaNotice)(nil)).Elem()
}

func (o GetChromePolicySchemaNoticeOutput) ToGetChromePolicySchemaNoticeOutput() GetChromePolicySchemaNoticeOutput {
	return o
}

func (o GetChromePolicySchemaNoticeOutput) ToGetChromePolicySchemaNoticeOutputWithContext(ctx context.Context) GetChromePolicySchemaNoticeOutput {
	return o
}

func (o GetChromePolicySchemaNoticeOutput) AcknowledgementRequired() pulumi.BoolOutput {
	return o.ApplyT(func(v GetChromePolicySchemaNotice) bool { return v.AcknowledgementRequired }).(pulumi.BoolOutput)
}

func (o GetChromePolicySchemaNoticeOutput) Field() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaNotice) string { return v.Field }).(pulumi.StringOutput)
}

func (o GetChromePolicySchemaNoticeOutput) NoticeMessage() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaNotice) string { return v.NoticeMessage }).(pulumi.StringOutput)
}

func (o GetChromePolicySchemaNoticeOutput) NoticeValue() pulumi.StringOutput {
	return o.ApplyT(func(v GetChromePolicySchemaNotice) string { return v.NoticeValue }).(pulumi.StringOutput)
}

type GetChromePolicySchemaNoticeArrayOutput struct{ *pulumi.OutputState }

func (GetChromePolicySchemaNoticeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetChromePolicySchemaNotice)(nil)).Elem()
}

func (o GetChromePolicySchemaNoticeArrayOutput) ToGetChromePolicySchemaNoticeArrayOutput() GetChromePolicySchemaNoticeArrayOutput {
	return o
}

func (o GetChromePolicySchemaNoticeArrayOutput) ToGetChromePolicySchemaNoticeArrayOutputWithContext(ctx context.Context) GetChromePolicySchemaNoticeArrayOutput {
	return o
}

func (o GetChromePolicySchemaNoticeArrayOutput) Index(i pulumi.IntInput) GetChromePolicySchemaNoticeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetChromePolicySchemaNotice {
		return vs[0].([]GetChromePolicySchemaNotice)[vs[1].(int)]
	}).(GetChromePolicySchemaNoticeOutput)
}

type GetGroupMembersMember struct {
	DeliverySettings string `pulumi:"deliverySettings"`
	Email            string `pulumi:"email"`
	// The ID of this resource.
	Id     string `pulumi:"id"`
	Role   string `pulumi:"role"`
	Status string `pulumi:"status"`
	Type   string `pulumi:"type"`
}

// GetGroupMembersMemberInput is an input type that accepts GetGroupMembersMemberArgs and GetGroupMembersMemberOutput values.
// You can construct a concrete instance of `GetGroupMembersMemberInput` via:
//
//          GetGroupMembersMemberArgs{...}
type GetGroupMembersMemberInput interface {
	pulumi.Input

	ToGetGroupMembersMemberOutput() GetGroupMembersMemberOutput
	ToGetGroupMembersMemberOutputWithContext(context.Context) GetGroupMembersMemberOutput
}

type GetGroupMembersMemberArgs struct {
	DeliverySettings pulumi.StringInput `pulumi:"deliverySettings"`
	Email            pulumi.StringInput `pulumi:"email"`
	// The ID of this resource.
	Id     pulumi.StringInput `pulumi:"id"`
	Role   pulumi.StringInput `pulumi:"role"`
	Status pulumi.StringInput `pulumi:"status"`
	Type   pulumi.StringInput `pulumi:"type"`
}

func (GetGroupMembersMemberArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembersMember)(nil)).Elem()
}

func (i GetGroupMembersMemberArgs) ToGetGroupMembersMemberOutput() GetGroupMembersMemberOutput {
	return i.ToGetGroupMembersMemberOutputWithContext(context.Background())
}

func (i GetGroupMembersMemberArgs) ToGetGroupMembersMemberOutputWithContext(ctx context.Context) GetGroupMembersMemberOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembersMemberOutput)
}

// GetGroupMembersMemberArrayInput is an input type that accepts GetGroupMembersMemberArray and GetGroupMembersMemberArrayOutput values.
// You can construct a concrete instance of `GetGroupMembersMemberArrayInput` via:
//
//          GetGroupMembersMemberArray{ GetGroupMembersMemberArgs{...} }
type GetGroupMembersMemberArrayInput interface {
	pulumi.Input

	ToGetGroupMembersMemberArrayOutput() GetGroupMembersMemberArrayOutput
	ToGetGroupMembersMemberArrayOutputWithContext(context.Context) GetGroupMembersMemberArrayOutput
}

type GetGroupMembersMemberArray []GetGroupMembersMemberInput

func (GetGroupMembersMemberArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembersMember)(nil)).Elem()
}

func (i GetGroupMembersMemberArray) ToGetGroupMembersMemberArrayOutput() GetGroupMembersMemberArrayOutput {
	return i.ToGetGroupMembersMemberArrayOutputWithContext(context.Background())
}

func (i GetGroupMembersMemberArray) ToGetGroupMembersMemberArrayOutputWithContext(ctx context.Context) GetGroupMembersMemberArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupMembersMemberArrayOutput)
}

type GetGroupMembersMemberOutput struct{ *pulumi.OutputState }

func (GetGroupMembersMemberOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupMembersMember)(nil)).Elem()
}

func (o GetGroupMembersMemberOutput) ToGetGroupMembersMemberOutput() GetGroupMembersMemberOutput {
	return o
}

func (o GetGroupMembersMemberOutput) ToGetGroupMembersMemberOutputWithContext(ctx context.Context) GetGroupMembersMemberOutput {
	return o
}

func (o GetGroupMembersMemberOutput) DeliverySettings() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersMember) string { return v.DeliverySettings }).(pulumi.StringOutput)
}

func (o GetGroupMembersMemberOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersMember) string { return v.Email }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetGroupMembersMemberOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersMember) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetGroupMembersMemberOutput) Role() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersMember) string { return v.Role }).(pulumi.StringOutput)
}

func (o GetGroupMembersMemberOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersMember) string { return v.Status }).(pulumi.StringOutput)
}

func (o GetGroupMembersMemberOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupMembersMember) string { return v.Type }).(pulumi.StringOutput)
}

type GetGroupMembersMemberArrayOutput struct{ *pulumi.OutputState }

func (GetGroupMembersMemberArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupMembersMember)(nil)).Elem()
}

func (o GetGroupMembersMemberArrayOutput) ToGetGroupMembersMemberArrayOutput() GetGroupMembersMemberArrayOutput {
	return o
}

func (o GetGroupMembersMemberArrayOutput) ToGetGroupMembersMemberArrayOutputWithContext(ctx context.Context) GetGroupMembersMemberArrayOutput {
	return o
}

func (o GetGroupMembersMemberArrayOutput) Index(i pulumi.IntInput) GetGroupMembersMemberOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupMembersMember {
		return vs[0].([]GetGroupMembersMember)[vs[1].(int)]
	}).(GetGroupMembersMemberOutput)
}

type GetGroupsGroup struct {
	// Value is true if this group was created by an administrator rather than a user.
	AdminCreated bool `pulumi:"adminCreated"`
	// asps.list of group's email addresses.
	Aliases []string `pulumi:"aliases"`
	// An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
	Description string `pulumi:"description"`
	// The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
	DirectMembersCount int    `pulumi:"directMembersCount"`
	Email              string `pulumi:"email"`
	// ETag of the resource.
	Etag string `pulumi:"etag"`
	// The ID of this resource.
	Id string `pulumi:"id"`
	// The group's display name.
	Name string `pulumi:"name"`
	// asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
	NonEditableAliases []string `pulumi:"nonEditableAliases"`
}

// GetGroupsGroupInput is an input type that accepts GetGroupsGroupArgs and GetGroupsGroupOutput values.
// You can construct a concrete instance of `GetGroupsGroupInput` via:
//
//          GetGroupsGroupArgs{...}
type GetGroupsGroupInput interface {
	pulumi.Input

	ToGetGroupsGroupOutput() GetGroupsGroupOutput
	ToGetGroupsGroupOutputWithContext(context.Context) GetGroupsGroupOutput
}

type GetGroupsGroupArgs struct {
	// Value is true if this group was created by an administrator rather than a user.
	AdminCreated pulumi.BoolInput `pulumi:"adminCreated"`
	// asps.list of group's email addresses.
	Aliases pulumi.StringArrayInput `pulumi:"aliases"`
	// An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
	Description pulumi.StringInput `pulumi:"description"`
	// The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
	DirectMembersCount pulumi.IntInput    `pulumi:"directMembersCount"`
	Email              pulumi.StringInput `pulumi:"email"`
	// ETag of the resource.
	Etag pulumi.StringInput `pulumi:"etag"`
	// The ID of this resource.
	Id pulumi.StringInput `pulumi:"id"`
	// The group's display name.
	Name pulumi.StringInput `pulumi:"name"`
	// asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
	NonEditableAliases pulumi.StringArrayInput `pulumi:"nonEditableAliases"`
}

func (GetGroupsGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return i.ToGetGroupsGroupOutputWithContext(context.Background())
}

func (i GetGroupsGroupArgs) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupOutput)
}

// GetGroupsGroupArrayInput is an input type that accepts GetGroupsGroupArray and GetGroupsGroupArrayOutput values.
// You can construct a concrete instance of `GetGroupsGroupArrayInput` via:
//
//          GetGroupsGroupArray{ GetGroupsGroupArgs{...} }
type GetGroupsGroupArrayInput interface {
	pulumi.Input

	ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput
	ToGetGroupsGroupArrayOutputWithContext(context.Context) GetGroupsGroupArrayOutput
}

type GetGroupsGroupArray []GetGroupsGroupInput

func (GetGroupsGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return i.ToGetGroupsGroupArrayOutputWithContext(context.Background())
}

func (i GetGroupsGroupArray) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetGroupsGroupArrayOutput)
}

type GetGroupsGroupOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutput() GetGroupsGroupOutput {
	return o
}

func (o GetGroupsGroupOutput) ToGetGroupsGroupOutputWithContext(ctx context.Context) GetGroupsGroupOutput {
	return o
}

// Value is true if this group was created by an administrator rather than a user.
func (o GetGroupsGroupOutput) AdminCreated() pulumi.BoolOutput {
	return o.ApplyT(func(v GetGroupsGroup) bool { return v.AdminCreated }).(pulumi.BoolOutput)
}

// asps.list of group's email addresses.
func (o GetGroupsGroupOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGroupsGroup) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

// An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
func (o GetGroupsGroupOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Description }).(pulumi.StringOutput)
}

// The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
func (o GetGroupsGroupOutput) DirectMembersCount() pulumi.IntOutput {
	return o.ApplyT(func(v GetGroupsGroup) int { return v.DirectMembersCount }).(pulumi.IntOutput)
}

func (o GetGroupsGroupOutput) Email() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Email }).(pulumi.StringOutput)
}

// ETag of the resource.
func (o GetGroupsGroupOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Etag }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetGroupsGroupOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Id }).(pulumi.StringOutput)
}

// The group's display name.
func (o GetGroupsGroupOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetGroupsGroup) string { return v.Name }).(pulumi.StringOutput)
}

// asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
func (o GetGroupsGroupOutput) NonEditableAliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetGroupsGroup) []string { return v.NonEditableAliases }).(pulumi.StringArrayOutput)
}

type GetGroupsGroupArrayOutput struct{ *pulumi.OutputState }

func (GetGroupsGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetGroupsGroup)(nil)).Elem()
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutput() GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) ToGetGroupsGroupArrayOutputWithContext(ctx context.Context) GetGroupsGroupArrayOutput {
	return o
}

func (o GetGroupsGroupArrayOutput) Index(i pulumi.IntInput) GetGroupsGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetGroupsGroup {
		return vs[0].([]GetGroupsGroup)[vs[1].(int)]
	}).(GetGroupsGroupOutput)
}

type GetPrivilegesItem struct {
	// ETag of the resource.
	Etag              string `pulumi:"etag"`
	IsOrgUnitScopable bool   `pulumi:"isOrgUnitScopable"`
	PrivilegeName     string `pulumi:"privilegeName"`
	ServiceId         string `pulumi:"serviceId"`
	ServiceName       string `pulumi:"serviceName"`
}

// GetPrivilegesItemInput is an input type that accepts GetPrivilegesItemArgs and GetPrivilegesItemOutput values.
// You can construct a concrete instance of `GetPrivilegesItemInput` via:
//
//          GetPrivilegesItemArgs{...}
type GetPrivilegesItemInput interface {
	pulumi.Input

	ToGetPrivilegesItemOutput() GetPrivilegesItemOutput
	ToGetPrivilegesItemOutputWithContext(context.Context) GetPrivilegesItemOutput
}

type GetPrivilegesItemArgs struct {
	// ETag of the resource.
	Etag              pulumi.StringInput `pulumi:"etag"`
	IsOrgUnitScopable pulumi.BoolInput   `pulumi:"isOrgUnitScopable"`
	PrivilegeName     pulumi.StringInput `pulumi:"privilegeName"`
	ServiceId         pulumi.StringInput `pulumi:"serviceId"`
	ServiceName       pulumi.StringInput `pulumi:"serviceName"`
}

func (GetPrivilegesItemArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivilegesItem)(nil)).Elem()
}

func (i GetPrivilegesItemArgs) ToGetPrivilegesItemOutput() GetPrivilegesItemOutput {
	return i.ToGetPrivilegesItemOutputWithContext(context.Background())
}

func (i GetPrivilegesItemArgs) ToGetPrivilegesItemOutputWithContext(ctx context.Context) GetPrivilegesItemOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivilegesItemOutput)
}

// GetPrivilegesItemArrayInput is an input type that accepts GetPrivilegesItemArray and GetPrivilegesItemArrayOutput values.
// You can construct a concrete instance of `GetPrivilegesItemArrayInput` via:
//
//          GetPrivilegesItemArray{ GetPrivilegesItemArgs{...} }
type GetPrivilegesItemArrayInput interface {
	pulumi.Input

	ToGetPrivilegesItemArrayOutput() GetPrivilegesItemArrayOutput
	ToGetPrivilegesItemArrayOutputWithContext(context.Context) GetPrivilegesItemArrayOutput
}

type GetPrivilegesItemArray []GetPrivilegesItemInput

func (GetPrivilegesItemArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivilegesItem)(nil)).Elem()
}

func (i GetPrivilegesItemArray) ToGetPrivilegesItemArrayOutput() GetPrivilegesItemArrayOutput {
	return i.ToGetPrivilegesItemArrayOutputWithContext(context.Background())
}

func (i GetPrivilegesItemArray) ToGetPrivilegesItemArrayOutputWithContext(ctx context.Context) GetPrivilegesItemArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetPrivilegesItemArrayOutput)
}

type GetPrivilegesItemOutput struct{ *pulumi.OutputState }

func (GetPrivilegesItemOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetPrivilegesItem)(nil)).Elem()
}

func (o GetPrivilegesItemOutput) ToGetPrivilegesItemOutput() GetPrivilegesItemOutput {
	return o
}

func (o GetPrivilegesItemOutput) ToGetPrivilegesItemOutputWithContext(ctx context.Context) GetPrivilegesItemOutput {
	return o
}

// ETag of the resource.
func (o GetPrivilegesItemOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivilegesItem) string { return v.Etag }).(pulumi.StringOutput)
}

func (o GetPrivilegesItemOutput) IsOrgUnitScopable() pulumi.BoolOutput {
	return o.ApplyT(func(v GetPrivilegesItem) bool { return v.IsOrgUnitScopable }).(pulumi.BoolOutput)
}

func (o GetPrivilegesItemOutput) PrivilegeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivilegesItem) string { return v.PrivilegeName }).(pulumi.StringOutput)
}

func (o GetPrivilegesItemOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivilegesItem) string { return v.ServiceId }).(pulumi.StringOutput)
}

func (o GetPrivilegesItemOutput) ServiceName() pulumi.StringOutput {
	return o.ApplyT(func(v GetPrivilegesItem) string { return v.ServiceName }).(pulumi.StringOutput)
}

type GetPrivilegesItemArrayOutput struct{ *pulumi.OutputState }

func (GetPrivilegesItemArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetPrivilegesItem)(nil)).Elem()
}

func (o GetPrivilegesItemArrayOutput) ToGetPrivilegesItemArrayOutput() GetPrivilegesItemArrayOutput {
	return o
}

func (o GetPrivilegesItemArrayOutput) ToGetPrivilegesItemArrayOutputWithContext(ctx context.Context) GetPrivilegesItemArrayOutput {
	return o
}

func (o GetPrivilegesItemArrayOutput) Index(i pulumi.IntInput) GetPrivilegesItemOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetPrivilegesItem {
		return vs[0].([]GetPrivilegesItem)[vs[1].(int)]
	}).(GetPrivilegesItemOutput)
}

type GetRolePrivilege struct {
	PrivilegeName string `pulumi:"privilegeName"`
	ServiceId     string `pulumi:"serviceId"`
}

// GetRolePrivilegeInput is an input type that accepts GetRolePrivilegeArgs and GetRolePrivilegeOutput values.
// You can construct a concrete instance of `GetRolePrivilegeInput` via:
//
//          GetRolePrivilegeArgs{...}
type GetRolePrivilegeInput interface {
	pulumi.Input

	ToGetRolePrivilegeOutput() GetRolePrivilegeOutput
	ToGetRolePrivilegeOutputWithContext(context.Context) GetRolePrivilegeOutput
}

type GetRolePrivilegeArgs struct {
	PrivilegeName pulumi.StringInput `pulumi:"privilegeName"`
	ServiceId     pulumi.StringInput `pulumi:"serviceId"`
}

func (GetRolePrivilegeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePrivilege)(nil)).Elem()
}

func (i GetRolePrivilegeArgs) ToGetRolePrivilegeOutput() GetRolePrivilegeOutput {
	return i.ToGetRolePrivilegeOutputWithContext(context.Background())
}

func (i GetRolePrivilegeArgs) ToGetRolePrivilegeOutputWithContext(ctx context.Context) GetRolePrivilegeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePrivilegeOutput)
}

// GetRolePrivilegeArrayInput is an input type that accepts GetRolePrivilegeArray and GetRolePrivilegeArrayOutput values.
// You can construct a concrete instance of `GetRolePrivilegeArrayInput` via:
//
//          GetRolePrivilegeArray{ GetRolePrivilegeArgs{...} }
type GetRolePrivilegeArrayInput interface {
	pulumi.Input

	ToGetRolePrivilegeArrayOutput() GetRolePrivilegeArrayOutput
	ToGetRolePrivilegeArrayOutputWithContext(context.Context) GetRolePrivilegeArrayOutput
}

type GetRolePrivilegeArray []GetRolePrivilegeInput

func (GetRolePrivilegeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolePrivilege)(nil)).Elem()
}

func (i GetRolePrivilegeArray) ToGetRolePrivilegeArrayOutput() GetRolePrivilegeArrayOutput {
	return i.ToGetRolePrivilegeArrayOutputWithContext(context.Background())
}

func (i GetRolePrivilegeArray) ToGetRolePrivilegeArrayOutputWithContext(ctx context.Context) GetRolePrivilegeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetRolePrivilegeArrayOutput)
}

type GetRolePrivilegeOutput struct{ *pulumi.OutputState }

func (GetRolePrivilegeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetRolePrivilege)(nil)).Elem()
}

func (o GetRolePrivilegeOutput) ToGetRolePrivilegeOutput() GetRolePrivilegeOutput {
	return o
}

func (o GetRolePrivilegeOutput) ToGetRolePrivilegeOutputWithContext(ctx context.Context) GetRolePrivilegeOutput {
	return o
}

func (o GetRolePrivilegeOutput) PrivilegeName() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolePrivilege) string { return v.PrivilegeName }).(pulumi.StringOutput)
}

func (o GetRolePrivilegeOutput) ServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v GetRolePrivilege) string { return v.ServiceId }).(pulumi.StringOutput)
}

type GetRolePrivilegeArrayOutput struct{ *pulumi.OutputState }

func (GetRolePrivilegeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetRolePrivilege)(nil)).Elem()
}

func (o GetRolePrivilegeArrayOutput) ToGetRolePrivilegeArrayOutput() GetRolePrivilegeArrayOutput {
	return o
}

func (o GetRolePrivilegeArrayOutput) ToGetRolePrivilegeArrayOutputWithContext(ctx context.Context) GetRolePrivilegeArrayOutput {
	return o
}

func (o GetRolePrivilegeArrayOutput) Index(i pulumi.IntInput) GetRolePrivilegeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetRolePrivilege {
		return vs[0].([]GetRolePrivilege)[vs[1].(int)]
	}).(GetRolePrivilegeOutput)
}

type GetSchemaField struct {
	// Display name for the schema.
	DisplayName string `pulumi:"displayName"`
	// ETag of the resource.
	Etag                 string                              `pulumi:"etag"`
	FieldId              string                              `pulumi:"fieldId"`
	FieldName            string                              `pulumi:"fieldName"`
	FieldType            string                              `pulumi:"fieldType"`
	Indexed              bool                                `pulumi:"indexed"`
	MultiValued          bool                                `pulumi:"multiValued"`
	NumericIndexingSpecs []GetSchemaFieldNumericIndexingSpec `pulumi:"numericIndexingSpecs"`
	ReadAccessType       string                              `pulumi:"readAccessType"`
}

// GetSchemaFieldInput is an input type that accepts GetSchemaFieldArgs and GetSchemaFieldOutput values.
// You can construct a concrete instance of `GetSchemaFieldInput` via:
//
//          GetSchemaFieldArgs{...}
type GetSchemaFieldInput interface {
	pulumi.Input

	ToGetSchemaFieldOutput() GetSchemaFieldOutput
	ToGetSchemaFieldOutputWithContext(context.Context) GetSchemaFieldOutput
}

type GetSchemaFieldArgs struct {
	// Display name for the schema.
	DisplayName pulumi.StringInput `pulumi:"displayName"`
	// ETag of the resource.
	Etag                 pulumi.StringInput                          `pulumi:"etag"`
	FieldId              pulumi.StringInput                          `pulumi:"fieldId"`
	FieldName            pulumi.StringInput                          `pulumi:"fieldName"`
	FieldType            pulumi.StringInput                          `pulumi:"fieldType"`
	Indexed              pulumi.BoolInput                            `pulumi:"indexed"`
	MultiValued          pulumi.BoolInput                            `pulumi:"multiValued"`
	NumericIndexingSpecs GetSchemaFieldNumericIndexingSpecArrayInput `pulumi:"numericIndexingSpecs"`
	ReadAccessType       pulumi.StringInput                          `pulumi:"readAccessType"`
}

func (GetSchemaFieldArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaField)(nil)).Elem()
}

func (i GetSchemaFieldArgs) ToGetSchemaFieldOutput() GetSchemaFieldOutput {
	return i.ToGetSchemaFieldOutputWithContext(context.Background())
}

func (i GetSchemaFieldArgs) ToGetSchemaFieldOutputWithContext(ctx context.Context) GetSchemaFieldOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaFieldOutput)
}

// GetSchemaFieldArrayInput is an input type that accepts GetSchemaFieldArray and GetSchemaFieldArrayOutput values.
// You can construct a concrete instance of `GetSchemaFieldArrayInput` via:
//
//          GetSchemaFieldArray{ GetSchemaFieldArgs{...} }
type GetSchemaFieldArrayInput interface {
	pulumi.Input

	ToGetSchemaFieldArrayOutput() GetSchemaFieldArrayOutput
	ToGetSchemaFieldArrayOutputWithContext(context.Context) GetSchemaFieldArrayOutput
}

type GetSchemaFieldArray []GetSchemaFieldInput

func (GetSchemaFieldArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaField)(nil)).Elem()
}

func (i GetSchemaFieldArray) ToGetSchemaFieldArrayOutput() GetSchemaFieldArrayOutput {
	return i.ToGetSchemaFieldArrayOutputWithContext(context.Background())
}

func (i GetSchemaFieldArray) ToGetSchemaFieldArrayOutputWithContext(ctx context.Context) GetSchemaFieldArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaFieldArrayOutput)
}

type GetSchemaFieldOutput struct{ *pulumi.OutputState }

func (GetSchemaFieldOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaField)(nil)).Elem()
}

func (o GetSchemaFieldOutput) ToGetSchemaFieldOutput() GetSchemaFieldOutput {
	return o
}

func (o GetSchemaFieldOutput) ToGetSchemaFieldOutputWithContext(ctx context.Context) GetSchemaFieldOutput {
	return o
}

// Display name for the schema.
func (o GetSchemaFieldOutput) DisplayName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaField) string { return v.DisplayName }).(pulumi.StringOutput)
}

// ETag of the resource.
func (o GetSchemaFieldOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaField) string { return v.Etag }).(pulumi.StringOutput)
}

func (o GetSchemaFieldOutput) FieldId() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaField) string { return v.FieldId }).(pulumi.StringOutput)
}

func (o GetSchemaFieldOutput) FieldName() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaField) string { return v.FieldName }).(pulumi.StringOutput)
}

func (o GetSchemaFieldOutput) FieldType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaField) string { return v.FieldType }).(pulumi.StringOutput)
}

func (o GetSchemaFieldOutput) Indexed() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSchemaField) bool { return v.Indexed }).(pulumi.BoolOutput)
}

func (o GetSchemaFieldOutput) MultiValued() pulumi.BoolOutput {
	return o.ApplyT(func(v GetSchemaField) bool { return v.MultiValued }).(pulumi.BoolOutput)
}

func (o GetSchemaFieldOutput) NumericIndexingSpecs() GetSchemaFieldNumericIndexingSpecArrayOutput {
	return o.ApplyT(func(v GetSchemaField) []GetSchemaFieldNumericIndexingSpec { return v.NumericIndexingSpecs }).(GetSchemaFieldNumericIndexingSpecArrayOutput)
}

func (o GetSchemaFieldOutput) ReadAccessType() pulumi.StringOutput {
	return o.ApplyT(func(v GetSchemaField) string { return v.ReadAccessType }).(pulumi.StringOutput)
}

type GetSchemaFieldArrayOutput struct{ *pulumi.OutputState }

func (GetSchemaFieldArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaField)(nil)).Elem()
}

func (o GetSchemaFieldArrayOutput) ToGetSchemaFieldArrayOutput() GetSchemaFieldArrayOutput {
	return o
}

func (o GetSchemaFieldArrayOutput) ToGetSchemaFieldArrayOutputWithContext(ctx context.Context) GetSchemaFieldArrayOutput {
	return o
}

func (o GetSchemaFieldArrayOutput) Index(i pulumi.IntInput) GetSchemaFieldOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemaField {
		return vs[0].([]GetSchemaField)[vs[1].(int)]
	}).(GetSchemaFieldOutput)
}

type GetSchemaFieldNumericIndexingSpec struct {
	MaxValue float64 `pulumi:"maxValue"`
	MinValue float64 `pulumi:"minValue"`
}

// GetSchemaFieldNumericIndexingSpecInput is an input type that accepts GetSchemaFieldNumericIndexingSpecArgs and GetSchemaFieldNumericIndexingSpecOutput values.
// You can construct a concrete instance of `GetSchemaFieldNumericIndexingSpecInput` via:
//
//          GetSchemaFieldNumericIndexingSpecArgs{...}
type GetSchemaFieldNumericIndexingSpecInput interface {
	pulumi.Input

	ToGetSchemaFieldNumericIndexingSpecOutput() GetSchemaFieldNumericIndexingSpecOutput
	ToGetSchemaFieldNumericIndexingSpecOutputWithContext(context.Context) GetSchemaFieldNumericIndexingSpecOutput
}

type GetSchemaFieldNumericIndexingSpecArgs struct {
	MaxValue pulumi.Float64Input `pulumi:"maxValue"`
	MinValue pulumi.Float64Input `pulumi:"minValue"`
}

func (GetSchemaFieldNumericIndexingSpecArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaFieldNumericIndexingSpec)(nil)).Elem()
}

func (i GetSchemaFieldNumericIndexingSpecArgs) ToGetSchemaFieldNumericIndexingSpecOutput() GetSchemaFieldNumericIndexingSpecOutput {
	return i.ToGetSchemaFieldNumericIndexingSpecOutputWithContext(context.Background())
}

func (i GetSchemaFieldNumericIndexingSpecArgs) ToGetSchemaFieldNumericIndexingSpecOutputWithContext(ctx context.Context) GetSchemaFieldNumericIndexingSpecOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaFieldNumericIndexingSpecOutput)
}

// GetSchemaFieldNumericIndexingSpecArrayInput is an input type that accepts GetSchemaFieldNumericIndexingSpecArray and GetSchemaFieldNumericIndexingSpecArrayOutput values.
// You can construct a concrete instance of `GetSchemaFieldNumericIndexingSpecArrayInput` via:
//
//          GetSchemaFieldNumericIndexingSpecArray{ GetSchemaFieldNumericIndexingSpecArgs{...} }
type GetSchemaFieldNumericIndexingSpecArrayInput interface {
	pulumi.Input

	ToGetSchemaFieldNumericIndexingSpecArrayOutput() GetSchemaFieldNumericIndexingSpecArrayOutput
	ToGetSchemaFieldNumericIndexingSpecArrayOutputWithContext(context.Context) GetSchemaFieldNumericIndexingSpecArrayOutput
}

type GetSchemaFieldNumericIndexingSpecArray []GetSchemaFieldNumericIndexingSpecInput

func (GetSchemaFieldNumericIndexingSpecArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaFieldNumericIndexingSpec)(nil)).Elem()
}

func (i GetSchemaFieldNumericIndexingSpecArray) ToGetSchemaFieldNumericIndexingSpecArrayOutput() GetSchemaFieldNumericIndexingSpecArrayOutput {
	return i.ToGetSchemaFieldNumericIndexingSpecArrayOutputWithContext(context.Background())
}

func (i GetSchemaFieldNumericIndexingSpecArray) ToGetSchemaFieldNumericIndexingSpecArrayOutputWithContext(ctx context.Context) GetSchemaFieldNumericIndexingSpecArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetSchemaFieldNumericIndexingSpecArrayOutput)
}

type GetSchemaFieldNumericIndexingSpecOutput struct{ *pulumi.OutputState }

func (GetSchemaFieldNumericIndexingSpecOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetSchemaFieldNumericIndexingSpec)(nil)).Elem()
}

func (o GetSchemaFieldNumericIndexingSpecOutput) ToGetSchemaFieldNumericIndexingSpecOutput() GetSchemaFieldNumericIndexingSpecOutput {
	return o
}

func (o GetSchemaFieldNumericIndexingSpecOutput) ToGetSchemaFieldNumericIndexingSpecOutputWithContext(ctx context.Context) GetSchemaFieldNumericIndexingSpecOutput {
	return o
}

func (o GetSchemaFieldNumericIndexingSpecOutput) MaxValue() pulumi.Float64Output {
	return o.ApplyT(func(v GetSchemaFieldNumericIndexingSpec) float64 { return v.MaxValue }).(pulumi.Float64Output)
}

func (o GetSchemaFieldNumericIndexingSpecOutput) MinValue() pulumi.Float64Output {
	return o.ApplyT(func(v GetSchemaFieldNumericIndexingSpec) float64 { return v.MinValue }).(pulumi.Float64Output)
}

type GetSchemaFieldNumericIndexingSpecArrayOutput struct{ *pulumi.OutputState }

func (GetSchemaFieldNumericIndexingSpecArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetSchemaFieldNumericIndexingSpec)(nil)).Elem()
}

func (o GetSchemaFieldNumericIndexingSpecArrayOutput) ToGetSchemaFieldNumericIndexingSpecArrayOutput() GetSchemaFieldNumericIndexingSpecArrayOutput {
	return o
}

func (o GetSchemaFieldNumericIndexingSpecArrayOutput) ToGetSchemaFieldNumericIndexingSpecArrayOutputWithContext(ctx context.Context) GetSchemaFieldNumericIndexingSpecArrayOutput {
	return o
}

func (o GetSchemaFieldNumericIndexingSpecArrayOutput) Index(i pulumi.IntInput) GetSchemaFieldNumericIndexingSpecOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetSchemaFieldNumericIndexingSpec {
		return vs[0].([]GetSchemaFieldNumericIndexingSpec)[vs[1].(int)]
	}).(GetSchemaFieldNumericIndexingSpecOutput)
}

type GetUserAddress struct {
	Country            string `pulumi:"country"`
	CountryCode        string `pulumi:"countryCode"`
	CustomType         string `pulumi:"customType"`
	ExtendedAddress    string `pulumi:"extendedAddress"`
	Formatted          string `pulumi:"formatted"`
	Locality           string `pulumi:"locality"`
	PoBox              string `pulumi:"poBox"`
	PostalCode         string `pulumi:"postalCode"`
	Primary            bool   `pulumi:"primary"`
	Region             string `pulumi:"region"`
	SourceIsStructured bool   `pulumi:"sourceIsStructured"`
	StreetAddress      string `pulumi:"streetAddress"`
	Type               string `pulumi:"type"`
}

// GetUserAddressInput is an input type that accepts GetUserAddressArgs and GetUserAddressOutput values.
// You can construct a concrete instance of `GetUserAddressInput` via:
//
//          GetUserAddressArgs{...}
type GetUserAddressInput interface {
	pulumi.Input

	ToGetUserAddressOutput() GetUserAddressOutput
	ToGetUserAddressOutputWithContext(context.Context) GetUserAddressOutput
}

type GetUserAddressArgs struct {
	Country            pulumi.StringInput `pulumi:"country"`
	CountryCode        pulumi.StringInput `pulumi:"countryCode"`
	CustomType         pulumi.StringInput `pulumi:"customType"`
	ExtendedAddress    pulumi.StringInput `pulumi:"extendedAddress"`
	Formatted          pulumi.StringInput `pulumi:"formatted"`
	Locality           pulumi.StringInput `pulumi:"locality"`
	PoBox              pulumi.StringInput `pulumi:"poBox"`
	PostalCode         pulumi.StringInput `pulumi:"postalCode"`
	Primary            pulumi.BoolInput   `pulumi:"primary"`
	Region             pulumi.StringInput `pulumi:"region"`
	SourceIsStructured pulumi.BoolInput   `pulumi:"sourceIsStructured"`
	StreetAddress      pulumi.StringInput `pulumi:"streetAddress"`
	Type               pulumi.StringInput `pulumi:"type"`
}

func (GetUserAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAddress)(nil)).Elem()
}

func (i GetUserAddressArgs) ToGetUserAddressOutput() GetUserAddressOutput {
	return i.ToGetUserAddressOutputWithContext(context.Background())
}

func (i GetUserAddressArgs) ToGetUserAddressOutputWithContext(ctx context.Context) GetUserAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserAddressOutput)
}

// GetUserAddressArrayInput is an input type that accepts GetUserAddressArray and GetUserAddressArrayOutput values.
// You can construct a concrete instance of `GetUserAddressArrayInput` via:
//
//          GetUserAddressArray{ GetUserAddressArgs{...} }
type GetUserAddressArrayInput interface {
	pulumi.Input

	ToGetUserAddressArrayOutput() GetUserAddressArrayOutput
	ToGetUserAddressArrayOutputWithContext(context.Context) GetUserAddressArrayOutput
}

type GetUserAddressArray []GetUserAddressInput

func (GetUserAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserAddress)(nil)).Elem()
}

func (i GetUserAddressArray) ToGetUserAddressArrayOutput() GetUserAddressArrayOutput {
	return i.ToGetUserAddressArrayOutputWithContext(context.Background())
}

func (i GetUserAddressArray) ToGetUserAddressArrayOutputWithContext(ctx context.Context) GetUserAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserAddressArrayOutput)
}

type GetUserAddressOutput struct{ *pulumi.OutputState }

func (GetUserAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserAddress)(nil)).Elem()
}

func (o GetUserAddressOutput) ToGetUserAddressOutput() GetUserAddressOutput {
	return o
}

func (o GetUserAddressOutput) ToGetUserAddressOutputWithContext(ctx context.Context) GetUserAddressOutput {
	return o
}

func (o GetUserAddressOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.Country }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.CountryCode }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) ExtendedAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.ExtendedAddress }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) Formatted() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.Formatted }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) Locality() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.Locality }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) PoBox() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.PoBox }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) PostalCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.PostalCode }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserAddress) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUserAddressOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) SourceIsStructured() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserAddress) bool { return v.SourceIsStructured }).(pulumi.BoolOutput)
}

func (o GetUserAddressOutput) StreetAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.StreetAddress }).(pulumi.StringOutput)
}

func (o GetUserAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserAddress) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserAddressArrayOutput struct{ *pulumi.OutputState }

func (GetUserAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserAddress)(nil)).Elem()
}

func (o GetUserAddressArrayOutput) ToGetUserAddressArrayOutput() GetUserAddressArrayOutput {
	return o
}

func (o GetUserAddressArrayOutput) ToGetUserAddressArrayOutputWithContext(ctx context.Context) GetUserAddressArrayOutput {
	return o
}

func (o GetUserAddressArrayOutput) Index(i pulumi.IntInput) GetUserAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserAddress {
		return vs[0].([]GetUserAddress)[vs[1].(int)]
	}).(GetUserAddressOutput)
}

type GetUserCustomSchema struct {
	SchemaName   string            `pulumi:"schemaName"`
	SchemaValues map[string]string `pulumi:"schemaValues"`
}

// GetUserCustomSchemaInput is an input type that accepts GetUserCustomSchemaArgs and GetUserCustomSchemaOutput values.
// You can construct a concrete instance of `GetUserCustomSchemaInput` via:
//
//          GetUserCustomSchemaArgs{...}
type GetUserCustomSchemaInput interface {
	pulumi.Input

	ToGetUserCustomSchemaOutput() GetUserCustomSchemaOutput
	ToGetUserCustomSchemaOutputWithContext(context.Context) GetUserCustomSchemaOutput
}

type GetUserCustomSchemaArgs struct {
	SchemaName   pulumi.StringInput    `pulumi:"schemaName"`
	SchemaValues pulumi.StringMapInput `pulumi:"schemaValues"`
}

func (GetUserCustomSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserCustomSchema)(nil)).Elem()
}

func (i GetUserCustomSchemaArgs) ToGetUserCustomSchemaOutput() GetUserCustomSchemaOutput {
	return i.ToGetUserCustomSchemaOutputWithContext(context.Background())
}

func (i GetUserCustomSchemaArgs) ToGetUserCustomSchemaOutputWithContext(ctx context.Context) GetUserCustomSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserCustomSchemaOutput)
}

// GetUserCustomSchemaArrayInput is an input type that accepts GetUserCustomSchemaArray and GetUserCustomSchemaArrayOutput values.
// You can construct a concrete instance of `GetUserCustomSchemaArrayInput` via:
//
//          GetUserCustomSchemaArray{ GetUserCustomSchemaArgs{...} }
type GetUserCustomSchemaArrayInput interface {
	pulumi.Input

	ToGetUserCustomSchemaArrayOutput() GetUserCustomSchemaArrayOutput
	ToGetUserCustomSchemaArrayOutputWithContext(context.Context) GetUserCustomSchemaArrayOutput
}

type GetUserCustomSchemaArray []GetUserCustomSchemaInput

func (GetUserCustomSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserCustomSchema)(nil)).Elem()
}

func (i GetUserCustomSchemaArray) ToGetUserCustomSchemaArrayOutput() GetUserCustomSchemaArrayOutput {
	return i.ToGetUserCustomSchemaArrayOutputWithContext(context.Background())
}

func (i GetUserCustomSchemaArray) ToGetUserCustomSchemaArrayOutputWithContext(ctx context.Context) GetUserCustomSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserCustomSchemaArrayOutput)
}

type GetUserCustomSchemaOutput struct{ *pulumi.OutputState }

func (GetUserCustomSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserCustomSchema)(nil)).Elem()
}

func (o GetUserCustomSchemaOutput) ToGetUserCustomSchemaOutput() GetUserCustomSchemaOutput {
	return o
}

func (o GetUserCustomSchemaOutput) ToGetUserCustomSchemaOutputWithContext(ctx context.Context) GetUserCustomSchemaOutput {
	return o
}

func (o GetUserCustomSchemaOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserCustomSchema) string { return v.SchemaName }).(pulumi.StringOutput)
}

func (o GetUserCustomSchemaOutput) SchemaValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUserCustomSchema) map[string]string { return v.SchemaValues }).(pulumi.StringMapOutput)
}

type GetUserCustomSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetUserCustomSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserCustomSchema)(nil)).Elem()
}

func (o GetUserCustomSchemaArrayOutput) ToGetUserCustomSchemaArrayOutput() GetUserCustomSchemaArrayOutput {
	return o
}

func (o GetUserCustomSchemaArrayOutput) ToGetUserCustomSchemaArrayOutputWithContext(ctx context.Context) GetUserCustomSchemaArrayOutput {
	return o
}

func (o GetUserCustomSchemaArrayOutput) Index(i pulumi.IntInput) GetUserCustomSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserCustomSchema {
		return vs[0].([]GetUserCustomSchema)[vs[1].(int)]
	}).(GetUserCustomSchemaOutput)
}

type GetUserEmail struct {
	Address    string `pulumi:"address"`
	CustomType string `pulumi:"customType"`
	Primary    bool   `pulumi:"primary"`
	Type       string `pulumi:"type"`
}

// GetUserEmailInput is an input type that accepts GetUserEmailArgs and GetUserEmailOutput values.
// You can construct a concrete instance of `GetUserEmailInput` via:
//
//          GetUserEmailArgs{...}
type GetUserEmailInput interface {
	pulumi.Input

	ToGetUserEmailOutput() GetUserEmailOutput
	ToGetUserEmailOutputWithContext(context.Context) GetUserEmailOutput
}

type GetUserEmailArgs struct {
	Address    pulumi.StringInput `pulumi:"address"`
	CustomType pulumi.StringInput `pulumi:"customType"`
	Primary    pulumi.BoolInput   `pulumi:"primary"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (GetUserEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserEmail)(nil)).Elem()
}

func (i GetUserEmailArgs) ToGetUserEmailOutput() GetUserEmailOutput {
	return i.ToGetUserEmailOutputWithContext(context.Background())
}

func (i GetUserEmailArgs) ToGetUserEmailOutputWithContext(ctx context.Context) GetUserEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserEmailOutput)
}

// GetUserEmailArrayInput is an input type that accepts GetUserEmailArray and GetUserEmailArrayOutput values.
// You can construct a concrete instance of `GetUserEmailArrayInput` via:
//
//          GetUserEmailArray{ GetUserEmailArgs{...} }
type GetUserEmailArrayInput interface {
	pulumi.Input

	ToGetUserEmailArrayOutput() GetUserEmailArrayOutput
	ToGetUserEmailArrayOutputWithContext(context.Context) GetUserEmailArrayOutput
}

type GetUserEmailArray []GetUserEmailInput

func (GetUserEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserEmail)(nil)).Elem()
}

func (i GetUserEmailArray) ToGetUserEmailArrayOutput() GetUserEmailArrayOutput {
	return i.ToGetUserEmailArrayOutputWithContext(context.Background())
}

func (i GetUserEmailArray) ToGetUserEmailArrayOutputWithContext(ctx context.Context) GetUserEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserEmailArrayOutput)
}

type GetUserEmailOutput struct{ *pulumi.OutputState }

func (GetUserEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserEmail)(nil)).Elem()
}

func (o GetUserEmailOutput) ToGetUserEmailOutput() GetUserEmailOutput {
	return o
}

func (o GetUserEmailOutput) ToGetUserEmailOutputWithContext(ctx context.Context) GetUserEmailOutput {
	return o
}

func (o GetUserEmailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserEmail) string { return v.Address }).(pulumi.StringOutput)
}

func (o GetUserEmailOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserEmail) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserEmailOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserEmail) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUserEmailOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserEmail) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserEmailArrayOutput struct{ *pulumi.OutputState }

func (GetUserEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserEmail)(nil)).Elem()
}

func (o GetUserEmailArrayOutput) ToGetUserEmailArrayOutput() GetUserEmailArrayOutput {
	return o
}

func (o GetUserEmailArrayOutput) ToGetUserEmailArrayOutputWithContext(ctx context.Context) GetUserEmailArrayOutput {
	return o
}

func (o GetUserEmailArrayOutput) Index(i pulumi.IntInput) GetUserEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserEmail {
		return vs[0].([]GetUserEmail)[vs[1].(int)]
	}).(GetUserEmailOutput)
}

type GetUserExternalId struct {
	CustomType string `pulumi:"customType"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUserExternalIdInput is an input type that accepts GetUserExternalIdArgs and GetUserExternalIdOutput values.
// You can construct a concrete instance of `GetUserExternalIdInput` via:
//
//          GetUserExternalIdArgs{...}
type GetUserExternalIdInput interface {
	pulumi.Input

	ToGetUserExternalIdOutput() GetUserExternalIdOutput
	ToGetUserExternalIdOutputWithContext(context.Context) GetUserExternalIdOutput
}

type GetUserExternalIdArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUserExternalIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserExternalId)(nil)).Elem()
}

func (i GetUserExternalIdArgs) ToGetUserExternalIdOutput() GetUserExternalIdOutput {
	return i.ToGetUserExternalIdOutputWithContext(context.Background())
}

func (i GetUserExternalIdArgs) ToGetUserExternalIdOutputWithContext(ctx context.Context) GetUserExternalIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserExternalIdOutput)
}

// GetUserExternalIdArrayInput is an input type that accepts GetUserExternalIdArray and GetUserExternalIdArrayOutput values.
// You can construct a concrete instance of `GetUserExternalIdArrayInput` via:
//
//          GetUserExternalIdArray{ GetUserExternalIdArgs{...} }
type GetUserExternalIdArrayInput interface {
	pulumi.Input

	ToGetUserExternalIdArrayOutput() GetUserExternalIdArrayOutput
	ToGetUserExternalIdArrayOutputWithContext(context.Context) GetUserExternalIdArrayOutput
}

type GetUserExternalIdArray []GetUserExternalIdInput

func (GetUserExternalIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserExternalId)(nil)).Elem()
}

func (i GetUserExternalIdArray) ToGetUserExternalIdArrayOutput() GetUserExternalIdArrayOutput {
	return i.ToGetUserExternalIdArrayOutputWithContext(context.Background())
}

func (i GetUserExternalIdArray) ToGetUserExternalIdArrayOutputWithContext(ctx context.Context) GetUserExternalIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserExternalIdArrayOutput)
}

type GetUserExternalIdOutput struct{ *pulumi.OutputState }

func (GetUserExternalIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserExternalId)(nil)).Elem()
}

func (o GetUserExternalIdOutput) ToGetUserExternalIdOutput() GetUserExternalIdOutput {
	return o
}

func (o GetUserExternalIdOutput) ToGetUserExternalIdOutputWithContext(ctx context.Context) GetUserExternalIdOutput {
	return o
}

func (o GetUserExternalIdOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserExternalId) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserExternalIdOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserExternalId) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUserExternalIdOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserExternalId) string { return v.Value }).(pulumi.StringOutput)
}

type GetUserExternalIdArrayOutput struct{ *pulumi.OutputState }

func (GetUserExternalIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserExternalId)(nil)).Elem()
}

func (o GetUserExternalIdArrayOutput) ToGetUserExternalIdArrayOutput() GetUserExternalIdArrayOutput {
	return o
}

func (o GetUserExternalIdArrayOutput) ToGetUserExternalIdArrayOutputWithContext(ctx context.Context) GetUserExternalIdArrayOutput {
	return o
}

func (o GetUserExternalIdArrayOutput) Index(i pulumi.IntInput) GetUserExternalIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserExternalId {
		return vs[0].([]GetUserExternalId)[vs[1].(int)]
	}).(GetUserExternalIdOutput)
}

type GetUserIm struct {
	CustomProtocol string `pulumi:"customProtocol"`
	CustomType     string `pulumi:"customType"`
	Im             string `pulumi:"im"`
	Primary        bool   `pulumi:"primary"`
	Protocol       string `pulumi:"protocol"`
	Type           string `pulumi:"type"`
}

// GetUserImInput is an input type that accepts GetUserImArgs and GetUserImOutput values.
// You can construct a concrete instance of `GetUserImInput` via:
//
//          GetUserImArgs{...}
type GetUserImInput interface {
	pulumi.Input

	ToGetUserImOutput() GetUserImOutput
	ToGetUserImOutputWithContext(context.Context) GetUserImOutput
}

type GetUserImArgs struct {
	CustomProtocol pulumi.StringInput `pulumi:"customProtocol"`
	CustomType     pulumi.StringInput `pulumi:"customType"`
	Im             pulumi.StringInput `pulumi:"im"`
	Primary        pulumi.BoolInput   `pulumi:"primary"`
	Protocol       pulumi.StringInput `pulumi:"protocol"`
	Type           pulumi.StringInput `pulumi:"type"`
}

func (GetUserImArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserIm)(nil)).Elem()
}

func (i GetUserImArgs) ToGetUserImOutput() GetUserImOutput {
	return i.ToGetUserImOutputWithContext(context.Background())
}

func (i GetUserImArgs) ToGetUserImOutputWithContext(ctx context.Context) GetUserImOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserImOutput)
}

// GetUserImArrayInput is an input type that accepts GetUserImArray and GetUserImArrayOutput values.
// You can construct a concrete instance of `GetUserImArrayInput` via:
//
//          GetUserImArray{ GetUserImArgs{...} }
type GetUserImArrayInput interface {
	pulumi.Input

	ToGetUserImArrayOutput() GetUserImArrayOutput
	ToGetUserImArrayOutputWithContext(context.Context) GetUserImArrayOutput
}

type GetUserImArray []GetUserImInput

func (GetUserImArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserIm)(nil)).Elem()
}

func (i GetUserImArray) ToGetUserImArrayOutput() GetUserImArrayOutput {
	return i.ToGetUserImArrayOutputWithContext(context.Background())
}

func (i GetUserImArray) ToGetUserImArrayOutputWithContext(ctx context.Context) GetUserImArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserImArrayOutput)
}

type GetUserImOutput struct{ *pulumi.OutputState }

func (GetUserImOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserIm)(nil)).Elem()
}

func (o GetUserImOutput) ToGetUserImOutput() GetUserImOutput {
	return o
}

func (o GetUserImOutput) ToGetUserImOutputWithContext(ctx context.Context) GetUserImOutput {
	return o
}

func (o GetUserImOutput) CustomProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserIm) string { return v.CustomProtocol }).(pulumi.StringOutput)
}

func (o GetUserImOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserIm) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserImOutput) Im() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserIm) string { return v.Im }).(pulumi.StringOutput)
}

func (o GetUserImOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserIm) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUserImOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserIm) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetUserImOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserIm) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserImArrayOutput struct{ *pulumi.OutputState }

func (GetUserImArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserIm)(nil)).Elem()
}

func (o GetUserImArrayOutput) ToGetUserImArrayOutput() GetUserImArrayOutput {
	return o
}

func (o GetUserImArrayOutput) ToGetUserImArrayOutputWithContext(ctx context.Context) GetUserImArrayOutput {
	return o
}

func (o GetUserImArrayOutput) Index(i pulumi.IntInput) GetUserImOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserIm {
		return vs[0].([]GetUserIm)[vs[1].(int)]
	}).(GetUserImOutput)
}

type GetUserKeyword struct {
	CustomType string `pulumi:"customType"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUserKeywordInput is an input type that accepts GetUserKeywordArgs and GetUserKeywordOutput values.
// You can construct a concrete instance of `GetUserKeywordInput` via:
//
//          GetUserKeywordArgs{...}
type GetUserKeywordInput interface {
	pulumi.Input

	ToGetUserKeywordOutput() GetUserKeywordOutput
	ToGetUserKeywordOutputWithContext(context.Context) GetUserKeywordOutput
}

type GetUserKeywordArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUserKeywordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserKeyword)(nil)).Elem()
}

func (i GetUserKeywordArgs) ToGetUserKeywordOutput() GetUserKeywordOutput {
	return i.ToGetUserKeywordOutputWithContext(context.Background())
}

func (i GetUserKeywordArgs) ToGetUserKeywordOutputWithContext(ctx context.Context) GetUserKeywordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserKeywordOutput)
}

// GetUserKeywordArrayInput is an input type that accepts GetUserKeywordArray and GetUserKeywordArrayOutput values.
// You can construct a concrete instance of `GetUserKeywordArrayInput` via:
//
//          GetUserKeywordArray{ GetUserKeywordArgs{...} }
type GetUserKeywordArrayInput interface {
	pulumi.Input

	ToGetUserKeywordArrayOutput() GetUserKeywordArrayOutput
	ToGetUserKeywordArrayOutputWithContext(context.Context) GetUserKeywordArrayOutput
}

type GetUserKeywordArray []GetUserKeywordInput

func (GetUserKeywordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserKeyword)(nil)).Elem()
}

func (i GetUserKeywordArray) ToGetUserKeywordArrayOutput() GetUserKeywordArrayOutput {
	return i.ToGetUserKeywordArrayOutputWithContext(context.Background())
}

func (i GetUserKeywordArray) ToGetUserKeywordArrayOutputWithContext(ctx context.Context) GetUserKeywordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserKeywordArrayOutput)
}

type GetUserKeywordOutput struct{ *pulumi.OutputState }

func (GetUserKeywordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserKeyword)(nil)).Elem()
}

func (o GetUserKeywordOutput) ToGetUserKeywordOutput() GetUserKeywordOutput {
	return o
}

func (o GetUserKeywordOutput) ToGetUserKeywordOutputWithContext(ctx context.Context) GetUserKeywordOutput {
	return o
}

func (o GetUserKeywordOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserKeyword) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserKeywordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserKeyword) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUserKeywordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserKeyword) string { return v.Value }).(pulumi.StringOutput)
}

type GetUserKeywordArrayOutput struct{ *pulumi.OutputState }

func (GetUserKeywordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserKeyword)(nil)).Elem()
}

func (o GetUserKeywordArrayOutput) ToGetUserKeywordArrayOutput() GetUserKeywordArrayOutput {
	return o
}

func (o GetUserKeywordArrayOutput) ToGetUserKeywordArrayOutputWithContext(ctx context.Context) GetUserKeywordArrayOutput {
	return o
}

func (o GetUserKeywordArrayOutput) Index(i pulumi.IntInput) GetUserKeywordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserKeyword {
		return vs[0].([]GetUserKeyword)[vs[1].(int)]
	}).(GetUserKeywordOutput)
}

type GetUserLanguage struct {
	CustomLanguage string `pulumi:"customLanguage"`
	LanguageCode   string `pulumi:"languageCode"`
	Preference     string `pulumi:"preference"`
}

// GetUserLanguageInput is an input type that accepts GetUserLanguageArgs and GetUserLanguageOutput values.
// You can construct a concrete instance of `GetUserLanguageInput` via:
//
//          GetUserLanguageArgs{...}
type GetUserLanguageInput interface {
	pulumi.Input

	ToGetUserLanguageOutput() GetUserLanguageOutput
	ToGetUserLanguageOutputWithContext(context.Context) GetUserLanguageOutput
}

type GetUserLanguageArgs struct {
	CustomLanguage pulumi.StringInput `pulumi:"customLanguage"`
	LanguageCode   pulumi.StringInput `pulumi:"languageCode"`
	Preference     pulumi.StringInput `pulumi:"preference"`
}

func (GetUserLanguageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLanguage)(nil)).Elem()
}

func (i GetUserLanguageArgs) ToGetUserLanguageOutput() GetUserLanguageOutput {
	return i.ToGetUserLanguageOutputWithContext(context.Background())
}

func (i GetUserLanguageArgs) ToGetUserLanguageOutputWithContext(ctx context.Context) GetUserLanguageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLanguageOutput)
}

// GetUserLanguageArrayInput is an input type that accepts GetUserLanguageArray and GetUserLanguageArrayOutput values.
// You can construct a concrete instance of `GetUserLanguageArrayInput` via:
//
//          GetUserLanguageArray{ GetUserLanguageArgs{...} }
type GetUserLanguageArrayInput interface {
	pulumi.Input

	ToGetUserLanguageArrayOutput() GetUserLanguageArrayOutput
	ToGetUserLanguageArrayOutputWithContext(context.Context) GetUserLanguageArrayOutput
}

type GetUserLanguageArray []GetUserLanguageInput

func (GetUserLanguageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLanguage)(nil)).Elem()
}

func (i GetUserLanguageArray) ToGetUserLanguageArrayOutput() GetUserLanguageArrayOutput {
	return i.ToGetUserLanguageArrayOutputWithContext(context.Background())
}

func (i GetUserLanguageArray) ToGetUserLanguageArrayOutputWithContext(ctx context.Context) GetUserLanguageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLanguageArrayOutput)
}

type GetUserLanguageOutput struct{ *pulumi.OutputState }

func (GetUserLanguageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLanguage)(nil)).Elem()
}

func (o GetUserLanguageOutput) ToGetUserLanguageOutput() GetUserLanguageOutput {
	return o
}

func (o GetUserLanguageOutput) ToGetUserLanguageOutputWithContext(ctx context.Context) GetUserLanguageOutput {
	return o
}

func (o GetUserLanguageOutput) CustomLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLanguage) string { return v.CustomLanguage }).(pulumi.StringOutput)
}

func (o GetUserLanguageOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLanguage) string { return v.LanguageCode }).(pulumi.StringOutput)
}

func (o GetUserLanguageOutput) Preference() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLanguage) string { return v.Preference }).(pulumi.StringOutput)
}

type GetUserLanguageArrayOutput struct{ *pulumi.OutputState }

func (GetUserLanguageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLanguage)(nil)).Elem()
}

func (o GetUserLanguageArrayOutput) ToGetUserLanguageArrayOutput() GetUserLanguageArrayOutput {
	return o
}

func (o GetUserLanguageArrayOutput) ToGetUserLanguageArrayOutputWithContext(ctx context.Context) GetUserLanguageArrayOutput {
	return o
}

func (o GetUserLanguageArrayOutput) Index(i pulumi.IntInput) GetUserLanguageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserLanguage {
		return vs[0].([]GetUserLanguage)[vs[1].(int)]
	}).(GetUserLanguageOutput)
}

type GetUserLocation struct {
	Area         string `pulumi:"area"`
	BuildingId   string `pulumi:"buildingId"`
	CustomType   string `pulumi:"customType"`
	DeskCode     string `pulumi:"deskCode"`
	FloorName    string `pulumi:"floorName"`
	FloorSection string `pulumi:"floorSection"`
	Type         string `pulumi:"type"`
}

// GetUserLocationInput is an input type that accepts GetUserLocationArgs and GetUserLocationOutput values.
// You can construct a concrete instance of `GetUserLocationInput` via:
//
//          GetUserLocationArgs{...}
type GetUserLocationInput interface {
	pulumi.Input

	ToGetUserLocationOutput() GetUserLocationOutput
	ToGetUserLocationOutputWithContext(context.Context) GetUserLocationOutput
}

type GetUserLocationArgs struct {
	Area         pulumi.StringInput `pulumi:"area"`
	BuildingId   pulumi.StringInput `pulumi:"buildingId"`
	CustomType   pulumi.StringInput `pulumi:"customType"`
	DeskCode     pulumi.StringInput `pulumi:"deskCode"`
	FloorName    pulumi.StringInput `pulumi:"floorName"`
	FloorSection pulumi.StringInput `pulumi:"floorSection"`
	Type         pulumi.StringInput `pulumi:"type"`
}

func (GetUserLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLocation)(nil)).Elem()
}

func (i GetUserLocationArgs) ToGetUserLocationOutput() GetUserLocationOutput {
	return i.ToGetUserLocationOutputWithContext(context.Background())
}

func (i GetUserLocationArgs) ToGetUserLocationOutputWithContext(ctx context.Context) GetUserLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLocationOutput)
}

// GetUserLocationArrayInput is an input type that accepts GetUserLocationArray and GetUserLocationArrayOutput values.
// You can construct a concrete instance of `GetUserLocationArrayInput` via:
//
//          GetUserLocationArray{ GetUserLocationArgs{...} }
type GetUserLocationArrayInput interface {
	pulumi.Input

	ToGetUserLocationArrayOutput() GetUserLocationArrayOutput
	ToGetUserLocationArrayOutputWithContext(context.Context) GetUserLocationArrayOutput
}

type GetUserLocationArray []GetUserLocationInput

func (GetUserLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLocation)(nil)).Elem()
}

func (i GetUserLocationArray) ToGetUserLocationArrayOutput() GetUserLocationArrayOutput {
	return i.ToGetUserLocationArrayOutputWithContext(context.Background())
}

func (i GetUserLocationArray) ToGetUserLocationArrayOutputWithContext(ctx context.Context) GetUserLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserLocationArrayOutput)
}

type GetUserLocationOutput struct{ *pulumi.OutputState }

func (GetUserLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserLocation)(nil)).Elem()
}

func (o GetUserLocationOutput) ToGetUserLocationOutput() GetUserLocationOutput {
	return o
}

func (o GetUserLocationOutput) ToGetUserLocationOutputWithContext(ctx context.Context) GetUserLocationOutput {
	return o
}

func (o GetUserLocationOutput) Area() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLocation) string { return v.Area }).(pulumi.StringOutput)
}

func (o GetUserLocationOutput) BuildingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLocation) string { return v.BuildingId }).(pulumi.StringOutput)
}

func (o GetUserLocationOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLocation) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserLocationOutput) DeskCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLocation) string { return v.DeskCode }).(pulumi.StringOutput)
}

func (o GetUserLocationOutput) FloorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLocation) string { return v.FloorName }).(pulumi.StringOutput)
}

func (o GetUserLocationOutput) FloorSection() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLocation) string { return v.FloorSection }).(pulumi.StringOutput)
}

func (o GetUserLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserLocation) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserLocationArrayOutput struct{ *pulumi.OutputState }

func (GetUserLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserLocation)(nil)).Elem()
}

func (o GetUserLocationArrayOutput) ToGetUserLocationArrayOutput() GetUserLocationArrayOutput {
	return o
}

func (o GetUserLocationArrayOutput) ToGetUserLocationArrayOutputWithContext(ctx context.Context) GetUserLocationArrayOutput {
	return o
}

func (o GetUserLocationArrayOutput) Index(i pulumi.IntInput) GetUserLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserLocation {
		return vs[0].([]GetUserLocation)[vs[1].(int)]
	}).(GetUserLocationOutput)
}

type GetUserName struct {
	FamilyName string `pulumi:"familyName"`
	FullName   string `pulumi:"fullName"`
	GivenName  string `pulumi:"givenName"`
}

// GetUserNameInput is an input type that accepts GetUserNameArgs and GetUserNameOutput values.
// You can construct a concrete instance of `GetUserNameInput` via:
//
//          GetUserNameArgs{...}
type GetUserNameInput interface {
	pulumi.Input

	ToGetUserNameOutput() GetUserNameOutput
	ToGetUserNameOutputWithContext(context.Context) GetUserNameOutput
}

type GetUserNameArgs struct {
	FamilyName pulumi.StringInput `pulumi:"familyName"`
	FullName   pulumi.StringInput `pulumi:"fullName"`
	GivenName  pulumi.StringInput `pulumi:"givenName"`
}

func (GetUserNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserName)(nil)).Elem()
}

func (i GetUserNameArgs) ToGetUserNameOutput() GetUserNameOutput {
	return i.ToGetUserNameOutputWithContext(context.Background())
}

func (i GetUserNameArgs) ToGetUserNameOutputWithContext(ctx context.Context) GetUserNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserNameOutput)
}

// GetUserNameArrayInput is an input type that accepts GetUserNameArray and GetUserNameArrayOutput values.
// You can construct a concrete instance of `GetUserNameArrayInput` via:
//
//          GetUserNameArray{ GetUserNameArgs{...} }
type GetUserNameArrayInput interface {
	pulumi.Input

	ToGetUserNameArrayOutput() GetUserNameArrayOutput
	ToGetUserNameArrayOutputWithContext(context.Context) GetUserNameArrayOutput
}

type GetUserNameArray []GetUserNameInput

func (GetUserNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserName)(nil)).Elem()
}

func (i GetUserNameArray) ToGetUserNameArrayOutput() GetUserNameArrayOutput {
	return i.ToGetUserNameArrayOutputWithContext(context.Background())
}

func (i GetUserNameArray) ToGetUserNameArrayOutputWithContext(ctx context.Context) GetUserNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserNameArrayOutput)
}

type GetUserNameOutput struct{ *pulumi.OutputState }

func (GetUserNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserName)(nil)).Elem()
}

func (o GetUserNameOutput) ToGetUserNameOutput() GetUserNameOutput {
	return o
}

func (o GetUserNameOutput) ToGetUserNameOutputWithContext(ctx context.Context) GetUserNameOutput {
	return o
}

func (o GetUserNameOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserName) string { return v.FamilyName }).(pulumi.StringOutput)
}

func (o GetUserNameOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserName) string { return v.FullName }).(pulumi.StringOutput)
}

func (o GetUserNameOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserName) string { return v.GivenName }).(pulumi.StringOutput)
}

type GetUserNameArrayOutput struct{ *pulumi.OutputState }

func (GetUserNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserName)(nil)).Elem()
}

func (o GetUserNameArrayOutput) ToGetUserNameArrayOutput() GetUserNameArrayOutput {
	return o
}

func (o GetUserNameArrayOutput) ToGetUserNameArrayOutputWithContext(ctx context.Context) GetUserNameArrayOutput {
	return o
}

func (o GetUserNameArrayOutput) Index(i pulumi.IntInput) GetUserNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserName {
		return vs[0].([]GetUserName)[vs[1].(int)]
	}).(GetUserNameOutput)
}

type GetUserOrganization struct {
	CostCenter         string `pulumi:"costCenter"`
	CustomType         string `pulumi:"customType"`
	Department         string `pulumi:"department"`
	Description        string `pulumi:"description"`
	Domain             string `pulumi:"domain"`
	FullTimeEquivalent int    `pulumi:"fullTimeEquivalent"`
	Location           string `pulumi:"location"`
	// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
	Name    string `pulumi:"name"`
	Primary bool   `pulumi:"primary"`
	Symbol  string `pulumi:"symbol"`
	Title   string `pulumi:"title"`
	Type    string `pulumi:"type"`
}

// GetUserOrganizationInput is an input type that accepts GetUserOrganizationArgs and GetUserOrganizationOutput values.
// You can construct a concrete instance of `GetUserOrganizationInput` via:
//
//          GetUserOrganizationArgs{...}
type GetUserOrganizationInput interface {
	pulumi.Input

	ToGetUserOrganizationOutput() GetUserOrganizationOutput
	ToGetUserOrganizationOutputWithContext(context.Context) GetUserOrganizationOutput
}

type GetUserOrganizationArgs struct {
	CostCenter         pulumi.StringInput `pulumi:"costCenter"`
	CustomType         pulumi.StringInput `pulumi:"customType"`
	Department         pulumi.StringInput `pulumi:"department"`
	Description        pulumi.StringInput `pulumi:"description"`
	Domain             pulumi.StringInput `pulumi:"domain"`
	FullTimeEquivalent pulumi.IntInput    `pulumi:"fullTimeEquivalent"`
	Location           pulumi.StringInput `pulumi:"location"`
	// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
	Name    pulumi.StringInput `pulumi:"name"`
	Primary pulumi.BoolInput   `pulumi:"primary"`
	Symbol  pulumi.StringInput `pulumi:"symbol"`
	Title   pulumi.StringInput `pulumi:"title"`
	Type    pulumi.StringInput `pulumi:"type"`
}

func (GetUserOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserOrganization)(nil)).Elem()
}

func (i GetUserOrganizationArgs) ToGetUserOrganizationOutput() GetUserOrganizationOutput {
	return i.ToGetUserOrganizationOutputWithContext(context.Background())
}

func (i GetUserOrganizationArgs) ToGetUserOrganizationOutputWithContext(ctx context.Context) GetUserOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserOrganizationOutput)
}

// GetUserOrganizationArrayInput is an input type that accepts GetUserOrganizationArray and GetUserOrganizationArrayOutput values.
// You can construct a concrete instance of `GetUserOrganizationArrayInput` via:
//
//          GetUserOrganizationArray{ GetUserOrganizationArgs{...} }
type GetUserOrganizationArrayInput interface {
	pulumi.Input

	ToGetUserOrganizationArrayOutput() GetUserOrganizationArrayOutput
	ToGetUserOrganizationArrayOutputWithContext(context.Context) GetUserOrganizationArrayOutput
}

type GetUserOrganizationArray []GetUserOrganizationInput

func (GetUserOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserOrganization)(nil)).Elem()
}

func (i GetUserOrganizationArray) ToGetUserOrganizationArrayOutput() GetUserOrganizationArrayOutput {
	return i.ToGetUserOrganizationArrayOutputWithContext(context.Background())
}

func (i GetUserOrganizationArray) ToGetUserOrganizationArrayOutputWithContext(ctx context.Context) GetUserOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserOrganizationArrayOutput)
}

type GetUserOrganizationOutput struct{ *pulumi.OutputState }

func (GetUserOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserOrganization)(nil)).Elem()
}

func (o GetUserOrganizationOutput) ToGetUserOrganizationOutput() GetUserOrganizationOutput {
	return o
}

func (o GetUserOrganizationOutput) ToGetUserOrganizationOutputWithContext(ctx context.Context) GetUserOrganizationOutput {
	return o
}

func (o GetUserOrganizationOutput) CostCenter() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.CostCenter }).(pulumi.StringOutput)
}

func (o GetUserOrganizationOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserOrganizationOutput) Department() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.Department }).(pulumi.StringOutput)
}

func (o GetUserOrganizationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetUserOrganizationOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetUserOrganizationOutput) FullTimeEquivalent() pulumi.IntOutput {
	return o.ApplyT(func(v GetUserOrganization) int { return v.FullTimeEquivalent }).(pulumi.IntOutput)
}

func (o GetUserOrganizationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.Location }).(pulumi.StringOutput)
}

// Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
func (o GetUserOrganizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetUserOrganizationOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserOrganization) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUserOrganizationOutput) Symbol() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.Symbol }).(pulumi.StringOutput)
}

func (o GetUserOrganizationOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetUserOrganizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserOrganization) string { return v.Type }).(pulumi.StringOutput)
}

type GetUserOrganizationArrayOutput struct{ *pulumi.OutputState }

func (GetUserOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserOrganization)(nil)).Elem()
}

func (o GetUserOrganizationArrayOutput) ToGetUserOrganizationArrayOutput() GetUserOrganizationArrayOutput {
	return o
}

func (o GetUserOrganizationArrayOutput) ToGetUserOrganizationArrayOutputWithContext(ctx context.Context) GetUserOrganizationArrayOutput {
	return o
}

func (o GetUserOrganizationArrayOutput) Index(i pulumi.IntInput) GetUserOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserOrganization {
		return vs[0].([]GetUserOrganization)[vs[1].(int)]
	}).(GetUserOrganizationOutput)
}

type GetUserPhone struct {
	CustomType string `pulumi:"customType"`
	Primary    bool   `pulumi:"primary"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUserPhoneInput is an input type that accepts GetUserPhoneArgs and GetUserPhoneOutput values.
// You can construct a concrete instance of `GetUserPhoneInput` via:
//
//          GetUserPhoneArgs{...}
type GetUserPhoneInput interface {
	pulumi.Input

	ToGetUserPhoneOutput() GetUserPhoneOutput
	ToGetUserPhoneOutputWithContext(context.Context) GetUserPhoneOutput
}

type GetUserPhoneArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Primary    pulumi.BoolInput   `pulumi:"primary"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUserPhoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPhone)(nil)).Elem()
}

func (i GetUserPhoneArgs) ToGetUserPhoneOutput() GetUserPhoneOutput {
	return i.ToGetUserPhoneOutputWithContext(context.Background())
}

func (i GetUserPhoneArgs) ToGetUserPhoneOutputWithContext(ctx context.Context) GetUserPhoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPhoneOutput)
}

// GetUserPhoneArrayInput is an input type that accepts GetUserPhoneArray and GetUserPhoneArrayOutput values.
// You can construct a concrete instance of `GetUserPhoneArrayInput` via:
//
//          GetUserPhoneArray{ GetUserPhoneArgs{...} }
type GetUserPhoneArrayInput interface {
	pulumi.Input

	ToGetUserPhoneArrayOutput() GetUserPhoneArrayOutput
	ToGetUserPhoneArrayOutputWithContext(context.Context) GetUserPhoneArrayOutput
}

type GetUserPhoneArray []GetUserPhoneInput

func (GetUserPhoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserPhone)(nil)).Elem()
}

func (i GetUserPhoneArray) ToGetUserPhoneArrayOutput() GetUserPhoneArrayOutput {
	return i.ToGetUserPhoneArrayOutputWithContext(context.Background())
}

func (i GetUserPhoneArray) ToGetUserPhoneArrayOutputWithContext(ctx context.Context) GetUserPhoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPhoneArrayOutput)
}

type GetUserPhoneOutput struct{ *pulumi.OutputState }

func (GetUserPhoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPhone)(nil)).Elem()
}

func (o GetUserPhoneOutput) ToGetUserPhoneOutput() GetUserPhoneOutput {
	return o
}

func (o GetUserPhoneOutput) ToGetUserPhoneOutputWithContext(ctx context.Context) GetUserPhoneOutput {
	return o
}

func (o GetUserPhoneOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPhone) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserPhoneOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserPhone) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUserPhoneOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPhone) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUserPhoneOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPhone) string { return v.Value }).(pulumi.StringOutput)
}

type GetUserPhoneArrayOutput struct{ *pulumi.OutputState }

func (GetUserPhoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserPhone)(nil)).Elem()
}

func (o GetUserPhoneArrayOutput) ToGetUserPhoneArrayOutput() GetUserPhoneArrayOutput {
	return o
}

func (o GetUserPhoneArrayOutput) ToGetUserPhoneArrayOutputWithContext(ctx context.Context) GetUserPhoneArrayOutput {
	return o
}

func (o GetUserPhoneArrayOutput) Index(i pulumi.IntInput) GetUserPhoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserPhone {
		return vs[0].([]GetUserPhone)[vs[1].(int)]
	}).(GetUserPhoneOutput)
}

type GetUserPosixAccount struct {
	AccountId           string `pulumi:"accountId"`
	Gecos               string `pulumi:"gecos"`
	Gid                 string `pulumi:"gid"`
	HomeDirectory       string `pulumi:"homeDirectory"`
	OperatingSystemType string `pulumi:"operatingSystemType"`
	Primary             bool   `pulumi:"primary"`
	Shell               string `pulumi:"shell"`
	SystemId            string `pulumi:"systemId"`
	Uid                 string `pulumi:"uid"`
	Username            string `pulumi:"username"`
}

// GetUserPosixAccountInput is an input type that accepts GetUserPosixAccountArgs and GetUserPosixAccountOutput values.
// You can construct a concrete instance of `GetUserPosixAccountInput` via:
//
//          GetUserPosixAccountArgs{...}
type GetUserPosixAccountInput interface {
	pulumi.Input

	ToGetUserPosixAccountOutput() GetUserPosixAccountOutput
	ToGetUserPosixAccountOutputWithContext(context.Context) GetUserPosixAccountOutput
}

type GetUserPosixAccountArgs struct {
	AccountId           pulumi.StringInput `pulumi:"accountId"`
	Gecos               pulumi.StringInput `pulumi:"gecos"`
	Gid                 pulumi.StringInput `pulumi:"gid"`
	HomeDirectory       pulumi.StringInput `pulumi:"homeDirectory"`
	OperatingSystemType pulumi.StringInput `pulumi:"operatingSystemType"`
	Primary             pulumi.BoolInput   `pulumi:"primary"`
	Shell               pulumi.StringInput `pulumi:"shell"`
	SystemId            pulumi.StringInput `pulumi:"systemId"`
	Uid                 pulumi.StringInput `pulumi:"uid"`
	Username            pulumi.StringInput `pulumi:"username"`
}

func (GetUserPosixAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPosixAccount)(nil)).Elem()
}

func (i GetUserPosixAccountArgs) ToGetUserPosixAccountOutput() GetUserPosixAccountOutput {
	return i.ToGetUserPosixAccountOutputWithContext(context.Background())
}

func (i GetUserPosixAccountArgs) ToGetUserPosixAccountOutputWithContext(ctx context.Context) GetUserPosixAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPosixAccountOutput)
}

// GetUserPosixAccountArrayInput is an input type that accepts GetUserPosixAccountArray and GetUserPosixAccountArrayOutput values.
// You can construct a concrete instance of `GetUserPosixAccountArrayInput` via:
//
//          GetUserPosixAccountArray{ GetUserPosixAccountArgs{...} }
type GetUserPosixAccountArrayInput interface {
	pulumi.Input

	ToGetUserPosixAccountArrayOutput() GetUserPosixAccountArrayOutput
	ToGetUserPosixAccountArrayOutputWithContext(context.Context) GetUserPosixAccountArrayOutput
}

type GetUserPosixAccountArray []GetUserPosixAccountInput

func (GetUserPosixAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserPosixAccount)(nil)).Elem()
}

func (i GetUserPosixAccountArray) ToGetUserPosixAccountArrayOutput() GetUserPosixAccountArrayOutput {
	return i.ToGetUserPosixAccountArrayOutputWithContext(context.Background())
}

func (i GetUserPosixAccountArray) ToGetUserPosixAccountArrayOutputWithContext(ctx context.Context) GetUserPosixAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserPosixAccountArrayOutput)
}

type GetUserPosixAccountOutput struct{ *pulumi.OutputState }

func (GetUserPosixAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserPosixAccount)(nil)).Elem()
}

func (o GetUserPosixAccountOutput) ToGetUserPosixAccountOutput() GetUserPosixAccountOutput {
	return o
}

func (o GetUserPosixAccountOutput) ToGetUserPosixAccountOutputWithContext(ctx context.Context) GetUserPosixAccountOutput {
	return o
}

func (o GetUserPosixAccountOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.AccountId }).(pulumi.StringOutput)
}

func (o GetUserPosixAccountOutput) Gecos() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.Gecos }).(pulumi.StringOutput)
}

func (o GetUserPosixAccountOutput) Gid() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.Gid }).(pulumi.StringOutput)
}

func (o GetUserPosixAccountOutput) HomeDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.HomeDirectory }).(pulumi.StringOutput)
}

func (o GetUserPosixAccountOutput) OperatingSystemType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.OperatingSystemType }).(pulumi.StringOutput)
}

func (o GetUserPosixAccountOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserPosixAccount) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUserPosixAccountOutput) Shell() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.Shell }).(pulumi.StringOutput)
}

func (o GetUserPosixAccountOutput) SystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.SystemId }).(pulumi.StringOutput)
}

func (o GetUserPosixAccountOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.Uid }).(pulumi.StringOutput)
}

func (o GetUserPosixAccountOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserPosixAccount) string { return v.Username }).(pulumi.StringOutput)
}

type GetUserPosixAccountArrayOutput struct{ *pulumi.OutputState }

func (GetUserPosixAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserPosixAccount)(nil)).Elem()
}

func (o GetUserPosixAccountArrayOutput) ToGetUserPosixAccountArrayOutput() GetUserPosixAccountArrayOutput {
	return o
}

func (o GetUserPosixAccountArrayOutput) ToGetUserPosixAccountArrayOutputWithContext(ctx context.Context) GetUserPosixAccountArrayOutput {
	return o
}

func (o GetUserPosixAccountArrayOutput) Index(i pulumi.IntInput) GetUserPosixAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserPosixAccount {
		return vs[0].([]GetUserPosixAccount)[vs[1].(int)]
	}).(GetUserPosixAccountOutput)
}

type GetUserRelation struct {
	CustomType string `pulumi:"customType"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUserRelationInput is an input type that accepts GetUserRelationArgs and GetUserRelationOutput values.
// You can construct a concrete instance of `GetUserRelationInput` via:
//
//          GetUserRelationArgs{...}
type GetUserRelationInput interface {
	pulumi.Input

	ToGetUserRelationOutput() GetUserRelationOutput
	ToGetUserRelationOutputWithContext(context.Context) GetUserRelationOutput
}

type GetUserRelationArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUserRelationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserRelation)(nil)).Elem()
}

func (i GetUserRelationArgs) ToGetUserRelationOutput() GetUserRelationOutput {
	return i.ToGetUserRelationOutputWithContext(context.Background())
}

func (i GetUserRelationArgs) ToGetUserRelationOutputWithContext(ctx context.Context) GetUserRelationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserRelationOutput)
}

// GetUserRelationArrayInput is an input type that accepts GetUserRelationArray and GetUserRelationArrayOutput values.
// You can construct a concrete instance of `GetUserRelationArrayInput` via:
//
//          GetUserRelationArray{ GetUserRelationArgs{...} }
type GetUserRelationArrayInput interface {
	pulumi.Input

	ToGetUserRelationArrayOutput() GetUserRelationArrayOutput
	ToGetUserRelationArrayOutputWithContext(context.Context) GetUserRelationArrayOutput
}

type GetUserRelationArray []GetUserRelationInput

func (GetUserRelationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserRelation)(nil)).Elem()
}

func (i GetUserRelationArray) ToGetUserRelationArrayOutput() GetUserRelationArrayOutput {
	return i.ToGetUserRelationArrayOutputWithContext(context.Background())
}

func (i GetUserRelationArray) ToGetUserRelationArrayOutputWithContext(ctx context.Context) GetUserRelationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserRelationArrayOutput)
}

type GetUserRelationOutput struct{ *pulumi.OutputState }

func (GetUserRelationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserRelation)(nil)).Elem()
}

func (o GetUserRelationOutput) ToGetUserRelationOutput() GetUserRelationOutput {
	return o
}

func (o GetUserRelationOutput) ToGetUserRelationOutputWithContext(ctx context.Context) GetUserRelationOutput {
	return o
}

func (o GetUserRelationOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserRelation) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserRelationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserRelation) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUserRelationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserRelation) string { return v.Value }).(pulumi.StringOutput)
}

type GetUserRelationArrayOutput struct{ *pulumi.OutputState }

func (GetUserRelationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserRelation)(nil)).Elem()
}

func (o GetUserRelationArrayOutput) ToGetUserRelationArrayOutput() GetUserRelationArrayOutput {
	return o
}

func (o GetUserRelationArrayOutput) ToGetUserRelationArrayOutputWithContext(ctx context.Context) GetUserRelationArrayOutput {
	return o
}

func (o GetUserRelationArrayOutput) Index(i pulumi.IntInput) GetUserRelationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserRelation {
		return vs[0].([]GetUserRelation)[vs[1].(int)]
	}).(GetUserRelationOutput)
}

type GetUserSshPublicKey struct {
	ExpirationTimeUsec string `pulumi:"expirationTimeUsec"`
	Fingerprint        string `pulumi:"fingerprint"`
	Key                string `pulumi:"key"`
}

// GetUserSshPublicKeyInput is an input type that accepts GetUserSshPublicKeyArgs and GetUserSshPublicKeyOutput values.
// You can construct a concrete instance of `GetUserSshPublicKeyInput` via:
//
//          GetUserSshPublicKeyArgs{...}
type GetUserSshPublicKeyInput interface {
	pulumi.Input

	ToGetUserSshPublicKeyOutput() GetUserSshPublicKeyOutput
	ToGetUserSshPublicKeyOutputWithContext(context.Context) GetUserSshPublicKeyOutput
}

type GetUserSshPublicKeyArgs struct {
	ExpirationTimeUsec pulumi.StringInput `pulumi:"expirationTimeUsec"`
	Fingerprint        pulumi.StringInput `pulumi:"fingerprint"`
	Key                pulumi.StringInput `pulumi:"key"`
}

func (GetUserSshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSshPublicKey)(nil)).Elem()
}

func (i GetUserSshPublicKeyArgs) ToGetUserSshPublicKeyOutput() GetUserSshPublicKeyOutput {
	return i.ToGetUserSshPublicKeyOutputWithContext(context.Background())
}

func (i GetUserSshPublicKeyArgs) ToGetUserSshPublicKeyOutputWithContext(ctx context.Context) GetUserSshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSshPublicKeyOutput)
}

// GetUserSshPublicKeyArrayInput is an input type that accepts GetUserSshPublicKeyArray and GetUserSshPublicKeyArrayOutput values.
// You can construct a concrete instance of `GetUserSshPublicKeyArrayInput` via:
//
//          GetUserSshPublicKeyArray{ GetUserSshPublicKeyArgs{...} }
type GetUserSshPublicKeyArrayInput interface {
	pulumi.Input

	ToGetUserSshPublicKeyArrayOutput() GetUserSshPublicKeyArrayOutput
	ToGetUserSshPublicKeyArrayOutputWithContext(context.Context) GetUserSshPublicKeyArrayOutput
}

type GetUserSshPublicKeyArray []GetUserSshPublicKeyInput

func (GetUserSshPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserSshPublicKey)(nil)).Elem()
}

func (i GetUserSshPublicKeyArray) ToGetUserSshPublicKeyArrayOutput() GetUserSshPublicKeyArrayOutput {
	return i.ToGetUserSshPublicKeyArrayOutputWithContext(context.Background())
}

func (i GetUserSshPublicKeyArray) ToGetUserSshPublicKeyArrayOutputWithContext(ctx context.Context) GetUserSshPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserSshPublicKeyArrayOutput)
}

type GetUserSshPublicKeyOutput struct{ *pulumi.OutputState }

func (GetUserSshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserSshPublicKey)(nil)).Elem()
}

func (o GetUserSshPublicKeyOutput) ToGetUserSshPublicKeyOutput() GetUserSshPublicKeyOutput {
	return o
}

func (o GetUserSshPublicKeyOutput) ToGetUserSshPublicKeyOutputWithContext(ctx context.Context) GetUserSshPublicKeyOutput {
	return o
}

func (o GetUserSshPublicKeyOutput) ExpirationTimeUsec() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshPublicKey) string { return v.ExpirationTimeUsec }).(pulumi.StringOutput)
}

func (o GetUserSshPublicKeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshPublicKey) string { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o GetUserSshPublicKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserSshPublicKey) string { return v.Key }).(pulumi.StringOutput)
}

type GetUserSshPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (GetUserSshPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserSshPublicKey)(nil)).Elem()
}

func (o GetUserSshPublicKeyArrayOutput) ToGetUserSshPublicKeyArrayOutput() GetUserSshPublicKeyArrayOutput {
	return o
}

func (o GetUserSshPublicKeyArrayOutput) ToGetUserSshPublicKeyArrayOutputWithContext(ctx context.Context) GetUserSshPublicKeyArrayOutput {
	return o
}

func (o GetUserSshPublicKeyArrayOutput) Index(i pulumi.IntInput) GetUserSshPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserSshPublicKey {
		return vs[0].([]GetUserSshPublicKey)[vs[1].(int)]
	}).(GetUserSshPublicKeyOutput)
}

type GetUserWebsite struct {
	CustomType string `pulumi:"customType"`
	Primary    bool   `pulumi:"primary"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUserWebsiteInput is an input type that accepts GetUserWebsiteArgs and GetUserWebsiteOutput values.
// You can construct a concrete instance of `GetUserWebsiteInput` via:
//
//          GetUserWebsiteArgs{...}
type GetUserWebsiteInput interface {
	pulumi.Input

	ToGetUserWebsiteOutput() GetUserWebsiteOutput
	ToGetUserWebsiteOutputWithContext(context.Context) GetUserWebsiteOutput
}

type GetUserWebsiteArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Primary    pulumi.BoolInput   `pulumi:"primary"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUserWebsiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserWebsite)(nil)).Elem()
}

func (i GetUserWebsiteArgs) ToGetUserWebsiteOutput() GetUserWebsiteOutput {
	return i.ToGetUserWebsiteOutputWithContext(context.Background())
}

func (i GetUserWebsiteArgs) ToGetUserWebsiteOutputWithContext(ctx context.Context) GetUserWebsiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserWebsiteOutput)
}

// GetUserWebsiteArrayInput is an input type that accepts GetUserWebsiteArray and GetUserWebsiteArrayOutput values.
// You can construct a concrete instance of `GetUserWebsiteArrayInput` via:
//
//          GetUserWebsiteArray{ GetUserWebsiteArgs{...} }
type GetUserWebsiteArrayInput interface {
	pulumi.Input

	ToGetUserWebsiteArrayOutput() GetUserWebsiteArrayOutput
	ToGetUserWebsiteArrayOutputWithContext(context.Context) GetUserWebsiteArrayOutput
}

type GetUserWebsiteArray []GetUserWebsiteInput

func (GetUserWebsiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserWebsite)(nil)).Elem()
}

func (i GetUserWebsiteArray) ToGetUserWebsiteArrayOutput() GetUserWebsiteArrayOutput {
	return i.ToGetUserWebsiteArrayOutputWithContext(context.Background())
}

func (i GetUserWebsiteArray) ToGetUserWebsiteArrayOutputWithContext(ctx context.Context) GetUserWebsiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUserWebsiteArrayOutput)
}

type GetUserWebsiteOutput struct{ *pulumi.OutputState }

func (GetUserWebsiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUserWebsite)(nil)).Elem()
}

func (o GetUserWebsiteOutput) ToGetUserWebsiteOutput() GetUserWebsiteOutput {
	return o
}

func (o GetUserWebsiteOutput) ToGetUserWebsiteOutputWithContext(ctx context.Context) GetUserWebsiteOutput {
	return o
}

func (o GetUserWebsiteOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserWebsite) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUserWebsiteOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUserWebsite) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUserWebsiteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserWebsite) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUserWebsiteOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUserWebsite) string { return v.Value }).(pulumi.StringOutput)
}

type GetUserWebsiteArrayOutput struct{ *pulumi.OutputState }

func (GetUserWebsiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUserWebsite)(nil)).Elem()
}

func (o GetUserWebsiteArrayOutput) ToGetUserWebsiteArrayOutput() GetUserWebsiteArrayOutput {
	return o
}

func (o GetUserWebsiteArrayOutput) ToGetUserWebsiteArrayOutputWithContext(ctx context.Context) GetUserWebsiteArrayOutput {
	return o
}

func (o GetUserWebsiteArrayOutput) Index(i pulumi.IntInput) GetUserWebsiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUserWebsite {
		return vs[0].([]GetUserWebsite)[vs[1].(int)]
	}).(GetUserWebsiteOutput)
}

type GetUsersUser struct {
	Addresses                 []GetUsersUserAddress      `pulumi:"addresses"`
	AgreedToTerms             bool                       `pulumi:"agreedToTerms"`
	Aliases                   []string                   `pulumi:"aliases"`
	Archived                  bool                       `pulumi:"archived"`
	ChangePasswordAtNextLogin bool                       `pulumi:"changePasswordAtNextLogin"`
	CreationTime              string                     `pulumi:"creationTime"`
	CustomSchemas             []GetUsersUserCustomSchema `pulumi:"customSchemas"`
	CustomerId                string                     `pulumi:"customerId"`
	DeletionTime              string                     `pulumi:"deletionTime"`
	Emails                    []GetUsersUserEmail        `pulumi:"emails"`
	Etag                      string                     `pulumi:"etag"`
	ExternalIds               []GetUsersUserExternalId   `pulumi:"externalIds"`
	HashFunction              string                     `pulumi:"hashFunction"`
	// The ID of this resource.
	Id                            string                     `pulumi:"id"`
	Ims                           []GetUsersUserIm           `pulumi:"ims"`
	IncludeInGlobalAddressList    bool                       `pulumi:"includeInGlobalAddressList"`
	IpAllowlist                   bool                       `pulumi:"ipAllowlist"`
	IsAdmin                       bool                       `pulumi:"isAdmin"`
	IsDelegatedAdmin              bool                       `pulumi:"isDelegatedAdmin"`
	IsEnforcedIn2StepVerification bool                       `pulumi:"isEnforcedIn2StepVerification"`
	IsEnrolledIn2StepVerification bool                       `pulumi:"isEnrolledIn2StepVerification"`
	IsMailboxSetup                bool                       `pulumi:"isMailboxSetup"`
	Keywords                      []GetUsersUserKeyword      `pulumi:"keywords"`
	Languages                     []GetUsersUserLanguage     `pulumi:"languages"`
	LastLoginTime                 string                     `pulumi:"lastLoginTime"`
	Locations                     []GetUsersUserLocation     `pulumi:"locations"`
	Names                         []GetUsersUserName         `pulumi:"names"`
	NonEditableAliases            []string                   `pulumi:"nonEditableAliases"`
	OrgUnitPath                   string                     `pulumi:"orgUnitPath"`
	Organizations                 []GetUsersUserOrganization `pulumi:"organizations"`
	Password                      string                     `pulumi:"password"`
	Phones                        []GetUsersUserPhone        `pulumi:"phones"`
	PosixAccounts                 []GetUsersUserPosixAccount `pulumi:"posixAccounts"`
	PrimaryEmail                  string                     `pulumi:"primaryEmail"`
	RecoveryEmail                 string                     `pulumi:"recoveryEmail"`
	RecoveryPhone                 string                     `pulumi:"recoveryPhone"`
	Relations                     []GetUsersUserRelation     `pulumi:"relations"`
	SshPublicKeys                 []GetUsersUserSshPublicKey `pulumi:"sshPublicKeys"`
	Suspended                     bool                       `pulumi:"suspended"`
	SuspensionReason              string                     `pulumi:"suspensionReason"`
	ThumbnailPhotoEtag            string                     `pulumi:"thumbnailPhotoEtag"`
	ThumbnailPhotoUrl             string                     `pulumi:"thumbnailPhotoUrl"`
	Websites                      []GetUsersUserWebsite      `pulumi:"websites"`
}

// GetUsersUserInput is an input type that accepts GetUsersUserArgs and GetUsersUserOutput values.
// You can construct a concrete instance of `GetUsersUserInput` via:
//
//          GetUsersUserArgs{...}
type GetUsersUserInput interface {
	pulumi.Input

	ToGetUsersUserOutput() GetUsersUserOutput
	ToGetUsersUserOutputWithContext(context.Context) GetUsersUserOutput
}

type GetUsersUserArgs struct {
	Addresses                 GetUsersUserAddressArrayInput      `pulumi:"addresses"`
	AgreedToTerms             pulumi.BoolInput                   `pulumi:"agreedToTerms"`
	Aliases                   pulumi.StringArrayInput            `pulumi:"aliases"`
	Archived                  pulumi.BoolInput                   `pulumi:"archived"`
	ChangePasswordAtNextLogin pulumi.BoolInput                   `pulumi:"changePasswordAtNextLogin"`
	CreationTime              pulumi.StringInput                 `pulumi:"creationTime"`
	CustomSchemas             GetUsersUserCustomSchemaArrayInput `pulumi:"customSchemas"`
	CustomerId                pulumi.StringInput                 `pulumi:"customerId"`
	DeletionTime              pulumi.StringInput                 `pulumi:"deletionTime"`
	Emails                    GetUsersUserEmailArrayInput        `pulumi:"emails"`
	Etag                      pulumi.StringInput                 `pulumi:"etag"`
	ExternalIds               GetUsersUserExternalIdArrayInput   `pulumi:"externalIds"`
	HashFunction              pulumi.StringInput                 `pulumi:"hashFunction"`
	// The ID of this resource.
	Id                            pulumi.StringInput                 `pulumi:"id"`
	Ims                           GetUsersUserImArrayInput           `pulumi:"ims"`
	IncludeInGlobalAddressList    pulumi.BoolInput                   `pulumi:"includeInGlobalAddressList"`
	IpAllowlist                   pulumi.BoolInput                   `pulumi:"ipAllowlist"`
	IsAdmin                       pulumi.BoolInput                   `pulumi:"isAdmin"`
	IsDelegatedAdmin              pulumi.BoolInput                   `pulumi:"isDelegatedAdmin"`
	IsEnforcedIn2StepVerification pulumi.BoolInput                   `pulumi:"isEnforcedIn2StepVerification"`
	IsEnrolledIn2StepVerification pulumi.BoolInput                   `pulumi:"isEnrolledIn2StepVerification"`
	IsMailboxSetup                pulumi.BoolInput                   `pulumi:"isMailboxSetup"`
	Keywords                      GetUsersUserKeywordArrayInput      `pulumi:"keywords"`
	Languages                     GetUsersUserLanguageArrayInput     `pulumi:"languages"`
	LastLoginTime                 pulumi.StringInput                 `pulumi:"lastLoginTime"`
	Locations                     GetUsersUserLocationArrayInput     `pulumi:"locations"`
	Names                         GetUsersUserNameArrayInput         `pulumi:"names"`
	NonEditableAliases            pulumi.StringArrayInput            `pulumi:"nonEditableAliases"`
	OrgUnitPath                   pulumi.StringInput                 `pulumi:"orgUnitPath"`
	Organizations                 GetUsersUserOrganizationArrayInput `pulumi:"organizations"`
	Password                      pulumi.StringInput                 `pulumi:"password"`
	Phones                        GetUsersUserPhoneArrayInput        `pulumi:"phones"`
	PosixAccounts                 GetUsersUserPosixAccountArrayInput `pulumi:"posixAccounts"`
	PrimaryEmail                  pulumi.StringInput                 `pulumi:"primaryEmail"`
	RecoveryEmail                 pulumi.StringInput                 `pulumi:"recoveryEmail"`
	RecoveryPhone                 pulumi.StringInput                 `pulumi:"recoveryPhone"`
	Relations                     GetUsersUserRelationArrayInput     `pulumi:"relations"`
	SshPublicKeys                 GetUsersUserSshPublicKeyArrayInput `pulumi:"sshPublicKeys"`
	Suspended                     pulumi.BoolInput                   `pulumi:"suspended"`
	SuspensionReason              pulumi.StringInput                 `pulumi:"suspensionReason"`
	ThumbnailPhotoEtag            pulumi.StringInput                 `pulumi:"thumbnailPhotoEtag"`
	ThumbnailPhotoUrl             pulumi.StringInput                 `pulumi:"thumbnailPhotoUrl"`
	Websites                      GetUsersUserWebsiteArrayInput      `pulumi:"websites"`
}

func (GetUsersUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArgs) ToGetUsersUserOutput() GetUsersUserOutput {
	return i.ToGetUsersUserOutputWithContext(context.Background())
}

func (i GetUsersUserArgs) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOutput)
}

// GetUsersUserArrayInput is an input type that accepts GetUsersUserArray and GetUsersUserArrayOutput values.
// You can construct a concrete instance of `GetUsersUserArrayInput` via:
//
//          GetUsersUserArray{ GetUsersUserArgs{...} }
type GetUsersUserArrayInput interface {
	pulumi.Input

	ToGetUsersUserArrayOutput() GetUsersUserArrayOutput
	ToGetUsersUserArrayOutputWithContext(context.Context) GetUsersUserArrayOutput
}

type GetUsersUserArray []GetUsersUserInput

func (GetUsersUserArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return i.ToGetUsersUserArrayOutputWithContext(context.Background())
}

func (i GetUsersUserArray) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserArrayOutput)
}

type GetUsersUserOutput struct{ *pulumi.OutputState }

func (GetUsersUserOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserOutput) ToGetUsersUserOutput() GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) ToGetUsersUserOutputWithContext(ctx context.Context) GetUsersUserOutput {
	return o
}

func (o GetUsersUserOutput) Addresses() GetUsersUserAddressArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserAddress { return v.Addresses }).(GetUsersUserAddressArrayOutput)
}

func (o GetUsersUserOutput) AgreedToTerms() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.AgreedToTerms }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) Aliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []string { return v.Aliases }).(pulumi.StringArrayOutput)
}

func (o GetUsersUserOutput) Archived() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.Archived }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) ChangePasswordAtNextLogin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.ChangePasswordAtNextLogin }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) CreationTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CreationTime }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) CustomSchemas() GetUsersUserCustomSchemaArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserCustomSchema { return v.CustomSchemas }).(GetUsersUserCustomSchemaArrayOutput)
}

func (o GetUsersUserOutput) CustomerId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.CustomerId }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) DeletionTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.DeletionTime }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Emails() GetUsersUserEmailArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserEmail { return v.Emails }).(GetUsersUserEmailArrayOutput)
}

func (o GetUsersUserOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Etag }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) ExternalIds() GetUsersUserExternalIdArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserExternalId { return v.ExternalIds }).(GetUsersUserExternalIdArrayOutput)
}

func (o GetUsersUserOutput) HashFunction() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.HashFunction }).(pulumi.StringOutput)
}

// The ID of this resource.
func (o GetUsersUserOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Id }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Ims() GetUsersUserImArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserIm { return v.Ims }).(GetUsersUserImArrayOutput)
}

func (o GetUsersUserOutput) IncludeInGlobalAddressList() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IncludeInGlobalAddressList }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) IpAllowlist() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IpAllowlist }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) IsAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsAdmin }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) IsDelegatedAdmin() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsDelegatedAdmin }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) IsEnforcedIn2StepVerification() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsEnforcedIn2StepVerification }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) IsEnrolledIn2StepVerification() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsEnrolledIn2StepVerification }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) IsMailboxSetup() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.IsMailboxSetup }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) Keywords() GetUsersUserKeywordArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserKeyword { return v.Keywords }).(GetUsersUserKeywordArrayOutput)
}

func (o GetUsersUserOutput) Languages() GetUsersUserLanguageArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserLanguage { return v.Languages }).(GetUsersUserLanguageArrayOutput)
}

func (o GetUsersUserOutput) LastLoginTime() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.LastLoginTime }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Locations() GetUsersUserLocationArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserLocation { return v.Locations }).(GetUsersUserLocationArrayOutput)
}

func (o GetUsersUserOutput) Names() GetUsersUserNameArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserName { return v.Names }).(GetUsersUserNameArrayOutput)
}

func (o GetUsersUserOutput) NonEditableAliases() pulumi.StringArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []string { return v.NonEditableAliases }).(pulumi.StringArrayOutput)
}

func (o GetUsersUserOutput) OrgUnitPath() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.OrgUnitPath }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Organizations() GetUsersUserOrganizationArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserOrganization { return v.Organizations }).(GetUsersUserOrganizationArrayOutput)
}

func (o GetUsersUserOutput) Password() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.Password }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Phones() GetUsersUserPhoneArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserPhone { return v.Phones }).(GetUsersUserPhoneArrayOutput)
}

func (o GetUsersUserOutput) PosixAccounts() GetUsersUserPosixAccountArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserPosixAccount { return v.PosixAccounts }).(GetUsersUserPosixAccountArrayOutput)
}

func (o GetUsersUserOutput) PrimaryEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.PrimaryEmail }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) RecoveryEmail() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.RecoveryEmail }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) RecoveryPhone() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.RecoveryPhone }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Relations() GetUsersUserRelationArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserRelation { return v.Relations }).(GetUsersUserRelationArrayOutput)
}

func (o GetUsersUserOutput) SshPublicKeys() GetUsersUserSshPublicKeyArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserSshPublicKey { return v.SshPublicKeys }).(GetUsersUserSshPublicKeyArrayOutput)
}

func (o GetUsersUserOutput) Suspended() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUser) bool { return v.Suspended }).(pulumi.BoolOutput)
}

func (o GetUsersUserOutput) SuspensionReason() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.SuspensionReason }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) ThumbnailPhotoEtag() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ThumbnailPhotoEtag }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) ThumbnailPhotoUrl() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUser) string { return v.ThumbnailPhotoUrl }).(pulumi.StringOutput)
}

func (o GetUsersUserOutput) Websites() GetUsersUserWebsiteArrayOutput {
	return o.ApplyT(func(v GetUsersUser) []GetUsersUserWebsite { return v.Websites }).(GetUsersUserWebsiteArrayOutput)
}

type GetUsersUserArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUser)(nil)).Elem()
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutput() GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) ToGetUsersUserArrayOutputWithContext(ctx context.Context) GetUsersUserArrayOutput {
	return o
}

func (o GetUsersUserArrayOutput) Index(i pulumi.IntInput) GetUsersUserOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUser {
		return vs[0].([]GetUsersUser)[vs[1].(int)]
	}).(GetUsersUserOutput)
}

type GetUsersUserAddress struct {
	Country            string `pulumi:"country"`
	CountryCode        string `pulumi:"countryCode"`
	CustomType         string `pulumi:"customType"`
	ExtendedAddress    string `pulumi:"extendedAddress"`
	Formatted          string `pulumi:"formatted"`
	Locality           string `pulumi:"locality"`
	PoBox              string `pulumi:"poBox"`
	PostalCode         string `pulumi:"postalCode"`
	Primary            bool   `pulumi:"primary"`
	Region             string `pulumi:"region"`
	SourceIsStructured bool   `pulumi:"sourceIsStructured"`
	StreetAddress      string `pulumi:"streetAddress"`
	Type               string `pulumi:"type"`
}

// GetUsersUserAddressInput is an input type that accepts GetUsersUserAddressArgs and GetUsersUserAddressOutput values.
// You can construct a concrete instance of `GetUsersUserAddressInput` via:
//
//          GetUsersUserAddressArgs{...}
type GetUsersUserAddressInput interface {
	pulumi.Input

	ToGetUsersUserAddressOutput() GetUsersUserAddressOutput
	ToGetUsersUserAddressOutputWithContext(context.Context) GetUsersUserAddressOutput
}

type GetUsersUserAddressArgs struct {
	Country            pulumi.StringInput `pulumi:"country"`
	CountryCode        pulumi.StringInput `pulumi:"countryCode"`
	CustomType         pulumi.StringInput `pulumi:"customType"`
	ExtendedAddress    pulumi.StringInput `pulumi:"extendedAddress"`
	Formatted          pulumi.StringInput `pulumi:"formatted"`
	Locality           pulumi.StringInput `pulumi:"locality"`
	PoBox              pulumi.StringInput `pulumi:"poBox"`
	PostalCode         pulumi.StringInput `pulumi:"postalCode"`
	Primary            pulumi.BoolInput   `pulumi:"primary"`
	Region             pulumi.StringInput `pulumi:"region"`
	SourceIsStructured pulumi.BoolInput   `pulumi:"sourceIsStructured"`
	StreetAddress      pulumi.StringInput `pulumi:"streetAddress"`
	Type               pulumi.StringInput `pulumi:"type"`
}

func (GetUsersUserAddressArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserAddress)(nil)).Elem()
}

func (i GetUsersUserAddressArgs) ToGetUsersUserAddressOutput() GetUsersUserAddressOutput {
	return i.ToGetUsersUserAddressOutputWithContext(context.Background())
}

func (i GetUsersUserAddressArgs) ToGetUsersUserAddressOutputWithContext(ctx context.Context) GetUsersUserAddressOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserAddressOutput)
}

// GetUsersUserAddressArrayInput is an input type that accepts GetUsersUserAddressArray and GetUsersUserAddressArrayOutput values.
// You can construct a concrete instance of `GetUsersUserAddressArrayInput` via:
//
//          GetUsersUserAddressArray{ GetUsersUserAddressArgs{...} }
type GetUsersUserAddressArrayInput interface {
	pulumi.Input

	ToGetUsersUserAddressArrayOutput() GetUsersUserAddressArrayOutput
	ToGetUsersUserAddressArrayOutputWithContext(context.Context) GetUsersUserAddressArrayOutput
}

type GetUsersUserAddressArray []GetUsersUserAddressInput

func (GetUsersUserAddressArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserAddress)(nil)).Elem()
}

func (i GetUsersUserAddressArray) ToGetUsersUserAddressArrayOutput() GetUsersUserAddressArrayOutput {
	return i.ToGetUsersUserAddressArrayOutputWithContext(context.Background())
}

func (i GetUsersUserAddressArray) ToGetUsersUserAddressArrayOutputWithContext(ctx context.Context) GetUsersUserAddressArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserAddressArrayOutput)
}

type GetUsersUserAddressOutput struct{ *pulumi.OutputState }

func (GetUsersUserAddressOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserAddress)(nil)).Elem()
}

func (o GetUsersUserAddressOutput) ToGetUsersUserAddressOutput() GetUsersUserAddressOutput {
	return o
}

func (o GetUsersUserAddressOutput) ToGetUsersUserAddressOutputWithContext(ctx context.Context) GetUsersUserAddressOutput {
	return o
}

func (o GetUsersUserAddressOutput) Country() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.Country }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) CountryCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.CountryCode }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) ExtendedAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.ExtendedAddress }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) Formatted() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.Formatted }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) Locality() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.Locality }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) PoBox() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.PoBox }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) PostalCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.PostalCode }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUserAddress) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUsersUserAddressOutput) Region() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.Region }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) SourceIsStructured() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUserAddress) bool { return v.SourceIsStructured }).(pulumi.BoolOutput)
}

func (o GetUsersUserAddressOutput) StreetAddress() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.StreetAddress }).(pulumi.StringOutput)
}

func (o GetUsersUserAddressOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserAddress) string { return v.Type }).(pulumi.StringOutput)
}

type GetUsersUserAddressArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserAddressArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserAddress)(nil)).Elem()
}

func (o GetUsersUserAddressArrayOutput) ToGetUsersUserAddressArrayOutput() GetUsersUserAddressArrayOutput {
	return o
}

func (o GetUsersUserAddressArrayOutput) ToGetUsersUserAddressArrayOutputWithContext(ctx context.Context) GetUsersUserAddressArrayOutput {
	return o
}

func (o GetUsersUserAddressArrayOutput) Index(i pulumi.IntInput) GetUsersUserAddressOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserAddress {
		return vs[0].([]GetUsersUserAddress)[vs[1].(int)]
	}).(GetUsersUserAddressOutput)
}

type GetUsersUserCustomSchema struct {
	SchemaName   string            `pulumi:"schemaName"`
	SchemaValues map[string]string `pulumi:"schemaValues"`
}

// GetUsersUserCustomSchemaInput is an input type that accepts GetUsersUserCustomSchemaArgs and GetUsersUserCustomSchemaOutput values.
// You can construct a concrete instance of `GetUsersUserCustomSchemaInput` via:
//
//          GetUsersUserCustomSchemaArgs{...}
type GetUsersUserCustomSchemaInput interface {
	pulumi.Input

	ToGetUsersUserCustomSchemaOutput() GetUsersUserCustomSchemaOutput
	ToGetUsersUserCustomSchemaOutputWithContext(context.Context) GetUsersUserCustomSchemaOutput
}

type GetUsersUserCustomSchemaArgs struct {
	SchemaName   pulumi.StringInput    `pulumi:"schemaName"`
	SchemaValues pulumi.StringMapInput `pulumi:"schemaValues"`
}

func (GetUsersUserCustomSchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserCustomSchema)(nil)).Elem()
}

func (i GetUsersUserCustomSchemaArgs) ToGetUsersUserCustomSchemaOutput() GetUsersUserCustomSchemaOutput {
	return i.ToGetUsersUserCustomSchemaOutputWithContext(context.Background())
}

func (i GetUsersUserCustomSchemaArgs) ToGetUsersUserCustomSchemaOutputWithContext(ctx context.Context) GetUsersUserCustomSchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserCustomSchemaOutput)
}

// GetUsersUserCustomSchemaArrayInput is an input type that accepts GetUsersUserCustomSchemaArray and GetUsersUserCustomSchemaArrayOutput values.
// You can construct a concrete instance of `GetUsersUserCustomSchemaArrayInput` via:
//
//          GetUsersUserCustomSchemaArray{ GetUsersUserCustomSchemaArgs{...} }
type GetUsersUserCustomSchemaArrayInput interface {
	pulumi.Input

	ToGetUsersUserCustomSchemaArrayOutput() GetUsersUserCustomSchemaArrayOutput
	ToGetUsersUserCustomSchemaArrayOutputWithContext(context.Context) GetUsersUserCustomSchemaArrayOutput
}

type GetUsersUserCustomSchemaArray []GetUsersUserCustomSchemaInput

func (GetUsersUserCustomSchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserCustomSchema)(nil)).Elem()
}

func (i GetUsersUserCustomSchemaArray) ToGetUsersUserCustomSchemaArrayOutput() GetUsersUserCustomSchemaArrayOutput {
	return i.ToGetUsersUserCustomSchemaArrayOutputWithContext(context.Background())
}

func (i GetUsersUserCustomSchemaArray) ToGetUsersUserCustomSchemaArrayOutputWithContext(ctx context.Context) GetUsersUserCustomSchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserCustomSchemaArrayOutput)
}

type GetUsersUserCustomSchemaOutput struct{ *pulumi.OutputState }

func (GetUsersUserCustomSchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserCustomSchema)(nil)).Elem()
}

func (o GetUsersUserCustomSchemaOutput) ToGetUsersUserCustomSchemaOutput() GetUsersUserCustomSchemaOutput {
	return o
}

func (o GetUsersUserCustomSchemaOutput) ToGetUsersUserCustomSchemaOutputWithContext(ctx context.Context) GetUsersUserCustomSchemaOutput {
	return o
}

func (o GetUsersUserCustomSchemaOutput) SchemaName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserCustomSchema) string { return v.SchemaName }).(pulumi.StringOutput)
}

func (o GetUsersUserCustomSchemaOutput) SchemaValues() pulumi.StringMapOutput {
	return o.ApplyT(func(v GetUsersUserCustomSchema) map[string]string { return v.SchemaValues }).(pulumi.StringMapOutput)
}

type GetUsersUserCustomSchemaArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserCustomSchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserCustomSchema)(nil)).Elem()
}

func (o GetUsersUserCustomSchemaArrayOutput) ToGetUsersUserCustomSchemaArrayOutput() GetUsersUserCustomSchemaArrayOutput {
	return o
}

func (o GetUsersUserCustomSchemaArrayOutput) ToGetUsersUserCustomSchemaArrayOutputWithContext(ctx context.Context) GetUsersUserCustomSchemaArrayOutput {
	return o
}

func (o GetUsersUserCustomSchemaArrayOutput) Index(i pulumi.IntInput) GetUsersUserCustomSchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserCustomSchema {
		return vs[0].([]GetUsersUserCustomSchema)[vs[1].(int)]
	}).(GetUsersUserCustomSchemaOutput)
}

type GetUsersUserEmail struct {
	Address    string `pulumi:"address"`
	CustomType string `pulumi:"customType"`
	Primary    bool   `pulumi:"primary"`
	Type       string `pulumi:"type"`
}

// GetUsersUserEmailInput is an input type that accepts GetUsersUserEmailArgs and GetUsersUserEmailOutput values.
// You can construct a concrete instance of `GetUsersUserEmailInput` via:
//
//          GetUsersUserEmailArgs{...}
type GetUsersUserEmailInput interface {
	pulumi.Input

	ToGetUsersUserEmailOutput() GetUsersUserEmailOutput
	ToGetUsersUserEmailOutputWithContext(context.Context) GetUsersUserEmailOutput
}

type GetUsersUserEmailArgs struct {
	Address    pulumi.StringInput `pulumi:"address"`
	CustomType pulumi.StringInput `pulumi:"customType"`
	Primary    pulumi.BoolInput   `pulumi:"primary"`
	Type       pulumi.StringInput `pulumi:"type"`
}

func (GetUsersUserEmailArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserEmail)(nil)).Elem()
}

func (i GetUsersUserEmailArgs) ToGetUsersUserEmailOutput() GetUsersUserEmailOutput {
	return i.ToGetUsersUserEmailOutputWithContext(context.Background())
}

func (i GetUsersUserEmailArgs) ToGetUsersUserEmailOutputWithContext(ctx context.Context) GetUsersUserEmailOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserEmailOutput)
}

// GetUsersUserEmailArrayInput is an input type that accepts GetUsersUserEmailArray and GetUsersUserEmailArrayOutput values.
// You can construct a concrete instance of `GetUsersUserEmailArrayInput` via:
//
//          GetUsersUserEmailArray{ GetUsersUserEmailArgs{...} }
type GetUsersUserEmailArrayInput interface {
	pulumi.Input

	ToGetUsersUserEmailArrayOutput() GetUsersUserEmailArrayOutput
	ToGetUsersUserEmailArrayOutputWithContext(context.Context) GetUsersUserEmailArrayOutput
}

type GetUsersUserEmailArray []GetUsersUserEmailInput

func (GetUsersUserEmailArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserEmail)(nil)).Elem()
}

func (i GetUsersUserEmailArray) ToGetUsersUserEmailArrayOutput() GetUsersUserEmailArrayOutput {
	return i.ToGetUsersUserEmailArrayOutputWithContext(context.Background())
}

func (i GetUsersUserEmailArray) ToGetUsersUserEmailArrayOutputWithContext(ctx context.Context) GetUsersUserEmailArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserEmailArrayOutput)
}

type GetUsersUserEmailOutput struct{ *pulumi.OutputState }

func (GetUsersUserEmailOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserEmail)(nil)).Elem()
}

func (o GetUsersUserEmailOutput) ToGetUsersUserEmailOutput() GetUsersUserEmailOutput {
	return o
}

func (o GetUsersUserEmailOutput) ToGetUsersUserEmailOutputWithContext(ctx context.Context) GetUsersUserEmailOutput {
	return o
}

func (o GetUsersUserEmailOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserEmail) string { return v.Address }).(pulumi.StringOutput)
}

func (o GetUsersUserEmailOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserEmail) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserEmailOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUserEmail) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUsersUserEmailOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserEmail) string { return v.Type }).(pulumi.StringOutput)
}

type GetUsersUserEmailArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserEmailArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserEmail)(nil)).Elem()
}

func (o GetUsersUserEmailArrayOutput) ToGetUsersUserEmailArrayOutput() GetUsersUserEmailArrayOutput {
	return o
}

func (o GetUsersUserEmailArrayOutput) ToGetUsersUserEmailArrayOutputWithContext(ctx context.Context) GetUsersUserEmailArrayOutput {
	return o
}

func (o GetUsersUserEmailArrayOutput) Index(i pulumi.IntInput) GetUsersUserEmailOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserEmail {
		return vs[0].([]GetUsersUserEmail)[vs[1].(int)]
	}).(GetUsersUserEmailOutput)
}

type GetUsersUserExternalId struct {
	CustomType string `pulumi:"customType"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUsersUserExternalIdInput is an input type that accepts GetUsersUserExternalIdArgs and GetUsersUserExternalIdOutput values.
// You can construct a concrete instance of `GetUsersUserExternalIdInput` via:
//
//          GetUsersUserExternalIdArgs{...}
type GetUsersUserExternalIdInput interface {
	pulumi.Input

	ToGetUsersUserExternalIdOutput() GetUsersUserExternalIdOutput
	ToGetUsersUserExternalIdOutputWithContext(context.Context) GetUsersUserExternalIdOutput
}

type GetUsersUserExternalIdArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUsersUserExternalIdArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserExternalId)(nil)).Elem()
}

func (i GetUsersUserExternalIdArgs) ToGetUsersUserExternalIdOutput() GetUsersUserExternalIdOutput {
	return i.ToGetUsersUserExternalIdOutputWithContext(context.Background())
}

func (i GetUsersUserExternalIdArgs) ToGetUsersUserExternalIdOutputWithContext(ctx context.Context) GetUsersUserExternalIdOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserExternalIdOutput)
}

// GetUsersUserExternalIdArrayInput is an input type that accepts GetUsersUserExternalIdArray and GetUsersUserExternalIdArrayOutput values.
// You can construct a concrete instance of `GetUsersUserExternalIdArrayInput` via:
//
//          GetUsersUserExternalIdArray{ GetUsersUserExternalIdArgs{...} }
type GetUsersUserExternalIdArrayInput interface {
	pulumi.Input

	ToGetUsersUserExternalIdArrayOutput() GetUsersUserExternalIdArrayOutput
	ToGetUsersUserExternalIdArrayOutputWithContext(context.Context) GetUsersUserExternalIdArrayOutput
}

type GetUsersUserExternalIdArray []GetUsersUserExternalIdInput

func (GetUsersUserExternalIdArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserExternalId)(nil)).Elem()
}

func (i GetUsersUserExternalIdArray) ToGetUsersUserExternalIdArrayOutput() GetUsersUserExternalIdArrayOutput {
	return i.ToGetUsersUserExternalIdArrayOutputWithContext(context.Background())
}

func (i GetUsersUserExternalIdArray) ToGetUsersUserExternalIdArrayOutputWithContext(ctx context.Context) GetUsersUserExternalIdArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserExternalIdArrayOutput)
}

type GetUsersUserExternalIdOutput struct{ *pulumi.OutputState }

func (GetUsersUserExternalIdOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserExternalId)(nil)).Elem()
}

func (o GetUsersUserExternalIdOutput) ToGetUsersUserExternalIdOutput() GetUsersUserExternalIdOutput {
	return o
}

func (o GetUsersUserExternalIdOutput) ToGetUsersUserExternalIdOutputWithContext(ctx context.Context) GetUsersUserExternalIdOutput {
	return o
}

func (o GetUsersUserExternalIdOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserExternalId) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserExternalIdOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserExternalId) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUsersUserExternalIdOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserExternalId) string { return v.Value }).(pulumi.StringOutput)
}

type GetUsersUserExternalIdArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserExternalIdArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserExternalId)(nil)).Elem()
}

func (o GetUsersUserExternalIdArrayOutput) ToGetUsersUserExternalIdArrayOutput() GetUsersUserExternalIdArrayOutput {
	return o
}

func (o GetUsersUserExternalIdArrayOutput) ToGetUsersUserExternalIdArrayOutputWithContext(ctx context.Context) GetUsersUserExternalIdArrayOutput {
	return o
}

func (o GetUsersUserExternalIdArrayOutput) Index(i pulumi.IntInput) GetUsersUserExternalIdOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserExternalId {
		return vs[0].([]GetUsersUserExternalId)[vs[1].(int)]
	}).(GetUsersUserExternalIdOutput)
}

type GetUsersUserIm struct {
	CustomProtocol string `pulumi:"customProtocol"`
	CustomType     string `pulumi:"customType"`
	Im             string `pulumi:"im"`
	Primary        bool   `pulumi:"primary"`
	Protocol       string `pulumi:"protocol"`
	Type           string `pulumi:"type"`
}

// GetUsersUserImInput is an input type that accepts GetUsersUserImArgs and GetUsersUserImOutput values.
// You can construct a concrete instance of `GetUsersUserImInput` via:
//
//          GetUsersUserImArgs{...}
type GetUsersUserImInput interface {
	pulumi.Input

	ToGetUsersUserImOutput() GetUsersUserImOutput
	ToGetUsersUserImOutputWithContext(context.Context) GetUsersUserImOutput
}

type GetUsersUserImArgs struct {
	CustomProtocol pulumi.StringInput `pulumi:"customProtocol"`
	CustomType     pulumi.StringInput `pulumi:"customType"`
	Im             pulumi.StringInput `pulumi:"im"`
	Primary        pulumi.BoolInput   `pulumi:"primary"`
	Protocol       pulumi.StringInput `pulumi:"protocol"`
	Type           pulumi.StringInput `pulumi:"type"`
}

func (GetUsersUserImArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserIm)(nil)).Elem()
}

func (i GetUsersUserImArgs) ToGetUsersUserImOutput() GetUsersUserImOutput {
	return i.ToGetUsersUserImOutputWithContext(context.Background())
}

func (i GetUsersUserImArgs) ToGetUsersUserImOutputWithContext(ctx context.Context) GetUsersUserImOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserImOutput)
}

// GetUsersUserImArrayInput is an input type that accepts GetUsersUserImArray and GetUsersUserImArrayOutput values.
// You can construct a concrete instance of `GetUsersUserImArrayInput` via:
//
//          GetUsersUserImArray{ GetUsersUserImArgs{...} }
type GetUsersUserImArrayInput interface {
	pulumi.Input

	ToGetUsersUserImArrayOutput() GetUsersUserImArrayOutput
	ToGetUsersUserImArrayOutputWithContext(context.Context) GetUsersUserImArrayOutput
}

type GetUsersUserImArray []GetUsersUserImInput

func (GetUsersUserImArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserIm)(nil)).Elem()
}

func (i GetUsersUserImArray) ToGetUsersUserImArrayOutput() GetUsersUserImArrayOutput {
	return i.ToGetUsersUserImArrayOutputWithContext(context.Background())
}

func (i GetUsersUserImArray) ToGetUsersUserImArrayOutputWithContext(ctx context.Context) GetUsersUserImArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserImArrayOutput)
}

type GetUsersUserImOutput struct{ *pulumi.OutputState }

func (GetUsersUserImOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserIm)(nil)).Elem()
}

func (o GetUsersUserImOutput) ToGetUsersUserImOutput() GetUsersUserImOutput {
	return o
}

func (o GetUsersUserImOutput) ToGetUsersUserImOutputWithContext(ctx context.Context) GetUsersUserImOutput {
	return o
}

func (o GetUsersUserImOutput) CustomProtocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserIm) string { return v.CustomProtocol }).(pulumi.StringOutput)
}

func (o GetUsersUserImOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserIm) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserImOutput) Im() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserIm) string { return v.Im }).(pulumi.StringOutput)
}

func (o GetUsersUserImOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUserIm) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUsersUserImOutput) Protocol() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserIm) string { return v.Protocol }).(pulumi.StringOutput)
}

func (o GetUsersUserImOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserIm) string { return v.Type }).(pulumi.StringOutput)
}

type GetUsersUserImArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserImArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserIm)(nil)).Elem()
}

func (o GetUsersUserImArrayOutput) ToGetUsersUserImArrayOutput() GetUsersUserImArrayOutput {
	return o
}

func (o GetUsersUserImArrayOutput) ToGetUsersUserImArrayOutputWithContext(ctx context.Context) GetUsersUserImArrayOutput {
	return o
}

func (o GetUsersUserImArrayOutput) Index(i pulumi.IntInput) GetUsersUserImOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserIm {
		return vs[0].([]GetUsersUserIm)[vs[1].(int)]
	}).(GetUsersUserImOutput)
}

type GetUsersUserKeyword struct {
	CustomType string `pulumi:"customType"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUsersUserKeywordInput is an input type that accepts GetUsersUserKeywordArgs and GetUsersUserKeywordOutput values.
// You can construct a concrete instance of `GetUsersUserKeywordInput` via:
//
//          GetUsersUserKeywordArgs{...}
type GetUsersUserKeywordInput interface {
	pulumi.Input

	ToGetUsersUserKeywordOutput() GetUsersUserKeywordOutput
	ToGetUsersUserKeywordOutputWithContext(context.Context) GetUsersUserKeywordOutput
}

type GetUsersUserKeywordArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUsersUserKeywordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserKeyword)(nil)).Elem()
}

func (i GetUsersUserKeywordArgs) ToGetUsersUserKeywordOutput() GetUsersUserKeywordOutput {
	return i.ToGetUsersUserKeywordOutputWithContext(context.Background())
}

func (i GetUsersUserKeywordArgs) ToGetUsersUserKeywordOutputWithContext(ctx context.Context) GetUsersUserKeywordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserKeywordOutput)
}

// GetUsersUserKeywordArrayInput is an input type that accepts GetUsersUserKeywordArray and GetUsersUserKeywordArrayOutput values.
// You can construct a concrete instance of `GetUsersUserKeywordArrayInput` via:
//
//          GetUsersUserKeywordArray{ GetUsersUserKeywordArgs{...} }
type GetUsersUserKeywordArrayInput interface {
	pulumi.Input

	ToGetUsersUserKeywordArrayOutput() GetUsersUserKeywordArrayOutput
	ToGetUsersUserKeywordArrayOutputWithContext(context.Context) GetUsersUserKeywordArrayOutput
}

type GetUsersUserKeywordArray []GetUsersUserKeywordInput

func (GetUsersUserKeywordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserKeyword)(nil)).Elem()
}

func (i GetUsersUserKeywordArray) ToGetUsersUserKeywordArrayOutput() GetUsersUserKeywordArrayOutput {
	return i.ToGetUsersUserKeywordArrayOutputWithContext(context.Background())
}

func (i GetUsersUserKeywordArray) ToGetUsersUserKeywordArrayOutputWithContext(ctx context.Context) GetUsersUserKeywordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserKeywordArrayOutput)
}

type GetUsersUserKeywordOutput struct{ *pulumi.OutputState }

func (GetUsersUserKeywordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserKeyword)(nil)).Elem()
}

func (o GetUsersUserKeywordOutput) ToGetUsersUserKeywordOutput() GetUsersUserKeywordOutput {
	return o
}

func (o GetUsersUserKeywordOutput) ToGetUsersUserKeywordOutputWithContext(ctx context.Context) GetUsersUserKeywordOutput {
	return o
}

func (o GetUsersUserKeywordOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserKeyword) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserKeywordOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserKeyword) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUsersUserKeywordOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserKeyword) string { return v.Value }).(pulumi.StringOutput)
}

type GetUsersUserKeywordArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserKeywordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserKeyword)(nil)).Elem()
}

func (o GetUsersUserKeywordArrayOutput) ToGetUsersUserKeywordArrayOutput() GetUsersUserKeywordArrayOutput {
	return o
}

func (o GetUsersUserKeywordArrayOutput) ToGetUsersUserKeywordArrayOutputWithContext(ctx context.Context) GetUsersUserKeywordArrayOutput {
	return o
}

func (o GetUsersUserKeywordArrayOutput) Index(i pulumi.IntInput) GetUsersUserKeywordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserKeyword {
		return vs[0].([]GetUsersUserKeyword)[vs[1].(int)]
	}).(GetUsersUserKeywordOutput)
}

type GetUsersUserLanguage struct {
	CustomLanguage string `pulumi:"customLanguage"`
	LanguageCode   string `pulumi:"languageCode"`
	Preference     string `pulumi:"preference"`
}

// GetUsersUserLanguageInput is an input type that accepts GetUsersUserLanguageArgs and GetUsersUserLanguageOutput values.
// You can construct a concrete instance of `GetUsersUserLanguageInput` via:
//
//          GetUsersUserLanguageArgs{...}
type GetUsersUserLanguageInput interface {
	pulumi.Input

	ToGetUsersUserLanguageOutput() GetUsersUserLanguageOutput
	ToGetUsersUserLanguageOutputWithContext(context.Context) GetUsersUserLanguageOutput
}

type GetUsersUserLanguageArgs struct {
	CustomLanguage pulumi.StringInput `pulumi:"customLanguage"`
	LanguageCode   pulumi.StringInput `pulumi:"languageCode"`
	Preference     pulumi.StringInput `pulumi:"preference"`
}

func (GetUsersUserLanguageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLanguage)(nil)).Elem()
}

func (i GetUsersUserLanguageArgs) ToGetUsersUserLanguageOutput() GetUsersUserLanguageOutput {
	return i.ToGetUsersUserLanguageOutputWithContext(context.Background())
}

func (i GetUsersUserLanguageArgs) ToGetUsersUserLanguageOutputWithContext(ctx context.Context) GetUsersUserLanguageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLanguageOutput)
}

// GetUsersUserLanguageArrayInput is an input type that accepts GetUsersUserLanguageArray and GetUsersUserLanguageArrayOutput values.
// You can construct a concrete instance of `GetUsersUserLanguageArrayInput` via:
//
//          GetUsersUserLanguageArray{ GetUsersUserLanguageArgs{...} }
type GetUsersUserLanguageArrayInput interface {
	pulumi.Input

	ToGetUsersUserLanguageArrayOutput() GetUsersUserLanguageArrayOutput
	ToGetUsersUserLanguageArrayOutputWithContext(context.Context) GetUsersUserLanguageArrayOutput
}

type GetUsersUserLanguageArray []GetUsersUserLanguageInput

func (GetUsersUserLanguageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLanguage)(nil)).Elem()
}

func (i GetUsersUserLanguageArray) ToGetUsersUserLanguageArrayOutput() GetUsersUserLanguageArrayOutput {
	return i.ToGetUsersUserLanguageArrayOutputWithContext(context.Background())
}

func (i GetUsersUserLanguageArray) ToGetUsersUserLanguageArrayOutputWithContext(ctx context.Context) GetUsersUserLanguageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLanguageArrayOutput)
}

type GetUsersUserLanguageOutput struct{ *pulumi.OutputState }

func (GetUsersUserLanguageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLanguage)(nil)).Elem()
}

func (o GetUsersUserLanguageOutput) ToGetUsersUserLanguageOutput() GetUsersUserLanguageOutput {
	return o
}

func (o GetUsersUserLanguageOutput) ToGetUsersUserLanguageOutputWithContext(ctx context.Context) GetUsersUserLanguageOutput {
	return o
}

func (o GetUsersUserLanguageOutput) CustomLanguage() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLanguage) string { return v.CustomLanguage }).(pulumi.StringOutput)
}

func (o GetUsersUserLanguageOutput) LanguageCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLanguage) string { return v.LanguageCode }).(pulumi.StringOutput)
}

func (o GetUsersUserLanguageOutput) Preference() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLanguage) string { return v.Preference }).(pulumi.StringOutput)
}

type GetUsersUserLanguageArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserLanguageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLanguage)(nil)).Elem()
}

func (o GetUsersUserLanguageArrayOutput) ToGetUsersUserLanguageArrayOutput() GetUsersUserLanguageArrayOutput {
	return o
}

func (o GetUsersUserLanguageArrayOutput) ToGetUsersUserLanguageArrayOutputWithContext(ctx context.Context) GetUsersUserLanguageArrayOutput {
	return o
}

func (o GetUsersUserLanguageArrayOutput) Index(i pulumi.IntInput) GetUsersUserLanguageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserLanguage {
		return vs[0].([]GetUsersUserLanguage)[vs[1].(int)]
	}).(GetUsersUserLanguageOutput)
}

type GetUsersUserLocation struct {
	Area         string `pulumi:"area"`
	BuildingId   string `pulumi:"buildingId"`
	CustomType   string `pulumi:"customType"`
	DeskCode     string `pulumi:"deskCode"`
	FloorName    string `pulumi:"floorName"`
	FloorSection string `pulumi:"floorSection"`
	Type         string `pulumi:"type"`
}

// GetUsersUserLocationInput is an input type that accepts GetUsersUserLocationArgs and GetUsersUserLocationOutput values.
// You can construct a concrete instance of `GetUsersUserLocationInput` via:
//
//          GetUsersUserLocationArgs{...}
type GetUsersUserLocationInput interface {
	pulumi.Input

	ToGetUsersUserLocationOutput() GetUsersUserLocationOutput
	ToGetUsersUserLocationOutputWithContext(context.Context) GetUsersUserLocationOutput
}

type GetUsersUserLocationArgs struct {
	Area         pulumi.StringInput `pulumi:"area"`
	BuildingId   pulumi.StringInput `pulumi:"buildingId"`
	CustomType   pulumi.StringInput `pulumi:"customType"`
	DeskCode     pulumi.StringInput `pulumi:"deskCode"`
	FloorName    pulumi.StringInput `pulumi:"floorName"`
	FloorSection pulumi.StringInput `pulumi:"floorSection"`
	Type         pulumi.StringInput `pulumi:"type"`
}

func (GetUsersUserLocationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLocation)(nil)).Elem()
}

func (i GetUsersUserLocationArgs) ToGetUsersUserLocationOutput() GetUsersUserLocationOutput {
	return i.ToGetUsersUserLocationOutputWithContext(context.Background())
}

func (i GetUsersUserLocationArgs) ToGetUsersUserLocationOutputWithContext(ctx context.Context) GetUsersUserLocationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLocationOutput)
}

// GetUsersUserLocationArrayInput is an input type that accepts GetUsersUserLocationArray and GetUsersUserLocationArrayOutput values.
// You can construct a concrete instance of `GetUsersUserLocationArrayInput` via:
//
//          GetUsersUserLocationArray{ GetUsersUserLocationArgs{...} }
type GetUsersUserLocationArrayInput interface {
	pulumi.Input

	ToGetUsersUserLocationArrayOutput() GetUsersUserLocationArrayOutput
	ToGetUsersUserLocationArrayOutputWithContext(context.Context) GetUsersUserLocationArrayOutput
}

type GetUsersUserLocationArray []GetUsersUserLocationInput

func (GetUsersUserLocationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLocation)(nil)).Elem()
}

func (i GetUsersUserLocationArray) ToGetUsersUserLocationArrayOutput() GetUsersUserLocationArrayOutput {
	return i.ToGetUsersUserLocationArrayOutputWithContext(context.Background())
}

func (i GetUsersUserLocationArray) ToGetUsersUserLocationArrayOutputWithContext(ctx context.Context) GetUsersUserLocationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserLocationArrayOutput)
}

type GetUsersUserLocationOutput struct{ *pulumi.OutputState }

func (GetUsersUserLocationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserLocation)(nil)).Elem()
}

func (o GetUsersUserLocationOutput) ToGetUsersUserLocationOutput() GetUsersUserLocationOutput {
	return o
}

func (o GetUsersUserLocationOutput) ToGetUsersUserLocationOutputWithContext(ctx context.Context) GetUsersUserLocationOutput {
	return o
}

func (o GetUsersUserLocationOutput) Area() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLocation) string { return v.Area }).(pulumi.StringOutput)
}

func (o GetUsersUserLocationOutput) BuildingId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLocation) string { return v.BuildingId }).(pulumi.StringOutput)
}

func (o GetUsersUserLocationOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLocation) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserLocationOutput) DeskCode() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLocation) string { return v.DeskCode }).(pulumi.StringOutput)
}

func (o GetUsersUserLocationOutput) FloorName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLocation) string { return v.FloorName }).(pulumi.StringOutput)
}

func (o GetUsersUserLocationOutput) FloorSection() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLocation) string { return v.FloorSection }).(pulumi.StringOutput)
}

func (o GetUsersUserLocationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserLocation) string { return v.Type }).(pulumi.StringOutput)
}

type GetUsersUserLocationArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserLocationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserLocation)(nil)).Elem()
}

func (o GetUsersUserLocationArrayOutput) ToGetUsersUserLocationArrayOutput() GetUsersUserLocationArrayOutput {
	return o
}

func (o GetUsersUserLocationArrayOutput) ToGetUsersUserLocationArrayOutputWithContext(ctx context.Context) GetUsersUserLocationArrayOutput {
	return o
}

func (o GetUsersUserLocationArrayOutput) Index(i pulumi.IntInput) GetUsersUserLocationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserLocation {
		return vs[0].([]GetUsersUserLocation)[vs[1].(int)]
	}).(GetUsersUserLocationOutput)
}

type GetUsersUserName struct {
	FamilyName string `pulumi:"familyName"`
	FullName   string `pulumi:"fullName"`
	GivenName  string `pulumi:"givenName"`
}

// GetUsersUserNameInput is an input type that accepts GetUsersUserNameArgs and GetUsersUserNameOutput values.
// You can construct a concrete instance of `GetUsersUserNameInput` via:
//
//          GetUsersUserNameArgs{...}
type GetUsersUserNameInput interface {
	pulumi.Input

	ToGetUsersUserNameOutput() GetUsersUserNameOutput
	ToGetUsersUserNameOutputWithContext(context.Context) GetUsersUserNameOutput
}

type GetUsersUserNameArgs struct {
	FamilyName pulumi.StringInput `pulumi:"familyName"`
	FullName   pulumi.StringInput `pulumi:"fullName"`
	GivenName  pulumi.StringInput `pulumi:"givenName"`
}

func (GetUsersUserNameArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserName)(nil)).Elem()
}

func (i GetUsersUserNameArgs) ToGetUsersUserNameOutput() GetUsersUserNameOutput {
	return i.ToGetUsersUserNameOutputWithContext(context.Background())
}

func (i GetUsersUserNameArgs) ToGetUsersUserNameOutputWithContext(ctx context.Context) GetUsersUserNameOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserNameOutput)
}

// GetUsersUserNameArrayInput is an input type that accepts GetUsersUserNameArray and GetUsersUserNameArrayOutput values.
// You can construct a concrete instance of `GetUsersUserNameArrayInput` via:
//
//          GetUsersUserNameArray{ GetUsersUserNameArgs{...} }
type GetUsersUserNameArrayInput interface {
	pulumi.Input

	ToGetUsersUserNameArrayOutput() GetUsersUserNameArrayOutput
	ToGetUsersUserNameArrayOutputWithContext(context.Context) GetUsersUserNameArrayOutput
}

type GetUsersUserNameArray []GetUsersUserNameInput

func (GetUsersUserNameArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserName)(nil)).Elem()
}

func (i GetUsersUserNameArray) ToGetUsersUserNameArrayOutput() GetUsersUserNameArrayOutput {
	return i.ToGetUsersUserNameArrayOutputWithContext(context.Background())
}

func (i GetUsersUserNameArray) ToGetUsersUserNameArrayOutputWithContext(ctx context.Context) GetUsersUserNameArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserNameArrayOutput)
}

type GetUsersUserNameOutput struct{ *pulumi.OutputState }

func (GetUsersUserNameOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserName)(nil)).Elem()
}

func (o GetUsersUserNameOutput) ToGetUsersUserNameOutput() GetUsersUserNameOutput {
	return o
}

func (o GetUsersUserNameOutput) ToGetUsersUserNameOutputWithContext(ctx context.Context) GetUsersUserNameOutput {
	return o
}

func (o GetUsersUserNameOutput) FamilyName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserName) string { return v.FamilyName }).(pulumi.StringOutput)
}

func (o GetUsersUserNameOutput) FullName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserName) string { return v.FullName }).(pulumi.StringOutput)
}

func (o GetUsersUserNameOutput) GivenName() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserName) string { return v.GivenName }).(pulumi.StringOutput)
}

type GetUsersUserNameArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserNameArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserName)(nil)).Elem()
}

func (o GetUsersUserNameArrayOutput) ToGetUsersUserNameArrayOutput() GetUsersUserNameArrayOutput {
	return o
}

func (o GetUsersUserNameArrayOutput) ToGetUsersUserNameArrayOutputWithContext(ctx context.Context) GetUsersUserNameArrayOutput {
	return o
}

func (o GetUsersUserNameArrayOutput) Index(i pulumi.IntInput) GetUsersUserNameOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserName {
		return vs[0].([]GetUsersUserName)[vs[1].(int)]
	}).(GetUsersUserNameOutput)
}

type GetUsersUserOrganization struct {
	CostCenter         string `pulumi:"costCenter"`
	CustomType         string `pulumi:"customType"`
	Department         string `pulumi:"department"`
	Description        string `pulumi:"description"`
	Domain             string `pulumi:"domain"`
	FullTimeEquivalent int    `pulumi:"fullTimeEquivalent"`
	Location           string `pulumi:"location"`
	Name               string `pulumi:"name"`
	Primary            bool   `pulumi:"primary"`
	Symbol             string `pulumi:"symbol"`
	Title              string `pulumi:"title"`
	Type               string `pulumi:"type"`
}

// GetUsersUserOrganizationInput is an input type that accepts GetUsersUserOrganizationArgs and GetUsersUserOrganizationOutput values.
// You can construct a concrete instance of `GetUsersUserOrganizationInput` via:
//
//          GetUsersUserOrganizationArgs{...}
type GetUsersUserOrganizationInput interface {
	pulumi.Input

	ToGetUsersUserOrganizationOutput() GetUsersUserOrganizationOutput
	ToGetUsersUserOrganizationOutputWithContext(context.Context) GetUsersUserOrganizationOutput
}

type GetUsersUserOrganizationArgs struct {
	CostCenter         pulumi.StringInput `pulumi:"costCenter"`
	CustomType         pulumi.StringInput `pulumi:"customType"`
	Department         pulumi.StringInput `pulumi:"department"`
	Description        pulumi.StringInput `pulumi:"description"`
	Domain             pulumi.StringInput `pulumi:"domain"`
	FullTimeEquivalent pulumi.IntInput    `pulumi:"fullTimeEquivalent"`
	Location           pulumi.StringInput `pulumi:"location"`
	Name               pulumi.StringInput `pulumi:"name"`
	Primary            pulumi.BoolInput   `pulumi:"primary"`
	Symbol             pulumi.StringInput `pulumi:"symbol"`
	Title              pulumi.StringInput `pulumi:"title"`
	Type               pulumi.StringInput `pulumi:"type"`
}

func (GetUsersUserOrganizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserOrganization)(nil)).Elem()
}

func (i GetUsersUserOrganizationArgs) ToGetUsersUserOrganizationOutput() GetUsersUserOrganizationOutput {
	return i.ToGetUsersUserOrganizationOutputWithContext(context.Background())
}

func (i GetUsersUserOrganizationArgs) ToGetUsersUserOrganizationOutputWithContext(ctx context.Context) GetUsersUserOrganizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOrganizationOutput)
}

// GetUsersUserOrganizationArrayInput is an input type that accepts GetUsersUserOrganizationArray and GetUsersUserOrganizationArrayOutput values.
// You can construct a concrete instance of `GetUsersUserOrganizationArrayInput` via:
//
//          GetUsersUserOrganizationArray{ GetUsersUserOrganizationArgs{...} }
type GetUsersUserOrganizationArrayInput interface {
	pulumi.Input

	ToGetUsersUserOrganizationArrayOutput() GetUsersUserOrganizationArrayOutput
	ToGetUsersUserOrganizationArrayOutputWithContext(context.Context) GetUsersUserOrganizationArrayOutput
}

type GetUsersUserOrganizationArray []GetUsersUserOrganizationInput

func (GetUsersUserOrganizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserOrganization)(nil)).Elem()
}

func (i GetUsersUserOrganizationArray) ToGetUsersUserOrganizationArrayOutput() GetUsersUserOrganizationArrayOutput {
	return i.ToGetUsersUserOrganizationArrayOutputWithContext(context.Background())
}

func (i GetUsersUserOrganizationArray) ToGetUsersUserOrganizationArrayOutputWithContext(ctx context.Context) GetUsersUserOrganizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserOrganizationArrayOutput)
}

type GetUsersUserOrganizationOutput struct{ *pulumi.OutputState }

func (GetUsersUserOrganizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserOrganization)(nil)).Elem()
}

func (o GetUsersUserOrganizationOutput) ToGetUsersUserOrganizationOutput() GetUsersUserOrganizationOutput {
	return o
}

func (o GetUsersUserOrganizationOutput) ToGetUsersUserOrganizationOutputWithContext(ctx context.Context) GetUsersUserOrganizationOutput {
	return o
}

func (o GetUsersUserOrganizationOutput) CostCenter() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.CostCenter }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) Department() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.Department }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.Description }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) Domain() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.Domain }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) FullTimeEquivalent() pulumi.IntOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) int { return v.FullTimeEquivalent }).(pulumi.IntOutput)
}

func (o GetUsersUserOrganizationOutput) Location() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.Location }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.Name }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUsersUserOrganizationOutput) Symbol() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.Symbol }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) Title() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.Title }).(pulumi.StringOutput)
}

func (o GetUsersUserOrganizationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserOrganization) string { return v.Type }).(pulumi.StringOutput)
}

type GetUsersUserOrganizationArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserOrganizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserOrganization)(nil)).Elem()
}

func (o GetUsersUserOrganizationArrayOutput) ToGetUsersUserOrganizationArrayOutput() GetUsersUserOrganizationArrayOutput {
	return o
}

func (o GetUsersUserOrganizationArrayOutput) ToGetUsersUserOrganizationArrayOutputWithContext(ctx context.Context) GetUsersUserOrganizationArrayOutput {
	return o
}

func (o GetUsersUserOrganizationArrayOutput) Index(i pulumi.IntInput) GetUsersUserOrganizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserOrganization {
		return vs[0].([]GetUsersUserOrganization)[vs[1].(int)]
	}).(GetUsersUserOrganizationOutput)
}

type GetUsersUserPhone struct {
	CustomType string `pulumi:"customType"`
	Primary    bool   `pulumi:"primary"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUsersUserPhoneInput is an input type that accepts GetUsersUserPhoneArgs and GetUsersUserPhoneOutput values.
// You can construct a concrete instance of `GetUsersUserPhoneInput` via:
//
//          GetUsersUserPhoneArgs{...}
type GetUsersUserPhoneInput interface {
	pulumi.Input

	ToGetUsersUserPhoneOutput() GetUsersUserPhoneOutput
	ToGetUsersUserPhoneOutputWithContext(context.Context) GetUsersUserPhoneOutput
}

type GetUsersUserPhoneArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Primary    pulumi.BoolInput   `pulumi:"primary"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUsersUserPhoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserPhone)(nil)).Elem()
}

func (i GetUsersUserPhoneArgs) ToGetUsersUserPhoneOutput() GetUsersUserPhoneOutput {
	return i.ToGetUsersUserPhoneOutputWithContext(context.Background())
}

func (i GetUsersUserPhoneArgs) ToGetUsersUserPhoneOutputWithContext(ctx context.Context) GetUsersUserPhoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserPhoneOutput)
}

// GetUsersUserPhoneArrayInput is an input type that accepts GetUsersUserPhoneArray and GetUsersUserPhoneArrayOutput values.
// You can construct a concrete instance of `GetUsersUserPhoneArrayInput` via:
//
//          GetUsersUserPhoneArray{ GetUsersUserPhoneArgs{...} }
type GetUsersUserPhoneArrayInput interface {
	pulumi.Input

	ToGetUsersUserPhoneArrayOutput() GetUsersUserPhoneArrayOutput
	ToGetUsersUserPhoneArrayOutputWithContext(context.Context) GetUsersUserPhoneArrayOutput
}

type GetUsersUserPhoneArray []GetUsersUserPhoneInput

func (GetUsersUserPhoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserPhone)(nil)).Elem()
}

func (i GetUsersUserPhoneArray) ToGetUsersUserPhoneArrayOutput() GetUsersUserPhoneArrayOutput {
	return i.ToGetUsersUserPhoneArrayOutputWithContext(context.Background())
}

func (i GetUsersUserPhoneArray) ToGetUsersUserPhoneArrayOutputWithContext(ctx context.Context) GetUsersUserPhoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserPhoneArrayOutput)
}

type GetUsersUserPhoneOutput struct{ *pulumi.OutputState }

func (GetUsersUserPhoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserPhone)(nil)).Elem()
}

func (o GetUsersUserPhoneOutput) ToGetUsersUserPhoneOutput() GetUsersUserPhoneOutput {
	return o
}

func (o GetUsersUserPhoneOutput) ToGetUsersUserPhoneOutputWithContext(ctx context.Context) GetUsersUserPhoneOutput {
	return o
}

func (o GetUsersUserPhoneOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPhone) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserPhoneOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUserPhone) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUsersUserPhoneOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPhone) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUsersUserPhoneOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPhone) string { return v.Value }).(pulumi.StringOutput)
}

type GetUsersUserPhoneArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserPhoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserPhone)(nil)).Elem()
}

func (o GetUsersUserPhoneArrayOutput) ToGetUsersUserPhoneArrayOutput() GetUsersUserPhoneArrayOutput {
	return o
}

func (o GetUsersUserPhoneArrayOutput) ToGetUsersUserPhoneArrayOutputWithContext(ctx context.Context) GetUsersUserPhoneArrayOutput {
	return o
}

func (o GetUsersUserPhoneArrayOutput) Index(i pulumi.IntInput) GetUsersUserPhoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserPhone {
		return vs[0].([]GetUsersUserPhone)[vs[1].(int)]
	}).(GetUsersUserPhoneOutput)
}

type GetUsersUserPosixAccount struct {
	AccountId           string `pulumi:"accountId"`
	Gecos               string `pulumi:"gecos"`
	Gid                 string `pulumi:"gid"`
	HomeDirectory       string `pulumi:"homeDirectory"`
	OperatingSystemType string `pulumi:"operatingSystemType"`
	Primary             bool   `pulumi:"primary"`
	Shell               string `pulumi:"shell"`
	SystemId            string `pulumi:"systemId"`
	Uid                 string `pulumi:"uid"`
	Username            string `pulumi:"username"`
}

// GetUsersUserPosixAccountInput is an input type that accepts GetUsersUserPosixAccountArgs and GetUsersUserPosixAccountOutput values.
// You can construct a concrete instance of `GetUsersUserPosixAccountInput` via:
//
//          GetUsersUserPosixAccountArgs{...}
type GetUsersUserPosixAccountInput interface {
	pulumi.Input

	ToGetUsersUserPosixAccountOutput() GetUsersUserPosixAccountOutput
	ToGetUsersUserPosixAccountOutputWithContext(context.Context) GetUsersUserPosixAccountOutput
}

type GetUsersUserPosixAccountArgs struct {
	AccountId           pulumi.StringInput `pulumi:"accountId"`
	Gecos               pulumi.StringInput `pulumi:"gecos"`
	Gid                 pulumi.StringInput `pulumi:"gid"`
	HomeDirectory       pulumi.StringInput `pulumi:"homeDirectory"`
	OperatingSystemType pulumi.StringInput `pulumi:"operatingSystemType"`
	Primary             pulumi.BoolInput   `pulumi:"primary"`
	Shell               pulumi.StringInput `pulumi:"shell"`
	SystemId            pulumi.StringInput `pulumi:"systemId"`
	Uid                 pulumi.StringInput `pulumi:"uid"`
	Username            pulumi.StringInput `pulumi:"username"`
}

func (GetUsersUserPosixAccountArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserPosixAccount)(nil)).Elem()
}

func (i GetUsersUserPosixAccountArgs) ToGetUsersUserPosixAccountOutput() GetUsersUserPosixAccountOutput {
	return i.ToGetUsersUserPosixAccountOutputWithContext(context.Background())
}

func (i GetUsersUserPosixAccountArgs) ToGetUsersUserPosixAccountOutputWithContext(ctx context.Context) GetUsersUserPosixAccountOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserPosixAccountOutput)
}

// GetUsersUserPosixAccountArrayInput is an input type that accepts GetUsersUserPosixAccountArray and GetUsersUserPosixAccountArrayOutput values.
// You can construct a concrete instance of `GetUsersUserPosixAccountArrayInput` via:
//
//          GetUsersUserPosixAccountArray{ GetUsersUserPosixAccountArgs{...} }
type GetUsersUserPosixAccountArrayInput interface {
	pulumi.Input

	ToGetUsersUserPosixAccountArrayOutput() GetUsersUserPosixAccountArrayOutput
	ToGetUsersUserPosixAccountArrayOutputWithContext(context.Context) GetUsersUserPosixAccountArrayOutput
}

type GetUsersUserPosixAccountArray []GetUsersUserPosixAccountInput

func (GetUsersUserPosixAccountArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserPosixAccount)(nil)).Elem()
}

func (i GetUsersUserPosixAccountArray) ToGetUsersUserPosixAccountArrayOutput() GetUsersUserPosixAccountArrayOutput {
	return i.ToGetUsersUserPosixAccountArrayOutputWithContext(context.Background())
}

func (i GetUsersUserPosixAccountArray) ToGetUsersUserPosixAccountArrayOutputWithContext(ctx context.Context) GetUsersUserPosixAccountArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserPosixAccountArrayOutput)
}

type GetUsersUserPosixAccountOutput struct{ *pulumi.OutputState }

func (GetUsersUserPosixAccountOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserPosixAccount)(nil)).Elem()
}

func (o GetUsersUserPosixAccountOutput) ToGetUsersUserPosixAccountOutput() GetUsersUserPosixAccountOutput {
	return o
}

func (o GetUsersUserPosixAccountOutput) ToGetUsersUserPosixAccountOutputWithContext(ctx context.Context) GetUsersUserPosixAccountOutput {
	return o
}

func (o GetUsersUserPosixAccountOutput) AccountId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.AccountId }).(pulumi.StringOutput)
}

func (o GetUsersUserPosixAccountOutput) Gecos() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.Gecos }).(pulumi.StringOutput)
}

func (o GetUsersUserPosixAccountOutput) Gid() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.Gid }).(pulumi.StringOutput)
}

func (o GetUsersUserPosixAccountOutput) HomeDirectory() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.HomeDirectory }).(pulumi.StringOutput)
}

func (o GetUsersUserPosixAccountOutput) OperatingSystemType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.OperatingSystemType }).(pulumi.StringOutput)
}

func (o GetUsersUserPosixAccountOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUsersUserPosixAccountOutput) Shell() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.Shell }).(pulumi.StringOutput)
}

func (o GetUsersUserPosixAccountOutput) SystemId() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.SystemId }).(pulumi.StringOutput)
}

func (o GetUsersUserPosixAccountOutput) Uid() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.Uid }).(pulumi.StringOutput)
}

func (o GetUsersUserPosixAccountOutput) Username() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserPosixAccount) string { return v.Username }).(pulumi.StringOutput)
}

type GetUsersUserPosixAccountArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserPosixAccountArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserPosixAccount)(nil)).Elem()
}

func (o GetUsersUserPosixAccountArrayOutput) ToGetUsersUserPosixAccountArrayOutput() GetUsersUserPosixAccountArrayOutput {
	return o
}

func (o GetUsersUserPosixAccountArrayOutput) ToGetUsersUserPosixAccountArrayOutputWithContext(ctx context.Context) GetUsersUserPosixAccountArrayOutput {
	return o
}

func (o GetUsersUserPosixAccountArrayOutput) Index(i pulumi.IntInput) GetUsersUserPosixAccountOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserPosixAccount {
		return vs[0].([]GetUsersUserPosixAccount)[vs[1].(int)]
	}).(GetUsersUserPosixAccountOutput)
}

type GetUsersUserRelation struct {
	CustomType string `pulumi:"customType"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUsersUserRelationInput is an input type that accepts GetUsersUserRelationArgs and GetUsersUserRelationOutput values.
// You can construct a concrete instance of `GetUsersUserRelationInput` via:
//
//          GetUsersUserRelationArgs{...}
type GetUsersUserRelationInput interface {
	pulumi.Input

	ToGetUsersUserRelationOutput() GetUsersUserRelationOutput
	ToGetUsersUserRelationOutputWithContext(context.Context) GetUsersUserRelationOutput
}

type GetUsersUserRelationArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUsersUserRelationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserRelation)(nil)).Elem()
}

func (i GetUsersUserRelationArgs) ToGetUsersUserRelationOutput() GetUsersUserRelationOutput {
	return i.ToGetUsersUserRelationOutputWithContext(context.Background())
}

func (i GetUsersUserRelationArgs) ToGetUsersUserRelationOutputWithContext(ctx context.Context) GetUsersUserRelationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserRelationOutput)
}

// GetUsersUserRelationArrayInput is an input type that accepts GetUsersUserRelationArray and GetUsersUserRelationArrayOutput values.
// You can construct a concrete instance of `GetUsersUserRelationArrayInput` via:
//
//          GetUsersUserRelationArray{ GetUsersUserRelationArgs{...} }
type GetUsersUserRelationArrayInput interface {
	pulumi.Input

	ToGetUsersUserRelationArrayOutput() GetUsersUserRelationArrayOutput
	ToGetUsersUserRelationArrayOutputWithContext(context.Context) GetUsersUserRelationArrayOutput
}

type GetUsersUserRelationArray []GetUsersUserRelationInput

func (GetUsersUserRelationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserRelation)(nil)).Elem()
}

func (i GetUsersUserRelationArray) ToGetUsersUserRelationArrayOutput() GetUsersUserRelationArrayOutput {
	return i.ToGetUsersUserRelationArrayOutputWithContext(context.Background())
}

func (i GetUsersUserRelationArray) ToGetUsersUserRelationArrayOutputWithContext(ctx context.Context) GetUsersUserRelationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserRelationArrayOutput)
}

type GetUsersUserRelationOutput struct{ *pulumi.OutputState }

func (GetUsersUserRelationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserRelation)(nil)).Elem()
}

func (o GetUsersUserRelationOutput) ToGetUsersUserRelationOutput() GetUsersUserRelationOutput {
	return o
}

func (o GetUsersUserRelationOutput) ToGetUsersUserRelationOutputWithContext(ctx context.Context) GetUsersUserRelationOutput {
	return o
}

func (o GetUsersUserRelationOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserRelation) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserRelationOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserRelation) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUsersUserRelationOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserRelation) string { return v.Value }).(pulumi.StringOutput)
}

type GetUsersUserRelationArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserRelationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserRelation)(nil)).Elem()
}

func (o GetUsersUserRelationArrayOutput) ToGetUsersUserRelationArrayOutput() GetUsersUserRelationArrayOutput {
	return o
}

func (o GetUsersUserRelationArrayOutput) ToGetUsersUserRelationArrayOutputWithContext(ctx context.Context) GetUsersUserRelationArrayOutput {
	return o
}

func (o GetUsersUserRelationArrayOutput) Index(i pulumi.IntInput) GetUsersUserRelationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserRelation {
		return vs[0].([]GetUsersUserRelation)[vs[1].(int)]
	}).(GetUsersUserRelationOutput)
}

type GetUsersUserSshPublicKey struct {
	ExpirationTimeUsec string `pulumi:"expirationTimeUsec"`
	Fingerprint        string `pulumi:"fingerprint"`
	Key                string `pulumi:"key"`
}

// GetUsersUserSshPublicKeyInput is an input type that accepts GetUsersUserSshPublicKeyArgs and GetUsersUserSshPublicKeyOutput values.
// You can construct a concrete instance of `GetUsersUserSshPublicKeyInput` via:
//
//          GetUsersUserSshPublicKeyArgs{...}
type GetUsersUserSshPublicKeyInput interface {
	pulumi.Input

	ToGetUsersUserSshPublicKeyOutput() GetUsersUserSshPublicKeyOutput
	ToGetUsersUserSshPublicKeyOutputWithContext(context.Context) GetUsersUserSshPublicKeyOutput
}

type GetUsersUserSshPublicKeyArgs struct {
	ExpirationTimeUsec pulumi.StringInput `pulumi:"expirationTimeUsec"`
	Fingerprint        pulumi.StringInput `pulumi:"fingerprint"`
	Key                pulumi.StringInput `pulumi:"key"`
}

func (GetUsersUserSshPublicKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserSshPublicKey)(nil)).Elem()
}

func (i GetUsersUserSshPublicKeyArgs) ToGetUsersUserSshPublicKeyOutput() GetUsersUserSshPublicKeyOutput {
	return i.ToGetUsersUserSshPublicKeyOutputWithContext(context.Background())
}

func (i GetUsersUserSshPublicKeyArgs) ToGetUsersUserSshPublicKeyOutputWithContext(ctx context.Context) GetUsersUserSshPublicKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserSshPublicKeyOutput)
}

// GetUsersUserSshPublicKeyArrayInput is an input type that accepts GetUsersUserSshPublicKeyArray and GetUsersUserSshPublicKeyArrayOutput values.
// You can construct a concrete instance of `GetUsersUserSshPublicKeyArrayInput` via:
//
//          GetUsersUserSshPublicKeyArray{ GetUsersUserSshPublicKeyArgs{...} }
type GetUsersUserSshPublicKeyArrayInput interface {
	pulumi.Input

	ToGetUsersUserSshPublicKeyArrayOutput() GetUsersUserSshPublicKeyArrayOutput
	ToGetUsersUserSshPublicKeyArrayOutputWithContext(context.Context) GetUsersUserSshPublicKeyArrayOutput
}

type GetUsersUserSshPublicKeyArray []GetUsersUserSshPublicKeyInput

func (GetUsersUserSshPublicKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserSshPublicKey)(nil)).Elem()
}

func (i GetUsersUserSshPublicKeyArray) ToGetUsersUserSshPublicKeyArrayOutput() GetUsersUserSshPublicKeyArrayOutput {
	return i.ToGetUsersUserSshPublicKeyArrayOutputWithContext(context.Background())
}

func (i GetUsersUserSshPublicKeyArray) ToGetUsersUserSshPublicKeyArrayOutputWithContext(ctx context.Context) GetUsersUserSshPublicKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserSshPublicKeyArrayOutput)
}

type GetUsersUserSshPublicKeyOutput struct{ *pulumi.OutputState }

func (GetUsersUserSshPublicKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserSshPublicKey)(nil)).Elem()
}

func (o GetUsersUserSshPublicKeyOutput) ToGetUsersUserSshPublicKeyOutput() GetUsersUserSshPublicKeyOutput {
	return o
}

func (o GetUsersUserSshPublicKeyOutput) ToGetUsersUserSshPublicKeyOutputWithContext(ctx context.Context) GetUsersUserSshPublicKeyOutput {
	return o
}

func (o GetUsersUserSshPublicKeyOutput) ExpirationTimeUsec() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserSshPublicKey) string { return v.ExpirationTimeUsec }).(pulumi.StringOutput)
}

func (o GetUsersUserSshPublicKeyOutput) Fingerprint() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserSshPublicKey) string { return v.Fingerprint }).(pulumi.StringOutput)
}

func (o GetUsersUserSshPublicKeyOutput) Key() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserSshPublicKey) string { return v.Key }).(pulumi.StringOutput)
}

type GetUsersUserSshPublicKeyArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserSshPublicKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserSshPublicKey)(nil)).Elem()
}

func (o GetUsersUserSshPublicKeyArrayOutput) ToGetUsersUserSshPublicKeyArrayOutput() GetUsersUserSshPublicKeyArrayOutput {
	return o
}

func (o GetUsersUserSshPublicKeyArrayOutput) ToGetUsersUserSshPublicKeyArrayOutputWithContext(ctx context.Context) GetUsersUserSshPublicKeyArrayOutput {
	return o
}

func (o GetUsersUserSshPublicKeyArrayOutput) Index(i pulumi.IntInput) GetUsersUserSshPublicKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserSshPublicKey {
		return vs[0].([]GetUsersUserSshPublicKey)[vs[1].(int)]
	}).(GetUsersUserSshPublicKeyOutput)
}

type GetUsersUserWebsite struct {
	CustomType string `pulumi:"customType"`
	Primary    bool   `pulumi:"primary"`
	Type       string `pulumi:"type"`
	Value      string `pulumi:"value"`
}

// GetUsersUserWebsiteInput is an input type that accepts GetUsersUserWebsiteArgs and GetUsersUserWebsiteOutput values.
// You can construct a concrete instance of `GetUsersUserWebsiteInput` via:
//
//          GetUsersUserWebsiteArgs{...}
type GetUsersUserWebsiteInput interface {
	pulumi.Input

	ToGetUsersUserWebsiteOutput() GetUsersUserWebsiteOutput
	ToGetUsersUserWebsiteOutputWithContext(context.Context) GetUsersUserWebsiteOutput
}

type GetUsersUserWebsiteArgs struct {
	CustomType pulumi.StringInput `pulumi:"customType"`
	Primary    pulumi.BoolInput   `pulumi:"primary"`
	Type       pulumi.StringInput `pulumi:"type"`
	Value      pulumi.StringInput `pulumi:"value"`
}

func (GetUsersUserWebsiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserWebsite)(nil)).Elem()
}

func (i GetUsersUserWebsiteArgs) ToGetUsersUserWebsiteOutput() GetUsersUserWebsiteOutput {
	return i.ToGetUsersUserWebsiteOutputWithContext(context.Background())
}

func (i GetUsersUserWebsiteArgs) ToGetUsersUserWebsiteOutputWithContext(ctx context.Context) GetUsersUserWebsiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserWebsiteOutput)
}

// GetUsersUserWebsiteArrayInput is an input type that accepts GetUsersUserWebsiteArray and GetUsersUserWebsiteArrayOutput values.
// You can construct a concrete instance of `GetUsersUserWebsiteArrayInput` via:
//
//          GetUsersUserWebsiteArray{ GetUsersUserWebsiteArgs{...} }
type GetUsersUserWebsiteArrayInput interface {
	pulumi.Input

	ToGetUsersUserWebsiteArrayOutput() GetUsersUserWebsiteArrayOutput
	ToGetUsersUserWebsiteArrayOutputWithContext(context.Context) GetUsersUserWebsiteArrayOutput
}

type GetUsersUserWebsiteArray []GetUsersUserWebsiteInput

func (GetUsersUserWebsiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserWebsite)(nil)).Elem()
}

func (i GetUsersUserWebsiteArray) ToGetUsersUserWebsiteArrayOutput() GetUsersUserWebsiteArrayOutput {
	return i.ToGetUsersUserWebsiteArrayOutputWithContext(context.Background())
}

func (i GetUsersUserWebsiteArray) ToGetUsersUserWebsiteArrayOutputWithContext(ctx context.Context) GetUsersUserWebsiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GetUsersUserWebsiteArrayOutput)
}

type GetUsersUserWebsiteOutput struct{ *pulumi.OutputState }

func (GetUsersUserWebsiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GetUsersUserWebsite)(nil)).Elem()
}

func (o GetUsersUserWebsiteOutput) ToGetUsersUserWebsiteOutput() GetUsersUserWebsiteOutput {
	return o
}

func (o GetUsersUserWebsiteOutput) ToGetUsersUserWebsiteOutputWithContext(ctx context.Context) GetUsersUserWebsiteOutput {
	return o
}

func (o GetUsersUserWebsiteOutput) CustomType() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserWebsite) string { return v.CustomType }).(pulumi.StringOutput)
}

func (o GetUsersUserWebsiteOutput) Primary() pulumi.BoolOutput {
	return o.ApplyT(func(v GetUsersUserWebsite) bool { return v.Primary }).(pulumi.BoolOutput)
}

func (o GetUsersUserWebsiteOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserWebsite) string { return v.Type }).(pulumi.StringOutput)
}

func (o GetUsersUserWebsiteOutput) Value() pulumi.StringOutput {
	return o.ApplyT(func(v GetUsersUserWebsite) string { return v.Value }).(pulumi.StringOutput)
}

type GetUsersUserWebsiteArrayOutput struct{ *pulumi.OutputState }

func (GetUsersUserWebsiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GetUsersUserWebsite)(nil)).Elem()
}

func (o GetUsersUserWebsiteArrayOutput) ToGetUsersUserWebsiteArrayOutput() GetUsersUserWebsiteArrayOutput {
	return o
}

func (o GetUsersUserWebsiteArrayOutput) ToGetUsersUserWebsiteArrayOutputWithContext(ctx context.Context) GetUsersUserWebsiteArrayOutput {
	return o
}

func (o GetUsersUserWebsiteArrayOutput) Index(i pulumi.IntInput) GetUsersUserWebsiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GetUsersUserWebsite {
		return vs[0].([]GetUsersUserWebsite)[vs[1].(int)]
	}).(GetUsersUserWebsiteOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChromePolicyPolicyInput)(nil)).Elem(), ChromePolicyPolicyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChromePolicyPolicyArrayInput)(nil)).Elem(), ChromePolicyPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GmailSendAsAliasSmtpMsaInput)(nil)).Elem(), GmailSendAsAliasSmtpMsaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GmailSendAsAliasSmtpMsaPtrInput)(nil)).Elem(), GmailSendAsAliasSmtpMsaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembersMemberInput)(nil)).Elem(), GroupMembersMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GroupMembersMemberArrayInput)(nil)).Elem(), GroupMembersMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePrivilegeInput)(nil)).Elem(), RolePrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*RolePrivilegeArrayInput)(nil)).Elem(), RolePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaFieldInput)(nil)).Elem(), SchemaFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaFieldArrayInput)(nil)).Elem(), SchemaFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaFieldNumericIndexingSpecInput)(nil)).Elem(), SchemaFieldNumericIndexingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*SchemaFieldNumericIndexingSpecPtrInput)(nil)).Elem(), SchemaFieldNumericIndexingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAddressInput)(nil)).Elem(), UserAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserAddressArrayInput)(nil)).Elem(), UserAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserCustomSchemaInput)(nil)).Elem(), UserCustomSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserCustomSchemaArrayInput)(nil)).Elem(), UserCustomSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserEmailInput)(nil)).Elem(), UserEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserEmailArrayInput)(nil)).Elem(), UserEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserExternalIdInput)(nil)).Elem(), UserExternalIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserExternalIdArrayInput)(nil)).Elem(), UserExternalIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserImInput)(nil)).Elem(), UserImArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserImArrayInput)(nil)).Elem(), UserImArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserKeywordInput)(nil)).Elem(), UserKeywordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserKeywordArrayInput)(nil)).Elem(), UserKeywordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLanguageInput)(nil)).Elem(), UserLanguageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLanguageArrayInput)(nil)).Elem(), UserLanguageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLocationInput)(nil)).Elem(), UserLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserLocationArrayInput)(nil)).Elem(), UserLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserNameInput)(nil)).Elem(), UserNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserNamePtrInput)(nil)).Elem(), UserNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserOrganizationInput)(nil)).Elem(), UserOrganizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserOrganizationArrayInput)(nil)).Elem(), UserOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPhoneInput)(nil)).Elem(), UserPhoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPhoneArrayInput)(nil)).Elem(), UserPhoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPosixAccountInput)(nil)).Elem(), UserPosixAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserPosixAccountArrayInput)(nil)).Elem(), UserPosixAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRelationInput)(nil)).Elem(), UserRelationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserRelationArrayInput)(nil)).Elem(), UserRelationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSshPublicKeyInput)(nil)).Elem(), UserSshPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserSshPublicKeyArrayInput)(nil)).Elem(), UserSshPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserWebsiteInput)(nil)).Elem(), UserWebsiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*UserWebsiteArrayInput)(nil)).Elem(), UserWebsiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaAdditionalTargetKeyNameInput)(nil)).Elem(), GetChromePolicySchemaAdditionalTargetKeyNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaAdditionalTargetKeyNameArrayInput)(nil)).Elem(), GetChromePolicySchemaAdditionalTargetKeyNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaDefinitionInput)(nil)).Elem(), GetChromePolicySchemaDefinitionArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaDefinitionArrayInput)(nil)).Elem(), GetChromePolicySchemaDefinitionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaDefinitionEnumTypeInput)(nil)).Elem(), GetChromePolicySchemaDefinitionEnumTypeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaDefinitionEnumTypeArrayInput)(nil)).Elem(), GetChromePolicySchemaDefinitionEnumTypeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaDefinitionEnumTypeValueInput)(nil)).Elem(), GetChromePolicySchemaDefinitionEnumTypeValueArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaDefinitionEnumTypeValueArrayInput)(nil)).Elem(), GetChromePolicySchemaDefinitionEnumTypeValueArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaNoticeInput)(nil)).Elem(), GetChromePolicySchemaNoticeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetChromePolicySchemaNoticeArrayInput)(nil)).Elem(), GetChromePolicySchemaNoticeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembersMemberInput)(nil)).Elem(), GetGroupMembersMemberArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupMembersMemberArrayInput)(nil)).Elem(), GetGroupMembersMemberArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupInput)(nil)).Elem(), GetGroupsGroupArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetGroupsGroupArrayInput)(nil)).Elem(), GetGroupsGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivilegesItemInput)(nil)).Elem(), GetPrivilegesItemArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetPrivilegesItemArrayInput)(nil)).Elem(), GetPrivilegesItemArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolePrivilegeInput)(nil)).Elem(), GetRolePrivilegeArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetRolePrivilegeArrayInput)(nil)).Elem(), GetRolePrivilegeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaFieldInput)(nil)).Elem(), GetSchemaFieldArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaFieldArrayInput)(nil)).Elem(), GetSchemaFieldArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaFieldNumericIndexingSpecInput)(nil)).Elem(), GetSchemaFieldNumericIndexingSpecArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetSchemaFieldNumericIndexingSpecArrayInput)(nil)).Elem(), GetSchemaFieldNumericIndexingSpecArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserAddressInput)(nil)).Elem(), GetUserAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserAddressArrayInput)(nil)).Elem(), GetUserAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserCustomSchemaInput)(nil)).Elem(), GetUserCustomSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserCustomSchemaArrayInput)(nil)).Elem(), GetUserCustomSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserEmailInput)(nil)).Elem(), GetUserEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserEmailArrayInput)(nil)).Elem(), GetUserEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserExternalIdInput)(nil)).Elem(), GetUserExternalIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserExternalIdArrayInput)(nil)).Elem(), GetUserExternalIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserImInput)(nil)).Elem(), GetUserImArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserImArrayInput)(nil)).Elem(), GetUserImArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserKeywordInput)(nil)).Elem(), GetUserKeywordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserKeywordArrayInput)(nil)).Elem(), GetUserKeywordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLanguageInput)(nil)).Elem(), GetUserLanguageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLanguageArrayInput)(nil)).Elem(), GetUserLanguageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLocationInput)(nil)).Elem(), GetUserLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserLocationArrayInput)(nil)).Elem(), GetUserLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserNameInput)(nil)).Elem(), GetUserNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserNameArrayInput)(nil)).Elem(), GetUserNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserOrganizationInput)(nil)).Elem(), GetUserOrganizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserOrganizationArrayInput)(nil)).Elem(), GetUserOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserPhoneInput)(nil)).Elem(), GetUserPhoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserPhoneArrayInput)(nil)).Elem(), GetUserPhoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserPosixAccountInput)(nil)).Elem(), GetUserPosixAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserPosixAccountArrayInput)(nil)).Elem(), GetUserPosixAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserRelationInput)(nil)).Elem(), GetUserRelationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserRelationArrayInput)(nil)).Elem(), GetUserRelationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSshPublicKeyInput)(nil)).Elem(), GetUserSshPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserSshPublicKeyArrayInput)(nil)).Elem(), GetUserSshPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserWebsiteInput)(nil)).Elem(), GetUserWebsiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUserWebsiteArrayInput)(nil)).Elem(), GetUserWebsiteArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserInput)(nil)).Elem(), GetUsersUserArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserArrayInput)(nil)).Elem(), GetUsersUserArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserAddressInput)(nil)).Elem(), GetUsersUserAddressArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserAddressArrayInput)(nil)).Elem(), GetUsersUserAddressArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserCustomSchemaInput)(nil)).Elem(), GetUsersUserCustomSchemaArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserCustomSchemaArrayInput)(nil)).Elem(), GetUsersUserCustomSchemaArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserEmailInput)(nil)).Elem(), GetUsersUserEmailArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserEmailArrayInput)(nil)).Elem(), GetUsersUserEmailArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserExternalIdInput)(nil)).Elem(), GetUsersUserExternalIdArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserExternalIdArrayInput)(nil)).Elem(), GetUsersUserExternalIdArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserImInput)(nil)).Elem(), GetUsersUserImArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserImArrayInput)(nil)).Elem(), GetUsersUserImArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserKeywordInput)(nil)).Elem(), GetUsersUserKeywordArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserKeywordArrayInput)(nil)).Elem(), GetUsersUserKeywordArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLanguageInput)(nil)).Elem(), GetUsersUserLanguageArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLanguageArrayInput)(nil)).Elem(), GetUsersUserLanguageArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLocationInput)(nil)).Elem(), GetUsersUserLocationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserLocationArrayInput)(nil)).Elem(), GetUsersUserLocationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserNameInput)(nil)).Elem(), GetUsersUserNameArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserNameArrayInput)(nil)).Elem(), GetUsersUserNameArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserOrganizationInput)(nil)).Elem(), GetUsersUserOrganizationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserOrganizationArrayInput)(nil)).Elem(), GetUsersUserOrganizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserPhoneInput)(nil)).Elem(), GetUsersUserPhoneArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserPhoneArrayInput)(nil)).Elem(), GetUsersUserPhoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserPosixAccountInput)(nil)).Elem(), GetUsersUserPosixAccountArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserPosixAccountArrayInput)(nil)).Elem(), GetUsersUserPosixAccountArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserRelationInput)(nil)).Elem(), GetUsersUserRelationArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserRelationArrayInput)(nil)).Elem(), GetUsersUserRelationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserSshPublicKeyInput)(nil)).Elem(), GetUsersUserSshPublicKeyArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserSshPublicKeyArrayInput)(nil)).Elem(), GetUsersUserSshPublicKeyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserWebsiteInput)(nil)).Elem(), GetUsersUserWebsiteArgs{})
	pulumi.RegisterInputType(reflect.TypeOf((*GetUsersUserWebsiteArrayInput)(nil)).Elem(), GetUsersUserWebsiteArray{})
	pulumi.RegisterOutputType(ChromePolicyPolicyOutput{})
	pulumi.RegisterOutputType(ChromePolicyPolicyArrayOutput{})
	pulumi.RegisterOutputType(GmailSendAsAliasSmtpMsaOutput{})
	pulumi.RegisterOutputType(GmailSendAsAliasSmtpMsaPtrOutput{})
	pulumi.RegisterOutputType(GroupMembersMemberOutput{})
	pulumi.RegisterOutputType(GroupMembersMemberArrayOutput{})
	pulumi.RegisterOutputType(RolePrivilegeOutput{})
	pulumi.RegisterOutputType(RolePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(SchemaFieldOutput{})
	pulumi.RegisterOutputType(SchemaFieldArrayOutput{})
	pulumi.RegisterOutputType(SchemaFieldNumericIndexingSpecOutput{})
	pulumi.RegisterOutputType(SchemaFieldNumericIndexingSpecPtrOutput{})
	pulumi.RegisterOutputType(UserAddressOutput{})
	pulumi.RegisterOutputType(UserAddressArrayOutput{})
	pulumi.RegisterOutputType(UserCustomSchemaOutput{})
	pulumi.RegisterOutputType(UserCustomSchemaArrayOutput{})
	pulumi.RegisterOutputType(UserEmailOutput{})
	pulumi.RegisterOutputType(UserEmailArrayOutput{})
	pulumi.RegisterOutputType(UserExternalIdOutput{})
	pulumi.RegisterOutputType(UserExternalIdArrayOutput{})
	pulumi.RegisterOutputType(UserImOutput{})
	pulumi.RegisterOutputType(UserImArrayOutput{})
	pulumi.RegisterOutputType(UserKeywordOutput{})
	pulumi.RegisterOutputType(UserKeywordArrayOutput{})
	pulumi.RegisterOutputType(UserLanguageOutput{})
	pulumi.RegisterOutputType(UserLanguageArrayOutput{})
	pulumi.RegisterOutputType(UserLocationOutput{})
	pulumi.RegisterOutputType(UserLocationArrayOutput{})
	pulumi.RegisterOutputType(UserNameOutput{})
	pulumi.RegisterOutputType(UserNamePtrOutput{})
	pulumi.RegisterOutputType(UserOrganizationOutput{})
	pulumi.RegisterOutputType(UserOrganizationArrayOutput{})
	pulumi.RegisterOutputType(UserPhoneOutput{})
	pulumi.RegisterOutputType(UserPhoneArrayOutput{})
	pulumi.RegisterOutputType(UserPosixAccountOutput{})
	pulumi.RegisterOutputType(UserPosixAccountArrayOutput{})
	pulumi.RegisterOutputType(UserRelationOutput{})
	pulumi.RegisterOutputType(UserRelationArrayOutput{})
	pulumi.RegisterOutputType(UserSshPublicKeyOutput{})
	pulumi.RegisterOutputType(UserSshPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(UserWebsiteOutput{})
	pulumi.RegisterOutputType(UserWebsiteArrayOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaAdditionalTargetKeyNameOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaAdditionalTargetKeyNameArrayOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaDefinitionOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaDefinitionArrayOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaDefinitionEnumTypeOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaDefinitionEnumTypeArrayOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaDefinitionEnumTypeValueOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaDefinitionEnumTypeValueArrayOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaNoticeOutput{})
	pulumi.RegisterOutputType(GetChromePolicySchemaNoticeArrayOutput{})
	pulumi.RegisterOutputType(GetGroupMembersMemberOutput{})
	pulumi.RegisterOutputType(GetGroupMembersMemberArrayOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupOutput{})
	pulumi.RegisterOutputType(GetGroupsGroupArrayOutput{})
	pulumi.RegisterOutputType(GetPrivilegesItemOutput{})
	pulumi.RegisterOutputType(GetPrivilegesItemArrayOutput{})
	pulumi.RegisterOutputType(GetRolePrivilegeOutput{})
	pulumi.RegisterOutputType(GetRolePrivilegeArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaFieldOutput{})
	pulumi.RegisterOutputType(GetSchemaFieldArrayOutput{})
	pulumi.RegisterOutputType(GetSchemaFieldNumericIndexingSpecOutput{})
	pulumi.RegisterOutputType(GetSchemaFieldNumericIndexingSpecArrayOutput{})
	pulumi.RegisterOutputType(GetUserAddressOutput{})
	pulumi.RegisterOutputType(GetUserAddressArrayOutput{})
	pulumi.RegisterOutputType(GetUserCustomSchemaOutput{})
	pulumi.RegisterOutputType(GetUserCustomSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetUserEmailOutput{})
	pulumi.RegisterOutputType(GetUserEmailArrayOutput{})
	pulumi.RegisterOutputType(GetUserExternalIdOutput{})
	pulumi.RegisterOutputType(GetUserExternalIdArrayOutput{})
	pulumi.RegisterOutputType(GetUserImOutput{})
	pulumi.RegisterOutputType(GetUserImArrayOutput{})
	pulumi.RegisterOutputType(GetUserKeywordOutput{})
	pulumi.RegisterOutputType(GetUserKeywordArrayOutput{})
	pulumi.RegisterOutputType(GetUserLanguageOutput{})
	pulumi.RegisterOutputType(GetUserLanguageArrayOutput{})
	pulumi.RegisterOutputType(GetUserLocationOutput{})
	pulumi.RegisterOutputType(GetUserLocationArrayOutput{})
	pulumi.RegisterOutputType(GetUserNameOutput{})
	pulumi.RegisterOutputType(GetUserNameArrayOutput{})
	pulumi.RegisterOutputType(GetUserOrganizationOutput{})
	pulumi.RegisterOutputType(GetUserOrganizationArrayOutput{})
	pulumi.RegisterOutputType(GetUserPhoneOutput{})
	pulumi.RegisterOutputType(GetUserPhoneArrayOutput{})
	pulumi.RegisterOutputType(GetUserPosixAccountOutput{})
	pulumi.RegisterOutputType(GetUserPosixAccountArrayOutput{})
	pulumi.RegisterOutputType(GetUserRelationOutput{})
	pulumi.RegisterOutputType(GetUserRelationArrayOutput{})
	pulumi.RegisterOutputType(GetUserSshPublicKeyOutput{})
	pulumi.RegisterOutputType(GetUserSshPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(GetUserWebsiteOutput{})
	pulumi.RegisterOutputType(GetUserWebsiteArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOutput{})
	pulumi.RegisterOutputType(GetUsersUserArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserAddressOutput{})
	pulumi.RegisterOutputType(GetUsersUserAddressArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserCustomSchemaOutput{})
	pulumi.RegisterOutputType(GetUsersUserCustomSchemaArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserEmailOutput{})
	pulumi.RegisterOutputType(GetUsersUserEmailArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserExternalIdOutput{})
	pulumi.RegisterOutputType(GetUsersUserExternalIdArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserImOutput{})
	pulumi.RegisterOutputType(GetUsersUserImArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserKeywordOutput{})
	pulumi.RegisterOutputType(GetUsersUserKeywordArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserLanguageOutput{})
	pulumi.RegisterOutputType(GetUsersUserLanguageArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserLocationOutput{})
	pulumi.RegisterOutputType(GetUsersUserLocationArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserNameOutput{})
	pulumi.RegisterOutputType(GetUsersUserNameArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserOrganizationOutput{})
	pulumi.RegisterOutputType(GetUsersUserOrganizationArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserPhoneOutput{})
	pulumi.RegisterOutputType(GetUsersUserPhoneArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserPosixAccountOutput{})
	pulumi.RegisterOutputType(GetUsersUserPosixAccountArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserRelationOutput{})
	pulumi.RegisterOutputType(GetUsersUserRelationArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserSshPublicKeyOutput{})
	pulumi.RegisterOutputType(GetUsersUserSshPublicKeyArrayOutput{})
	pulumi.RegisterOutputType(GetUsersUserWebsiteOutput{})
	pulumi.RegisterOutputType(GetUsersUserWebsiteArrayOutput{})
}
