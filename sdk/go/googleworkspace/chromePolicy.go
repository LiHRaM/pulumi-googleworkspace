// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googleworkspace

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"encoding/json"
//
// 	"github.com/pulumi/pulumi-googleworkspace/sdk/go/googleworkspace"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := googleworkspace.NewOrgUnit(ctx, "exampleOrgUnit", &googleworkspace.OrgUnitArgs{
// 			ParentOrgUnitPath: pulumi.String("/"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		tmpJSON0, err := json.Marshal(34)
// 		if err != nil {
// 			return err
// 		}
// 		json0 := string(tmpJSON0)
// 		_, err = googleworkspace.NewChromePolicy(ctx, "exampleChromePolicy", &googleworkspace.ChromePolicyArgs{
// 			OrgUnitId: pulumi.Any(googleworkspace_org_unit.Test.Id),
// 			Policies: ChromePolicyPolicyArray{
// 				&ChromePolicyPolicyArgs{
// 					SchemaName: pulumi.String("chrome.users.MaxConnectionsPerProxy"),
// 					SchemaValues: pulumi.StringMap{
// 						"maxConnectionsPerProxy": pulumi.String(json0),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ChromePolicy struct {
	pulumi.CustomResourceState

	// The target org unit on which this policy is applied.
	OrgUnitId pulumi.StringOutput `pulumi:"orgUnitId"`
	// Policies to set for the org unit
	Policies ChromePolicyPolicyArrayOutput `pulumi:"policies"`
}

// NewChromePolicy registers a new resource with the given unique name, arguments, and options.
func NewChromePolicy(ctx *pulumi.Context,
	name string, args *ChromePolicyArgs, opts ...pulumi.ResourceOption) (*ChromePolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.OrgUnitId == nil {
		return nil, errors.New("invalid value for required argument 'OrgUnitId'")
	}
	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	var resource ChromePolicy
	err := ctx.RegisterResource("googleworkspace:index/chromePolicy:ChromePolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetChromePolicy gets an existing ChromePolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetChromePolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ChromePolicyState, opts ...pulumi.ResourceOption) (*ChromePolicy, error) {
	var resource ChromePolicy
	err := ctx.ReadResource("googleworkspace:index/chromePolicy:ChromePolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ChromePolicy resources.
type chromePolicyState struct {
	// The target org unit on which this policy is applied.
	OrgUnitId *string `pulumi:"orgUnitId"`
	// Policies to set for the org unit
	Policies []ChromePolicyPolicy `pulumi:"policies"`
}

type ChromePolicyState struct {
	// The target org unit on which this policy is applied.
	OrgUnitId pulumi.StringPtrInput
	// Policies to set for the org unit
	Policies ChromePolicyPolicyArrayInput
}

func (ChromePolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*chromePolicyState)(nil)).Elem()
}

type chromePolicyArgs struct {
	// The target org unit on which this policy is applied.
	OrgUnitId string `pulumi:"orgUnitId"`
	// Policies to set for the org unit
	Policies []ChromePolicyPolicy `pulumi:"policies"`
}

// The set of arguments for constructing a ChromePolicy resource.
type ChromePolicyArgs struct {
	// The target org unit on which this policy is applied.
	OrgUnitId pulumi.StringInput
	// Policies to set for the org unit
	Policies ChromePolicyPolicyArrayInput
}

func (ChromePolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*chromePolicyArgs)(nil)).Elem()
}

type ChromePolicyInput interface {
	pulumi.Input

	ToChromePolicyOutput() ChromePolicyOutput
	ToChromePolicyOutputWithContext(ctx context.Context) ChromePolicyOutput
}

func (*ChromePolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**ChromePolicy)(nil)).Elem()
}

func (i *ChromePolicy) ToChromePolicyOutput() ChromePolicyOutput {
	return i.ToChromePolicyOutputWithContext(context.Background())
}

func (i *ChromePolicy) ToChromePolicyOutputWithContext(ctx context.Context) ChromePolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChromePolicyOutput)
}

// ChromePolicyArrayInput is an input type that accepts ChromePolicyArray and ChromePolicyArrayOutput values.
// You can construct a concrete instance of `ChromePolicyArrayInput` via:
//
//          ChromePolicyArray{ ChromePolicyArgs{...} }
type ChromePolicyArrayInput interface {
	pulumi.Input

	ToChromePolicyArrayOutput() ChromePolicyArrayOutput
	ToChromePolicyArrayOutputWithContext(context.Context) ChromePolicyArrayOutput
}

type ChromePolicyArray []ChromePolicyInput

func (ChromePolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChromePolicy)(nil)).Elem()
}

func (i ChromePolicyArray) ToChromePolicyArrayOutput() ChromePolicyArrayOutput {
	return i.ToChromePolicyArrayOutputWithContext(context.Background())
}

func (i ChromePolicyArray) ToChromePolicyArrayOutputWithContext(ctx context.Context) ChromePolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChromePolicyArrayOutput)
}

// ChromePolicyMapInput is an input type that accepts ChromePolicyMap and ChromePolicyMapOutput values.
// You can construct a concrete instance of `ChromePolicyMapInput` via:
//
//          ChromePolicyMap{ "key": ChromePolicyArgs{...} }
type ChromePolicyMapInput interface {
	pulumi.Input

	ToChromePolicyMapOutput() ChromePolicyMapOutput
	ToChromePolicyMapOutputWithContext(context.Context) ChromePolicyMapOutput
}

type ChromePolicyMap map[string]ChromePolicyInput

func (ChromePolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChromePolicy)(nil)).Elem()
}

func (i ChromePolicyMap) ToChromePolicyMapOutput() ChromePolicyMapOutput {
	return i.ToChromePolicyMapOutputWithContext(context.Background())
}

func (i ChromePolicyMap) ToChromePolicyMapOutputWithContext(ctx context.Context) ChromePolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ChromePolicyMapOutput)
}

type ChromePolicyOutput struct{ *pulumi.OutputState }

func (ChromePolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ChromePolicy)(nil)).Elem()
}

func (o ChromePolicyOutput) ToChromePolicyOutput() ChromePolicyOutput {
	return o
}

func (o ChromePolicyOutput) ToChromePolicyOutputWithContext(ctx context.Context) ChromePolicyOutput {
	return o
}

// The target org unit on which this policy is applied.
func (o ChromePolicyOutput) OrgUnitId() pulumi.StringOutput {
	return o.ApplyT(func(v *ChromePolicy) pulumi.StringOutput { return v.OrgUnitId }).(pulumi.StringOutput)
}

// Policies to set for the org unit
func (o ChromePolicyOutput) Policies() ChromePolicyPolicyArrayOutput {
	return o.ApplyT(func(v *ChromePolicy) ChromePolicyPolicyArrayOutput { return v.Policies }).(ChromePolicyPolicyArrayOutput)
}

type ChromePolicyArrayOutput struct{ *pulumi.OutputState }

func (ChromePolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ChromePolicy)(nil)).Elem()
}

func (o ChromePolicyArrayOutput) ToChromePolicyArrayOutput() ChromePolicyArrayOutput {
	return o
}

func (o ChromePolicyArrayOutput) ToChromePolicyArrayOutputWithContext(ctx context.Context) ChromePolicyArrayOutput {
	return o
}

func (o ChromePolicyArrayOutput) Index(i pulumi.IntInput) ChromePolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ChromePolicy {
		return vs[0].([]*ChromePolicy)[vs[1].(int)]
	}).(ChromePolicyOutput)
}

type ChromePolicyMapOutput struct{ *pulumi.OutputState }

func (ChromePolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ChromePolicy)(nil)).Elem()
}

func (o ChromePolicyMapOutput) ToChromePolicyMapOutput() ChromePolicyMapOutput {
	return o
}

func (o ChromePolicyMapOutput) ToChromePolicyMapOutputWithContext(ctx context.Context) ChromePolicyMapOutput {
	return o
}

func (o ChromePolicyMapOutput) MapIndex(k pulumi.StringInput) ChromePolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ChromePolicy {
		return vs[0].(map[string]*ChromePolicy)[vs[1].(string)]
	}).(ChromePolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ChromePolicyInput)(nil)).Elem(), &ChromePolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChromePolicyArrayInput)(nil)).Elem(), ChromePolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ChromePolicyMapInput)(nil)).Elem(), ChromePolicyMap{})
	pulumi.RegisterOutputType(ChromePolicyOutput{})
	pulumi.RegisterOutputType(ChromePolicyArrayOutput{})
	pulumi.RegisterOutputType(ChromePolicyMapOutput{})
}
