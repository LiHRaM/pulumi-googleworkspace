// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package googleworkspace

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-googleworkspace/sdk/go/googleworkspace"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		group_admin, err := googleworkspace.LookupRole(ctx, &GetRoleArgs{
// 			Name: "_GROUPS_ADMIN_ROLE",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("isSystemRole", group_admin.IsSystemRole)
// 		return nil
// 	})
// }
// ```
func LookupRole(ctx *pulumi.Context, args *LookupRoleArgs, opts ...pulumi.InvokeOption) (*LookupRoleResult, error) {
	var rv LookupRoleResult
	err := ctx.Invoke("googleworkspace:index/getRole:getRole", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getRole.
type LookupRoleArgs struct {
	// Name of the role.
	Name string `pulumi:"name"`
}

// A collection of values returned by getRole.
type LookupRoleResult struct {
	// A short description of the role.
	Description string `pulumi:"description"`
	// ETag of the resource.
	Etag string `pulumi:"etag"`
	// ID of the role.
	Id string `pulumi:"id"`
	// Returns true if the role is a super admin role.
	IsSuperAdminRole bool `pulumi:"isSuperAdminRole"`
	// Returns true if this is a pre-defined system role.
	IsSystemRole bool `pulumi:"isSystemRole"`
	// Name of the role.
	Name string `pulumi:"name"`
	// The set of privileges that are granted to this role.
	Privileges []GetRolePrivilege `pulumi:"privileges"`
}

func LookupRoleOutput(ctx *pulumi.Context, args LookupRoleOutputArgs, opts ...pulumi.InvokeOption) LookupRoleResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupRoleResult, error) {
			args := v.(LookupRoleArgs)
			r, err := LookupRole(ctx, &args, opts...)
			var s LookupRoleResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupRoleResultOutput)
}

// A collection of arguments for invoking getRole.
type LookupRoleOutputArgs struct {
	// Name of the role.
	Name pulumi.StringInput `pulumi:"name"`
}

func (LookupRoleOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleArgs)(nil)).Elem()
}

// A collection of values returned by getRole.
type LookupRoleResultOutput struct{ *pulumi.OutputState }

func (LookupRoleResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupRoleResult)(nil)).Elem()
}

func (o LookupRoleResultOutput) ToLookupRoleResultOutput() LookupRoleResultOutput {
	return o
}

func (o LookupRoleResultOutput) ToLookupRoleResultOutputWithContext(ctx context.Context) LookupRoleResultOutput {
	return o
}

// A short description of the role.
func (o LookupRoleResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Description }).(pulumi.StringOutput)
}

// ETag of the resource.
func (o LookupRoleResultOutput) Etag() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Etag }).(pulumi.StringOutput)
}

// ID of the role.
func (o LookupRoleResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Id }).(pulumi.StringOutput)
}

// Returns true if the role is a super admin role.
func (o LookupRoleResultOutput) IsSuperAdminRole() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRoleResult) bool { return v.IsSuperAdminRole }).(pulumi.BoolOutput)
}

// Returns true if this is a pre-defined system role.
func (o LookupRoleResultOutput) IsSystemRole() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupRoleResult) bool { return v.IsSystemRole }).(pulumi.BoolOutput)
}

// Name of the role.
func (o LookupRoleResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupRoleResult) string { return v.Name }).(pulumi.StringOutput)
}

// The set of privileges that are granted to this role.
func (o LookupRoleResultOutput) Privileges() GetRolePrivilegeArrayOutput {
	return o.ApplyT(func(v LookupRoleResult) []GetRolePrivilege { return v.Privileges }).(GetRolePrivilegeArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupRoleResultOutput{})
}
