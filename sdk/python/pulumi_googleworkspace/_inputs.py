# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'ChromePolicyPolicyArgs',
    'GmailSendAsAliasSmtpMsaArgs',
    'GroupMembersMemberArgs',
    'RolePrivilegeArgs',
    'SchemaFieldArgs',
    'SchemaFieldNumericIndexingSpecArgs',
    'UserAddressArgs',
    'UserCustomSchemaArgs',
    'UserEmailArgs',
    'UserExternalIdArgs',
    'UserImArgs',
    'UserKeywordArgs',
    'UserLanguageArgs',
    'UserLocationArgs',
    'UserNameArgs',
    'UserOrganizationArgs',
    'UserPhoneArgs',
    'UserPosixAccountArgs',
    'UserRelationArgs',
    'UserSshPublicKeyArgs',
    'UserWebsiteArgs',
]

@pulumi.input_type
class ChromePolicyPolicyArgs:
    def __init__(__self__, *,
                 schema_name: pulumi.Input[str],
                 schema_values: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        """
        :param pulumi.Input[str] schema_name: The full qualified name of the policy schema.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] schema_values: JSON encoded map that represents key/value pairs that correspond to the given schema.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> pulumi.Input[str]:
        """
        The full qualified name of the policy schema.
        """
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        """
        JSON encoded map that represents key/value pairs that correspond to the given schema.
        """
        return pulumi.get(self, "schema_values")

    @schema_values.setter
    def schema_values(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "schema_values", value)


@pulumi.input_type
class GmailSendAsAliasSmtpMsaArgs:
    def __init__(__self__, *,
                 host: pulumi.Input[str],
                 port: pulumi.Input[int],
                 password: Optional[pulumi.Input[str]] = None,
                 security_mode: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        :param pulumi.Input[str] host: The hostname of the SMTP service.
        :param pulumi.Input[int] port: The port of the SMTP service.
        :param pulumi.Input[str] password: The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        :param pulumi.Input[str] security_mode: Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
        :param pulumi.Input[str] username: The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def host(self) -> pulumi.Input[str]:
        """
        The hostname of the SMTP service.
        """
        return pulumi.get(self, "host")

    @host.setter
    def host(self, value: pulumi.Input[str]):
        pulumi.set(self, "host", value)

    @property
    @pulumi.getter
    def port(self) -> pulumi.Input[int]:
        """
        The port of the SMTP service.
        """
        return pulumi.get(self, "port")

    @port.setter
    def port(self, value: pulumi.Input[int]):
        pulumi.set(self, "port", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[pulumi.Input[str]]:
        """
        Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
        """
        return pulumi.get(self, "security_mode")

    @security_mode.setter
    def security_mode(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "security_mode", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class GroupMembersMemberArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 delivery_settings: Optional[pulumi.Input[str]] = None,
                 id: Optional[pulumi.Input[str]] = None,
                 role: Optional[pulumi.Input[str]] = None,
                 status: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "email", email)
        if delivery_settings is not None:
            pulumi.set(__self__, "delivery_settings", delivery_settings)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="deliverySettings")
    def delivery_settings(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "delivery_settings")

    @delivery_settings.setter
    def delivery_settings(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "delivery_settings", value)

    @property
    @pulumi.getter
    def id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "id")

    @id.setter
    def id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id", value)

    @property
    @pulumi.getter
    def role(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "role")

    @role.setter
    def role(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role", value)

    @property
    @pulumi.getter
    def status(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "status")

    @status.setter
    def status(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "status", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class RolePrivilegeArgs:
    def __init__(__self__, *,
                 privilege_name: pulumi.Input[str],
                 service_id: pulumi.Input[str]):
        """
        :param pulumi.Input[str] privilege_name: The name of the privilege.
        :param pulumi.Input[str] service_id: The obfuscated ID of the service this privilege is for.
        """
        pulumi.set(__self__, "privilege_name", privilege_name)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> pulumi.Input[str]:
        """
        The name of the privilege.
        """
        return pulumi.get(self, "privilege_name")

    @privilege_name.setter
    def privilege_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "privilege_name", value)

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> pulumi.Input[str]:
        """
        The obfuscated ID of the service this privilege is for.
        """
        return pulumi.get(self, "service_id")

    @service_id.setter
    def service_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "service_id", value)


@pulumi.input_type
class SchemaFieldArgs:
    def __init__(__self__, *,
                 field_name: pulumi.Input[str],
                 field_type: pulumi.Input[str],
                 display_name: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 field_id: Optional[pulumi.Input[str]] = None,
                 indexed: Optional[pulumi.Input[bool]] = None,
                 multi_valued: Optional[pulumi.Input[bool]] = None,
                 numeric_indexing_spec: Optional[pulumi.Input['SchemaFieldNumericIndexingSpecArgs']] = None,
                 read_access_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)
        if indexed is not None:
            pulumi.set(__self__, "indexed", indexed)
        if multi_valued is not None:
            pulumi.set(__self__, "multi_valued", multi_valued)
        if numeric_indexing_spec is not None:
            pulumi.set(__self__, "numeric_indexing_spec", numeric_indexing_spec)
        if read_access_type is not None:
            pulumi.set(__self__, "read_access_type", read_access_type)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_name")

    @field_name.setter
    def field_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_name", value)

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "field_type")

    @field_type.setter
    def field_type(self, value: pulumi.Input[str]):
        pulumi.set(self, "field_type", value)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "display_name")

    @display_name.setter
    def display_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "display_name", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "field_id")

    @field_id.setter
    def field_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "field_id", value)

    @property
    @pulumi.getter
    def indexed(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "indexed")

    @indexed.setter
    def indexed(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "indexed", value)

    @property
    @pulumi.getter(name="multiValued")
    def multi_valued(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "multi_valued")

    @multi_valued.setter
    def multi_valued(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "multi_valued", value)

    @property
    @pulumi.getter(name="numericIndexingSpec")
    def numeric_indexing_spec(self) -> Optional[pulumi.Input['SchemaFieldNumericIndexingSpecArgs']]:
        return pulumi.get(self, "numeric_indexing_spec")

    @numeric_indexing_spec.setter
    def numeric_indexing_spec(self, value: Optional[pulumi.Input['SchemaFieldNumericIndexingSpecArgs']]):
        pulumi.set(self, "numeric_indexing_spec", value)

    @property
    @pulumi.getter(name="readAccessType")
    def read_access_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "read_access_type")

    @read_access_type.setter
    def read_access_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "read_access_type", value)


@pulumi.input_type
class SchemaFieldNumericIndexingSpecArgs:
    def __init__(__self__, *,
                 max_value: Optional[pulumi.Input[float]] = None,
                 min_value: Optional[pulumi.Input[float]] = None):
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "max_value")

    @max_value.setter
    def max_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "max_value", value)

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[pulumi.Input[float]]:
        return pulumi.get(self, "min_value")

    @min_value.setter
    def min_value(self, value: Optional[pulumi.Input[float]]):
        pulumi.set(self, "min_value", value)


@pulumi.input_type
class UserAddressArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 country: Optional[pulumi.Input[str]] = None,
                 country_code: Optional[pulumi.Input[str]] = None,
                 custom_type: Optional[pulumi.Input[str]] = None,
                 extended_address: Optional[pulumi.Input[str]] = None,
                 formatted: Optional[pulumi.Input[str]] = None,
                 locality: Optional[pulumi.Input[str]] = None,
                 po_box: Optional[pulumi.Input[str]] = None,
                 postal_code: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 region: Optional[pulumi.Input[str]] = None,
                 source_is_structured: Optional[pulumi.Input[bool]] = None,
                 street_address: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if extended_address is not None:
            pulumi.set(__self__, "extended_address", extended_address)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if po_box is not None:
            pulumi.set(__self__, "po_box", po_box)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_is_structured is not None:
            pulumi.set(__self__, "source_is_structured", source_is_structured)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def country(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country")

    @country.setter
    def country(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country", value)

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "country_code")

    @country_code.setter
    def country_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "country_code", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)

    @property
    @pulumi.getter(name="extendedAddress")
    def extended_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "extended_address")

    @extended_address.setter
    def extended_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "extended_address", value)

    @property
    @pulumi.getter
    def formatted(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "formatted")

    @formatted.setter
    def formatted(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "formatted", value)

    @property
    @pulumi.getter
    def locality(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "locality")

    @locality.setter
    def locality(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "locality", value)

    @property
    @pulumi.getter(name="poBox")
    def po_box(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "po_box")

    @po_box.setter
    def po_box(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "po_box", value)

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "postal_code")

    @postal_code.setter
    def postal_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "postal_code", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def region(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "region")

    @region.setter
    def region(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "region", value)

    @property
    @pulumi.getter(name="sourceIsStructured")
    def source_is_structured(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "source_is_structured")

    @source_is_structured.setter
    def source_is_structured(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "source_is_structured", value)

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "street_address")

    @street_address.setter
    def street_address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "street_address", value)


@pulumi.input_type
class UserCustomSchemaArgs:
    def __init__(__self__, *,
                 schema_name: pulumi.Input[str],
                 schema_values: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "schema_name")

    @schema_name.setter
    def schema_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "schema_name", value)

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> pulumi.Input[Mapping[str, pulumi.Input[str]]]:
        return pulumi.get(self, "schema_values")

    @schema_values.setter
    def schema_values(self, value: pulumi.Input[Mapping[str, pulumi.Input[str]]]):
        pulumi.set(self, "schema_values", value)


@pulumi.input_type
class UserEmailArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 address: Optional[pulumi.Input[str]] = None,
                 custom_type: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "type", type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)


@pulumi.input_type
class UserExternalIdArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 custom_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)


@pulumi.input_type
class UserImArgs:
    def __init__(__self__, *,
                 protocol: pulumi.Input[str],
                 type: pulumi.Input[str],
                 custom_protocol: Optional[pulumi.Input[str]] = None,
                 custom_type: Optional[pulumi.Input[str]] = None,
                 im: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)
        if custom_protocol is not None:
            pulumi.set(__self__, "custom_protocol", custom_protocol)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if im is not None:
            pulumi.set(__self__, "im", im)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def protocol(self) -> pulumi.Input[str]:
        return pulumi.get(self, "protocol")

    @protocol.setter
    def protocol(self, value: pulumi.Input[str]):
        pulumi.set(self, "protocol", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="customProtocol")
    def custom_protocol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_protocol")

    @custom_protocol.setter
    def custom_protocol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_protocol", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)

    @property
    @pulumi.getter
    def im(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "im")

    @im.setter
    def im(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "im", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)


@pulumi.input_type
class UserKeywordArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 custom_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)


@pulumi.input_type
class UserLanguageArgs:
    def __init__(__self__, *,
                 custom_language: Optional[pulumi.Input[str]] = None,
                 language_code: Optional[pulumi.Input[str]] = None,
                 preference: Optional[pulumi.Input[str]] = None):
        if custom_language is not None:
            pulumi.set(__self__, "custom_language", custom_language)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter(name="customLanguage")
    def custom_language(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_language")

    @custom_language.setter
    def custom_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_language", value)

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "language_code")

    @language_code.setter
    def language_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "language_code", value)

    @property
    @pulumi.getter
    def preference(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "preference")

    @preference.setter
    def preference(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "preference", value)


@pulumi.input_type
class UserLocationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 area: Optional[pulumi.Input[str]] = None,
                 building_id: Optional[pulumi.Input[str]] = None,
                 custom_type: Optional[pulumi.Input[str]] = None,
                 desk_code: Optional[pulumi.Input[str]] = None,
                 floor_name: Optional[pulumi.Input[str]] = None,
                 floor_section: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if building_id is not None:
            pulumi.set(__self__, "building_id", building_id)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if desk_code is not None:
            pulumi.set(__self__, "desk_code", desk_code)
        if floor_name is not None:
            pulumi.set(__self__, "floor_name", floor_name)
        if floor_section is not None:
            pulumi.set(__self__, "floor_section", floor_section)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def area(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "area")

    @area.setter
    def area(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "area", value)

    @property
    @pulumi.getter(name="buildingId")
    def building_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "building_id")

    @building_id.setter
    def building_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "building_id", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)

    @property
    @pulumi.getter(name="deskCode")
    def desk_code(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "desk_code")

    @desk_code.setter
    def desk_code(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "desk_code", value)

    @property
    @pulumi.getter(name="floorName")
    def floor_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "floor_name")

    @floor_name.setter
    def floor_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floor_name", value)

    @property
    @pulumi.getter(name="floorSection")
    def floor_section(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "floor_section")

    @floor_section.setter
    def floor_section(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "floor_section", value)


@pulumi.input_type
class UserNameArgs:
    def __init__(__self__, *,
                 family_name: pulumi.Input[str],
                 full_name: Optional[pulumi.Input[str]] = None,
                 given_name: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "family_name", family_name)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> pulumi.Input[str]:
        return pulumi.get(self, "family_name")

    @family_name.setter
    def family_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "family_name", value)

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "full_name")

    @full_name.setter
    def full_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "full_name", value)

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "given_name")

    @given_name.setter
    def given_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "given_name", value)


@pulumi.input_type
class UserOrganizationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 cost_center: Optional[pulumi.Input[str]] = None,
                 custom_type: Optional[pulumi.Input[str]] = None,
                 department: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 domain: Optional[pulumi.Input[str]] = None,
                 full_time_equivalent: Optional[pulumi.Input[int]] = None,
                 location: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 symbol: Optional[pulumi.Input[str]] = None,
                 title: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_time_equivalent is not None:
            pulumi.set(__self__, "full_time_equivalent", full_time_equivalent)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if symbol is not None:
            pulumi.set(__self__, "symbol", symbol)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "cost_center")

    @cost_center.setter
    def cost_center(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cost_center", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)

    @property
    @pulumi.getter
    def department(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "department")

    @department.setter
    def department(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "department", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def domain(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "domain")

    @domain.setter
    def domain(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "domain", value)

    @property
    @pulumi.getter(name="fullTimeEquivalent")
    def full_time_equivalent(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "full_time_equivalent")

    @full_time_equivalent.setter
    def full_time_equivalent(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "full_time_equivalent", value)

    @property
    @pulumi.getter
    def location(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "location")

    @location.setter
    def location(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "location", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def symbol(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "symbol")

    @symbol.setter
    def symbol(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "symbol", value)

    @property
    @pulumi.getter
    def title(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "title")

    @title.setter
    def title(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "title", value)


@pulumi.input_type
class UserPhoneArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 custom_type: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)


@pulumi.input_type
class UserPosixAccountArgs:
    def __init__(__self__, *,
                 account_id: Optional[pulumi.Input[str]] = None,
                 gecos: Optional[pulumi.Input[str]] = None,
                 gid: Optional[pulumi.Input[str]] = None,
                 home_directory: Optional[pulumi.Input[str]] = None,
                 operating_system_type: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None,
                 shell: Optional[pulumi.Input[str]] = None,
                 system_id: Optional[pulumi.Input[str]] = None,
                 uid: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if operating_system_type is not None:
            pulumi.set(__self__, "operating_system_type", operating_system_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if shell is not None:
            pulumi.set(__self__, "shell", shell)
        if system_id is not None:
            pulumi.set(__self__, "system_id", system_id)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "account_id")

    @account_id.setter
    def account_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "account_id", value)

    @property
    @pulumi.getter
    def gecos(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gecos")

    @gecos.setter
    def gecos(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gecos", value)

    @property
    @pulumi.getter
    def gid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "gid")

    @gid.setter
    def gid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "gid", value)

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "home_directory")

    @home_directory.setter
    def home_directory(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "home_directory", value)

    @property
    @pulumi.getter(name="operatingSystemType")
    def operating_system_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "operating_system_type")

    @operating_system_type.setter
    def operating_system_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "operating_system_type", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)

    @property
    @pulumi.getter
    def shell(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "shell")

    @shell.setter
    def shell(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "shell", value)

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "system_id")

    @system_id.setter
    def system_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "system_id", value)

    @property
    @pulumi.getter
    def uid(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "uid")

    @uid.setter
    def uid(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "uid", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


@pulumi.input_type
class UserRelationArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 custom_type: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)


@pulumi.input_type
class UserSshPublicKeyArgs:
    def __init__(__self__, *,
                 key: pulumi.Input[str],
                 expiration_time_usec: Optional[pulumi.Input[str]] = None,
                 fingerprint: Optional[pulumi.Input[str]] = None):
        pulumi.set(__self__, "key", key)
        if expiration_time_usec is not None:
            pulumi.set(__self__, "expiration_time_usec", expiration_time_usec)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)

    @property
    @pulumi.getter
    def key(self) -> pulumi.Input[str]:
        return pulumi.get(self, "key")

    @key.setter
    def key(self, value: pulumi.Input[str]):
        pulumi.set(self, "key", value)

    @property
    @pulumi.getter(name="expirationTimeUsec")
    def expiration_time_usec(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "expiration_time_usec")

    @expiration_time_usec.setter
    def expiration_time_usec(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "expiration_time_usec", value)

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "fingerprint")

    @fingerprint.setter
    def fingerprint(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "fingerprint", value)


@pulumi.input_type
class UserWebsiteArgs:
    def __init__(__self__, *,
                 type: pulumi.Input[str],
                 value: pulumi.Input[str],
                 custom_type: Optional[pulumi.Input[str]] = None,
                 primary: Optional[pulumi.Input[bool]] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def value(self) -> pulumi.Input[str]:
        return pulumi.get(self, "value")

    @value.setter
    def value(self, value: pulumi.Input[str]):
        pulumi.set(self, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "custom_type")

    @custom_type.setter
    def custom_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_type", value)

    @property
    @pulumi.getter
    def primary(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "primary")

    @primary.setter
    def primary(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "primary", value)


