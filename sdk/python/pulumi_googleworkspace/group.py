# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GroupArgs', 'Group']

@pulumi.input_type
class GroupArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Group resource.
        :param pulumi.Input[str] email: The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: asps.list of group's email addresses.
        :param pulumi.Input[str] description: An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        :param pulumi.Input[str] name: The group's display name.
        """
        pulumi.set(__self__, "email", email)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        asps.list of group's email addresses.
        """
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The group's display name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _GroupState:
    def __init__(__self__, *,
                 admin_created: Optional[pulumi.Input[bool]] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 direct_members_count: Optional[pulumi.Input[int]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 non_editable_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None):
        """
        Input properties used for looking up and filtering Group resources.
        :param pulumi.Input[bool] admin_created: Value is true if this group was created by an administrator rather than a user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: asps.list of group's email addresses.
        :param pulumi.Input[str] description: An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        :param pulumi.Input[int] direct_members_count: The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
        :param pulumi.Input[str] email: The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        :param pulumi.Input[str] etag: ETag of the resource.
        :param pulumi.Input[str] name: The group's display name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_editable_aliases: asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
        """
        if admin_created is not None:
            pulumi.set(__self__, "admin_created", admin_created)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if direct_members_count is not None:
            pulumi.set(__self__, "direct_members_count", direct_members_count)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if non_editable_aliases is not None:
            pulumi.set(__self__, "non_editable_aliases", non_editable_aliases)

    @property
    @pulumi.getter(name="adminCreated")
    def admin_created(self) -> Optional[pulumi.Input[bool]]:
        """
        Value is true if this group was created by an administrator rather than a user.
        """
        return pulumi.get(self, "admin_created")

    @admin_created.setter
    def admin_created(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "admin_created", value)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        asps.list of group's email addresses.
        """
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="directMembersCount")
    def direct_members_count(self) -> Optional[pulumi.Input[int]]:
        """
        The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
        """
        return pulumi.get(self, "direct_members_count")

    @direct_members_count.setter
    def direct_members_count(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "direct_members_count", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The group's display name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nonEditableAliases")
    def non_editable_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
        """
        return pulumi.get(self, "non_editable_aliases")

    @non_editable_aliases.setter
    def non_editable_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_editable_aliases", value)


class Group(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Group resource manages Google Workspace Groups. Group resides under the `https://www.googleapis.com/auth/admin.directory.group` client scope.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_googleworkspace as googleworkspace

        sales = googleworkspace.Group("sales",
            aliases=[
                "paper-sales@example.com",
                "sales-dept@example.com",
            ],
            description="Sales Group",
            email="sales@example.com")
        ```

        ## Import

        ```sh
         $ pulumi import googleworkspace:index/group:Group sales 01abcde23fg4h5i
        ```

        # or with email as id

        ```sh
         $ pulumi import googleworkspace:index/group:Group sales sales@example.com
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: asps.list of group's email addresses.
        :param pulumi.Input[str] description: An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        :param pulumi.Input[str] email: The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        :param pulumi.Input[str] name: The group's display name.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Group resource manages Google Workspace Groups. Group resides under the `https://www.googleapis.com/auth/admin.directory.group` client scope.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_googleworkspace as googleworkspace

        sales = googleworkspace.Group("sales",
            aliases=[
                "paper-sales@example.com",
                "sales-dept@example.com",
            ],
            description="Sales Group",
            email="sales@example.com")
        ```

        ## Import

        ```sh
         $ pulumi import googleworkspace:index/group:Group sales 01abcde23fg4h5i
        ```

        # or with email as id

        ```sh
         $ pulumi import googleworkspace:index/group:Group sales sales@example.com
        ```

        :param str resource_name: The name of the resource.
        :param GroupArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupArgs.__new__(GroupArgs)

            __props__.__dict__["aliases"] = aliases
            __props__.__dict__["description"] = description
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["name"] = name
            __props__.__dict__["admin_created"] = None
            __props__.__dict__["direct_members_count"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["non_editable_aliases"] = None
        super(Group, __self__).__init__(
            'googleworkspace:index/group:Group',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            admin_created: Optional[pulumi.Input[bool]] = None,
            aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            description: Optional[pulumi.Input[str]] = None,
            direct_members_count: Optional[pulumi.Input[int]] = None,
            email: Optional[pulumi.Input[str]] = None,
            etag: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            non_editable_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None) -> 'Group':
        """
        Get an existing Group resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] admin_created: Value is true if this group was created by an administrator rather than a user.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: asps.list of group's email addresses.
        :param pulumi.Input[str] description: An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        :param pulumi.Input[int] direct_members_count: The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
        :param pulumi.Input[str] email: The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        :param pulumi.Input[str] etag: ETag of the resource.
        :param pulumi.Input[str] name: The group's display name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_editable_aliases: asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupState.__new__(_GroupState)

        __props__.__dict__["admin_created"] = admin_created
        __props__.__dict__["aliases"] = aliases
        __props__.__dict__["description"] = description
        __props__.__dict__["direct_members_count"] = direct_members_count
        __props__.__dict__["email"] = email
        __props__.__dict__["etag"] = etag
        __props__.__dict__["name"] = name
        __props__.__dict__["non_editable_aliases"] = non_editable_aliases
        return Group(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="adminCreated")
    def admin_created(self) -> pulumi.Output[bool]:
        """
        Value is true if this group was created by an administrator rather than a user.
        """
        return pulumi.get(self, "admin_created")

    @property
    @pulumi.getter
    def aliases(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        asps.list of group's email addresses.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directMembersCount")
    def direct_members_count(self) -> pulumi.Output[int]:
        """
        The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
        """
        return pulumi.get(self, "direct_members_count")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        The group's email address. If your account has multiple domains,select the appropriate domain for the email address. The email must be unique.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The group's display name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nonEditableAliases")
    def non_editable_aliases(self) -> pulumi.Output[Sequence[str]]:
        """
        asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
        """
        return pulumi.get(self, "non_editable_aliases")

