# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetGroupMemberResult',
    'AwaitableGetGroupMemberResult',
    'get_group_member',
    'get_group_member_output',
]

@pulumi.output_type
class GetGroupMemberResult:
    """
    A collection of values returned by getGroupMember.
    """
    def __init__(__self__, delivery_settings=None, email=None, etag=None, group_id=None, id=None, member_id=None, role=None, status=None, type=None):
        if delivery_settings and not isinstance(delivery_settings, str):
            raise TypeError("Expected argument 'delivery_settings' to be a str")
        pulumi.set(__self__, "delivery_settings", delivery_settings)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if group_id and not isinstance(group_id, str):
            raise TypeError("Expected argument 'group_id' to be a str")
        pulumi.set(__self__, "group_id", group_id)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if member_id and not isinstance(member_id, str):
            raise TypeError("Expected argument 'member_id' to be a str")
        pulumi.set(__self__, "member_id", member_id)
        if role and not isinstance(role, str):
            raise TypeError("Expected argument 'role' to be a str")
        pulumi.set(__self__, "role", role)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="deliverySettings")
    def delivery_settings(self) -> str:
        return pulumi.get(self, "delivery_settings")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def etag(self) -> str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="groupId")
    def group_id(self) -> str:
        return pulumi.get(self, "group_id")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="memberId")
    def member_id(self) -> str:
        return pulumi.get(self, "member_id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


class AwaitableGetGroupMemberResult(GetGroupMemberResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupMemberResult(
            delivery_settings=self.delivery_settings,
            email=self.email,
            etag=self.etag,
            group_id=self.group_id,
            id=self.id,
            member_id=self.member_id,
            role=self.role,
            status=self.status,
            type=self.type)


def get_group_member(email: Optional[str] = None,
                     group_id: Optional[str] = None,
                     member_id: Optional[str] = None,
                     opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupMemberResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_googleworkspace as googleworkspace

    sales = googleworkspace.get_group(email="sales@example.com")
    my_group_member = googleworkspace.get_group_member(group_id=sales.id,
        email="michael.scott@example.com")
    pulumi.export("groupMemberRole", my_group_member.role)
    ```
    """
    __args__ = dict()
    __args__['email'] = email
    __args__['groupId'] = group_id
    __args__['memberId'] = member_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('googleworkspace:index/getGroupMember:getGroupMember', __args__, opts=opts, typ=GetGroupMemberResult).value

    return AwaitableGetGroupMemberResult(
        delivery_settings=__ret__.delivery_settings,
        email=__ret__.email,
        etag=__ret__.etag,
        group_id=__ret__.group_id,
        id=__ret__.id,
        member_id=__ret__.member_id,
        role=__ret__.role,
        status=__ret__.status,
        type=__ret__.type)


@_utilities.lift_output_func(get_group_member)
def get_group_member_output(email: Optional[pulumi.Input[Optional[str]]] = None,
                            group_id: Optional[pulumi.Input[str]] = None,
                            member_id: Optional[pulumi.Input[Optional[str]]] = None,
                            opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupMemberResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_googleworkspace as googleworkspace

    sales = googleworkspace.get_group(email="sales@example.com")
    my_group_member = googleworkspace.get_group_member(group_id=sales.id,
        email="michael.scott@example.com")
    pulumi.export("groupMemberRole", my_group_member.role)
    ```
    """
    ...
