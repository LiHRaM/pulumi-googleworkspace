# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'ChromePolicyPolicy',
    'GmailSendAsAliasSmtpMsa',
    'GroupMembersMember',
    'RolePrivilege',
    'SchemaField',
    'SchemaFieldNumericIndexingSpec',
    'UserAddress',
    'UserCustomSchema',
    'UserEmail',
    'UserExternalId',
    'UserIm',
    'UserKeyword',
    'UserLanguage',
    'UserLocation',
    'UserName',
    'UserOrganization',
    'UserPhone',
    'UserPosixAccount',
    'UserRelation',
    'UserSshPublicKey',
    'UserWebsite',
    'GetChromePolicySchemaAdditionalTargetKeyNameResult',
    'GetChromePolicySchemaDefinitionResult',
    'GetChromePolicySchemaDefinitionEnumTypeResult',
    'GetChromePolicySchemaDefinitionEnumTypeValueResult',
    'GetChromePolicySchemaNoticeResult',
    'GetGroupMembersMemberResult',
    'GetGroupsGroupResult',
    'GetPrivilegesItemResult',
    'GetRolePrivilegeResult',
    'GetSchemaFieldResult',
    'GetSchemaFieldNumericIndexingSpecResult',
    'GetUserAddressResult',
    'GetUserCustomSchemaResult',
    'GetUserEmailResult',
    'GetUserExternalIdResult',
    'GetUserImResult',
    'GetUserKeywordResult',
    'GetUserLanguageResult',
    'GetUserLocationResult',
    'GetUserNameResult',
    'GetUserOrganizationResult',
    'GetUserPhoneResult',
    'GetUserPosixAccountResult',
    'GetUserRelationResult',
    'GetUserSshPublicKeyResult',
    'GetUserWebsiteResult',
    'GetUsersUserResult',
    'GetUsersUserAddressResult',
    'GetUsersUserCustomSchemaResult',
    'GetUsersUserEmailResult',
    'GetUsersUserExternalIdResult',
    'GetUsersUserImResult',
    'GetUsersUserKeywordResult',
    'GetUsersUserLanguageResult',
    'GetUsersUserLocationResult',
    'GetUsersUserNameResult',
    'GetUsersUserOrganizationResult',
    'GetUsersUserPhoneResult',
    'GetUsersUserPosixAccountResult',
    'GetUsersUserRelationResult',
    'GetUsersUserSshPublicKeyResult',
    'GetUsersUserWebsiteResult',
]

@pulumi.output_type
class ChromePolicyPolicy(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaName":
            suggest = "schema_name"
        elif key == "schemaValues":
            suggest = "schema_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in ChromePolicyPolicy. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        ChromePolicyPolicy.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        ChromePolicyPolicy.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schema_name: str,
                 schema_values: Mapping[str, str]):
        """
        :param str schema_name: The full qualified name of the policy schema.
        :param Mapping[str, str] schema_values: JSON encoded map that represents key/value pairs that correspond to the given schema.
        """
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        """
        The full qualified name of the policy schema.
        """
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> Mapping[str, str]:
        """
        JSON encoded map that represents key/value pairs that correspond to the given schema.
        """
        return pulumi.get(self, "schema_values")


@pulumi.output_type
class GmailSendAsAliasSmtpMsa(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "securityMode":
            suggest = "security_mode"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GmailSendAsAliasSmtpMsa. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GmailSendAsAliasSmtpMsa.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GmailSendAsAliasSmtpMsa.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 host: str,
                 port: int,
                 password: Optional[str] = None,
                 security_mode: Optional[str] = None,
                 username: Optional[str] = None):
        """
        :param str host: The hostname of the SMTP service.
        :param int port: The port of the SMTP service.
        :param str password: The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        :param str security_mode: Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
        :param str username: The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        pulumi.set(__self__, "host", host)
        pulumi.set(__self__, "port", port)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if security_mode is not None:
            pulumi.set(__self__, "security_mode", security_mode)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter
    def host(self) -> str:
        """
        The hostname of the SMTP service.
        """
        return pulumi.get(self, "host")

    @property
    @pulumi.getter
    def port(self) -> int:
        """
        The port of the SMTP service.
        """
        return pulumi.get(self, "port")

    @property
    @pulumi.getter
    def password(self) -> Optional[str]:
        """
        The password that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="securityMode")
    def security_mode(self) -> Optional[str]:
        """
        Defaults to `securityModeUnspecified`. The protocol that will be used to secure communication with the SMTP service.
        """
        return pulumi.get(self, "security_mode")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        """
        The username that will be used for authentication with the SMTP service. This is a write-only field that can be specified in requests to create or update SendAs settings; it is never populated in responses.
        """
        return pulumi.get(self, "username")


@pulumi.output_type
class GroupMembersMember(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "deliverySettings":
            suggest = "delivery_settings"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in GroupMembersMember. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        GroupMembersMember.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        GroupMembersMember.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 email: str,
                 delivery_settings: Optional[str] = None,
                 id: Optional[str] = None,
                 role: Optional[str] = None,
                 status: Optional[str] = None,
                 type: Optional[str] = None):
        pulumi.set(__self__, "email", email)
        if delivery_settings is not None:
            pulumi.set(__self__, "delivery_settings", delivery_settings)
        if id is not None:
            pulumi.set(__self__, "id", id)
        if role is not None:
            pulumi.set(__self__, "role", role)
        if status is not None:
            pulumi.set(__self__, "status", status)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="deliverySettings")
    def delivery_settings(self) -> Optional[str]:
        return pulumi.get(self, "delivery_settings")

    @property
    @pulumi.getter
    def id(self) -> Optional[str]:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def role(self) -> Optional[str]:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> Optional[str]:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> Optional[str]:
        return pulumi.get(self, "type")


@pulumi.output_type
class RolePrivilege(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "privilegeName":
            suggest = "privilege_name"
        elif key == "serviceId":
            suggest = "service_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in RolePrivilege. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        RolePrivilege.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        RolePrivilege.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 privilege_name: str,
                 service_id: str):
        """
        :param str privilege_name: The name of the privilege.
        :param str service_id: The obfuscated ID of the service this privilege is for.
        """
        pulumi.set(__self__, "privilege_name", privilege_name)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> str:
        """
        The name of the privilege.
        """
        return pulumi.get(self, "privilege_name")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        """
        The obfuscated ID of the service this privilege is for.
        """
        return pulumi.get(self, "service_id")


@pulumi.output_type
class SchemaField(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "fieldName":
            suggest = "field_name"
        elif key == "fieldType":
            suggest = "field_type"
        elif key == "displayName":
            suggest = "display_name"
        elif key == "fieldId":
            suggest = "field_id"
        elif key == "multiValued":
            suggest = "multi_valued"
        elif key == "numericIndexingSpec":
            suggest = "numeric_indexing_spec"
        elif key == "readAccessType":
            suggest = "read_access_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaField. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaField.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaField.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 field_name: str,
                 field_type: str,
                 display_name: Optional[str] = None,
                 etag: Optional[str] = None,
                 field_id: Optional[str] = None,
                 indexed: Optional[bool] = None,
                 multi_valued: Optional[bool] = None,
                 numeric_indexing_spec: Optional['outputs.SchemaFieldNumericIndexingSpec'] = None,
                 read_access_type: Optional[str] = None):
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)
        if display_name is not None:
            pulumi.set(__self__, "display_name", display_name)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if field_id is not None:
            pulumi.set(__self__, "field_id", field_id)
        if indexed is not None:
            pulumi.set(__self__, "indexed", indexed)
        if multi_valued is not None:
            pulumi.set(__self__, "multi_valued", multi_valued)
        if numeric_indexing_spec is not None:
            pulumi.set(__self__, "numeric_indexing_spec", numeric_indexing_spec)
        if read_access_type is not None:
            pulumi.set(__self__, "read_access_type", read_access_type)

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> str:
        return pulumi.get(self, "field_type")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> Optional[str]:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> Optional[str]:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter
    def indexed(self) -> Optional[bool]:
        return pulumi.get(self, "indexed")

    @property
    @pulumi.getter(name="multiValued")
    def multi_valued(self) -> Optional[bool]:
        return pulumi.get(self, "multi_valued")

    @property
    @pulumi.getter(name="numericIndexingSpec")
    def numeric_indexing_spec(self) -> Optional['outputs.SchemaFieldNumericIndexingSpec']:
        return pulumi.get(self, "numeric_indexing_spec")

    @property
    @pulumi.getter(name="readAccessType")
    def read_access_type(self) -> Optional[str]:
        return pulumi.get(self, "read_access_type")


@pulumi.output_type
class SchemaFieldNumericIndexingSpec(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "maxValue":
            suggest = "max_value"
        elif key == "minValue":
            suggest = "min_value"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in SchemaFieldNumericIndexingSpec. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        SchemaFieldNumericIndexingSpec.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        SchemaFieldNumericIndexingSpec.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 max_value: Optional[float] = None,
                 min_value: Optional[float] = None):
        if max_value is not None:
            pulumi.set(__self__, "max_value", max_value)
        if min_value is not None:
            pulumi.set(__self__, "min_value", min_value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> Optional[float]:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> Optional[float]:
        return pulumi.get(self, "min_value")


@pulumi.output_type
class UserAddress(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "countryCode":
            suggest = "country_code"
        elif key == "customType":
            suggest = "custom_type"
        elif key == "extendedAddress":
            suggest = "extended_address"
        elif key == "poBox":
            suggest = "po_box"
        elif key == "postalCode":
            suggest = "postal_code"
        elif key == "sourceIsStructured":
            suggest = "source_is_structured"
        elif key == "streetAddress":
            suggest = "street_address"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserAddress. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserAddress.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserAddress.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 country: Optional[str] = None,
                 country_code: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 extended_address: Optional[str] = None,
                 formatted: Optional[str] = None,
                 locality: Optional[str] = None,
                 po_box: Optional[str] = None,
                 postal_code: Optional[str] = None,
                 primary: Optional[bool] = None,
                 region: Optional[str] = None,
                 source_is_structured: Optional[bool] = None,
                 street_address: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if country is not None:
            pulumi.set(__self__, "country", country)
        if country_code is not None:
            pulumi.set(__self__, "country_code", country_code)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if extended_address is not None:
            pulumi.set(__self__, "extended_address", extended_address)
        if formatted is not None:
            pulumi.set(__self__, "formatted", formatted)
        if locality is not None:
            pulumi.set(__self__, "locality", locality)
        if po_box is not None:
            pulumi.set(__self__, "po_box", po_box)
        if postal_code is not None:
            pulumi.set(__self__, "postal_code", postal_code)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if region is not None:
            pulumi.set(__self__, "region", region)
        if source_is_structured is not None:
            pulumi.set(__self__, "source_is_structured", source_is_structured)
        if street_address is not None:
            pulumi.set(__self__, "street_address", street_address)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def country(self) -> Optional[str]:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> Optional[str]:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="extendedAddress")
    def extended_address(self) -> Optional[str]:
        return pulumi.get(self, "extended_address")

    @property
    @pulumi.getter
    def formatted(self) -> Optional[str]:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> Optional[str]:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="poBox")
    def po_box(self) -> Optional[str]:
        return pulumi.get(self, "po_box")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> Optional[str]:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> Optional[str]:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceIsStructured")
    def source_is_structured(self) -> Optional[bool]:
        return pulumi.get(self, "source_is_structured")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> Optional[str]:
        return pulumi.get(self, "street_address")


@pulumi.output_type
class UserCustomSchema(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "schemaName":
            suggest = "schema_name"
        elif key == "schemaValues":
            suggest = "schema_values"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserCustomSchema. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserCustomSchema.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserCustomSchema.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 schema_name: str,
                 schema_values: Mapping[str, str]):
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> Mapping[str, str]:
        return pulumi.get(self, "schema_values")


@pulumi.output_type
class UserEmail(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserEmail. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserEmail.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserEmail.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 address: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 primary: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        if address is not None:
            pulumi.set(__self__, "address", address)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def address(self) -> Optional[str]:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")


@pulumi.output_type
class UserExternalId(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserExternalId. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserExternalId.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserExternalId.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")


@pulumi.output_type
class UserIm(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customProtocol":
            suggest = "custom_protocol"
        elif key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserIm. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserIm.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserIm.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 protocol: str,
                 type: str,
                 custom_protocol: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 im: Optional[str] = None,
                 primary: Optional[bool] = None):
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)
        if custom_protocol is not None:
            pulumi.set(__self__, "custom_protocol", custom_protocol)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if im is not None:
            pulumi.set(__self__, "im", im)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="customProtocol")
    def custom_protocol(self) -> Optional[str]:
        return pulumi.get(self, "custom_protocol")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def im(self) -> Optional[str]:
        return pulumi.get(self, "im")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")


@pulumi.output_type
class UserKeyword(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserKeyword. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserKeyword.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserKeyword.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")


@pulumi.output_type
class UserLanguage(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customLanguage":
            suggest = "custom_language"
        elif key == "languageCode":
            suggest = "language_code"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserLanguage. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserLanguage.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserLanguage.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 custom_language: Optional[str] = None,
                 language_code: Optional[str] = None,
                 preference: Optional[str] = None):
        if custom_language is not None:
            pulumi.set(__self__, "custom_language", custom_language)
        if language_code is not None:
            pulumi.set(__self__, "language_code", language_code)
        if preference is not None:
            pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter(name="customLanguage")
    def custom_language(self) -> Optional[str]:
        return pulumi.get(self, "custom_language")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> Optional[str]:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def preference(self) -> Optional[str]:
        return pulumi.get(self, "preference")


@pulumi.output_type
class UserLocation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "buildingId":
            suggest = "building_id"
        elif key == "customType":
            suggest = "custom_type"
        elif key == "deskCode":
            suggest = "desk_code"
        elif key == "floorName":
            suggest = "floor_name"
        elif key == "floorSection":
            suggest = "floor_section"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserLocation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserLocation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserLocation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 area: Optional[str] = None,
                 building_id: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 desk_code: Optional[str] = None,
                 floor_name: Optional[str] = None,
                 floor_section: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if area is not None:
            pulumi.set(__self__, "area", area)
        if building_id is not None:
            pulumi.set(__self__, "building_id", building_id)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if desk_code is not None:
            pulumi.set(__self__, "desk_code", desk_code)
        if floor_name is not None:
            pulumi.set(__self__, "floor_name", floor_name)
        if floor_section is not None:
            pulumi.set(__self__, "floor_section", floor_section)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def area(self) -> Optional[str]:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="buildingId")
    def building_id(self) -> Optional[str]:
        return pulumi.get(self, "building_id")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="deskCode")
    def desk_code(self) -> Optional[str]:
        return pulumi.get(self, "desk_code")

    @property
    @pulumi.getter(name="floorName")
    def floor_name(self) -> Optional[str]:
        return pulumi.get(self, "floor_name")

    @property
    @pulumi.getter(name="floorSection")
    def floor_section(self) -> Optional[str]:
        return pulumi.get(self, "floor_section")


@pulumi.output_type
class UserName(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "familyName":
            suggest = "family_name"
        elif key == "fullName":
            suggest = "full_name"
        elif key == "givenName":
            suggest = "given_name"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserName. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserName.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserName.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 family_name: str,
                 full_name: Optional[str] = None,
                 given_name: Optional[str] = None):
        pulumi.set(__self__, "family_name", family_name)
        if full_name is not None:
            pulumi.set(__self__, "full_name", full_name)
        if given_name is not None:
            pulumi.set(__self__, "given_name", given_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> Optional[str]:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> Optional[str]:
        return pulumi.get(self, "given_name")


@pulumi.output_type
class UserOrganization(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "costCenter":
            suggest = "cost_center"
        elif key == "customType":
            suggest = "custom_type"
        elif key == "fullTimeEquivalent":
            suggest = "full_time_equivalent"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserOrganization. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserOrganization.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserOrganization.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 cost_center: Optional[str] = None,
                 custom_type: Optional[str] = None,
                 department: Optional[str] = None,
                 description: Optional[str] = None,
                 domain: Optional[str] = None,
                 full_time_equivalent: Optional[int] = None,
                 location: Optional[str] = None,
                 name: Optional[str] = None,
                 primary: Optional[bool] = None,
                 symbol: Optional[str] = None,
                 title: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        if cost_center is not None:
            pulumi.set(__self__, "cost_center", cost_center)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if department is not None:
            pulumi.set(__self__, "department", department)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if domain is not None:
            pulumi.set(__self__, "domain", domain)
        if full_time_equivalent is not None:
            pulumi.set(__self__, "full_time_equivalent", full_time_equivalent)
        if location is not None:
            pulumi.set(__self__, "location", location)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if symbol is not None:
            pulumi.set(__self__, "symbol", symbol)
        if title is not None:
            pulumi.set(__self__, "title", title)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> Optional[str]:
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def department(self) -> Optional[str]:
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def description(self) -> Optional[str]:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> Optional[str]:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullTimeEquivalent")
    def full_time_equivalent(self) -> Optional[int]:
        return pulumi.get(self, "full_time_equivalent")

    @property
    @pulumi.getter
    def location(self) -> Optional[str]:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> Optional[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def symbol(self) -> Optional[str]:
        return pulumi.get(self, "symbol")

    @property
    @pulumi.getter
    def title(self) -> Optional[str]:
        return pulumi.get(self, "title")


@pulumi.output_type
class UserPhone(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPhone. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPhone.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPhone.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None,
                 primary: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")


@pulumi.output_type
class UserPosixAccount(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "accountId":
            suggest = "account_id"
        elif key == "homeDirectory":
            suggest = "home_directory"
        elif key == "operatingSystemType":
            suggest = "operating_system_type"
        elif key == "systemId":
            suggest = "system_id"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserPosixAccount. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserPosixAccount.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserPosixAccount.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 account_id: Optional[str] = None,
                 gecos: Optional[str] = None,
                 gid: Optional[str] = None,
                 home_directory: Optional[str] = None,
                 operating_system_type: Optional[str] = None,
                 primary: Optional[bool] = None,
                 shell: Optional[str] = None,
                 system_id: Optional[str] = None,
                 uid: Optional[str] = None,
                 username: Optional[str] = None):
        if account_id is not None:
            pulumi.set(__self__, "account_id", account_id)
        if gecos is not None:
            pulumi.set(__self__, "gecos", gecos)
        if gid is not None:
            pulumi.set(__self__, "gid", gid)
        if home_directory is not None:
            pulumi.set(__self__, "home_directory", home_directory)
        if operating_system_type is not None:
            pulumi.set(__self__, "operating_system_type", operating_system_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)
        if shell is not None:
            pulumi.set(__self__, "shell", shell)
        if system_id is not None:
            pulumi.set(__self__, "system_id", system_id)
        if uid is not None:
            pulumi.set(__self__, "uid", uid)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> Optional[str]:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def gecos(self) -> Optional[str]:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter
    def gid(self) -> Optional[str]:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> Optional[str]:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="operatingSystemType")
    def operating_system_type(self) -> Optional[str]:
        return pulumi.get(self, "operating_system_type")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def shell(self) -> Optional[str]:
        return pulumi.get(self, "shell")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> Optional[str]:
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter
    def uid(self) -> Optional[str]:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def username(self) -> Optional[str]:
        return pulumi.get(self, "username")


@pulumi.output_type
class UserRelation(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserRelation. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserRelation.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserRelation.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")


@pulumi.output_type
class UserSshPublicKey(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "expirationTimeUsec":
            suggest = "expiration_time_usec"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserSshPublicKey. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserSshPublicKey.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserSshPublicKey.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 key: str,
                 expiration_time_usec: Optional[str] = None,
                 fingerprint: Optional[str] = None):
        pulumi.set(__self__, "key", key)
        if expiration_time_usec is not None:
            pulumi.set(__self__, "expiration_time_usec", expiration_time_usec)
        if fingerprint is not None:
            pulumi.set(__self__, "fingerprint", fingerprint)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="expirationTimeUsec")
    def expiration_time_usec(self) -> Optional[str]:
        return pulumi.get(self, "expiration_time_usec")

    @property
    @pulumi.getter
    def fingerprint(self) -> Optional[str]:
        return pulumi.get(self, "fingerprint")


@pulumi.output_type
class UserWebsite(dict):
    @staticmethod
    def __key_warning(key: str):
        suggest = None
        if key == "customType":
            suggest = "custom_type"

        if suggest:
            pulumi.log.warn(f"Key '{key}' not found in UserWebsite. Access the value via the '{suggest}' property getter instead.")

    def __getitem__(self, key: str) -> Any:
        UserWebsite.__key_warning(key)
        return super().__getitem__(key)

    def get(self, key: str, default = None) -> Any:
        UserWebsite.__key_warning(key)
        return super().get(key, default)

    def __init__(__self__, *,
                 type: str,
                 value: str,
                 custom_type: Optional[str] = None,
                 primary: Optional[bool] = None):
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)
        if custom_type is not None:
            pulumi.set(__self__, "custom_type", custom_type)
        if primary is not None:
            pulumi.set(__self__, "primary", primary)

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> Optional[str]:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> Optional[bool]:
        return pulumi.get(self, "primary")


@pulumi.output_type
class GetChromePolicySchemaAdditionalTargetKeyNameResult(dict):
    def __init__(__self__, *,
                 key: str,
                 key_description: str):
        pulumi.set(__self__, "key", key)
        pulumi.set(__self__, "key_description", key_description)

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")

    @property
    @pulumi.getter(name="keyDescription")
    def key_description(self) -> str:
        return pulumi.get(self, "key_description")


@pulumi.output_type
class GetChromePolicySchemaDefinitionResult(dict):
    def __init__(__self__, *,
                 enum_types: Sequence['outputs.GetChromePolicySchemaDefinitionEnumTypeResult'],
                 message_type: str,
                 name: str,
                 package: str,
                 syntax: str):
        pulumi.set(__self__, "enum_types", enum_types)
        pulumi.set(__self__, "message_type", message_type)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "package", package)
        pulumi.set(__self__, "syntax", syntax)

    @property
    @pulumi.getter(name="enumTypes")
    def enum_types(self) -> Sequence['outputs.GetChromePolicySchemaDefinitionEnumTypeResult']:
        return pulumi.get(self, "enum_types")

    @property
    @pulumi.getter(name="messageType")
    def message_type(self) -> str:
        return pulumi.get(self, "message_type")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def package(self) -> str:
        return pulumi.get(self, "package")

    @property
    @pulumi.getter
    def syntax(self) -> str:
        return pulumi.get(self, "syntax")


@pulumi.output_type
class GetChromePolicySchemaDefinitionEnumTypeResult(dict):
    def __init__(__self__, *,
                 name: str,
                 values: Sequence['outputs.GetChromePolicySchemaDefinitionEnumTypeValueResult']):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "values", values)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def values(self) -> Sequence['outputs.GetChromePolicySchemaDefinitionEnumTypeValueResult']:
        return pulumi.get(self, "values")


@pulumi.output_type
class GetChromePolicySchemaDefinitionEnumTypeValueResult(dict):
    def __init__(__self__, *,
                 name: str,
                 number: int):
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "number", number)

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def number(self) -> int:
        return pulumi.get(self, "number")


@pulumi.output_type
class GetChromePolicySchemaNoticeResult(dict):
    def __init__(__self__, *,
                 acknowledgement_required: bool,
                 field: str,
                 notice_message: str,
                 notice_value: str):
        pulumi.set(__self__, "acknowledgement_required", acknowledgement_required)
        pulumi.set(__self__, "field", field)
        pulumi.set(__self__, "notice_message", notice_message)
        pulumi.set(__self__, "notice_value", notice_value)

    @property
    @pulumi.getter(name="acknowledgementRequired")
    def acknowledgement_required(self) -> bool:
        return pulumi.get(self, "acknowledgement_required")

    @property
    @pulumi.getter
    def field(self) -> str:
        return pulumi.get(self, "field")

    @property
    @pulumi.getter(name="noticeMessage")
    def notice_message(self) -> str:
        return pulumi.get(self, "notice_message")

    @property
    @pulumi.getter(name="noticeValue")
    def notice_value(self) -> str:
        return pulumi.get(self, "notice_value")


@pulumi.output_type
class GetGroupMembersMemberResult(dict):
    def __init__(__self__, *,
                 delivery_settings: str,
                 email: str,
                 id: str,
                 role: str,
                 status: str,
                 type: str):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "delivery_settings", delivery_settings)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "role", role)
        pulumi.set(__self__, "status", status)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="deliverySettings")
    def delivery_settings(self) -> str:
        return pulumi.get(self, "delivery_settings")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def role(self) -> str:
        return pulumi.get(self, "role")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetGroupsGroupResult(dict):
    def __init__(__self__, *,
                 admin_created: bool,
                 aliases: Sequence[str],
                 description: str,
                 direct_members_count: int,
                 email: str,
                 etag: str,
                 id: str,
                 name: str,
                 non_editable_aliases: Sequence[str]):
        """
        :param bool admin_created: Value is true if this group was created by an administrator rather than a user.
        :param Sequence[str] aliases: asps.list of group's email addresses.
        :param str description: An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        :param int direct_members_count: The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
        :param str etag: ETag of the resource.
        :param str id: The ID of this resource.
        :param str name: The group's display name.
        :param Sequence[str] non_editable_aliases: asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
        """
        pulumi.set(__self__, "admin_created", admin_created)
        pulumi.set(__self__, "aliases", aliases)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "direct_members_count", direct_members_count)
        pulumi.set(__self__, "email", email)
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "non_editable_aliases", non_editable_aliases)

    @property
    @pulumi.getter(name="adminCreated")
    def admin_created(self) -> bool:
        """
        Value is true if this group was created by an administrator rather than a user.
        """
        return pulumi.get(self, "admin_created")

    @property
    @pulumi.getter
    def aliases(self) -> Sequence[str]:
        """
        asps.list of group's email addresses.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        An extended description to help users determine the purpose of a group.For example, you can include information about who should join the group,the types of messages to send to the group, links to FAQs about the group, or related groups.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="directMembersCount")
    def direct_members_count(self) -> int:
        """
        The number of users that are direct members of the group.If a group is a member (child) of this group (the parent),members of the child group are not counted in the directMembersCount property of the parent group.
        """
        return pulumi.get(self, "direct_members_count")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        The group's display name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nonEditableAliases")
    def non_editable_aliases(self) -> Sequence[str]:
        """
        asps.list of the group's non-editable alias email addresses that are outside of the account's primary domain or subdomains. These are functioning email addresses used by the group.
        """
        return pulumi.get(self, "non_editable_aliases")


@pulumi.output_type
class GetPrivilegesItemResult(dict):
    def __init__(__self__, *,
                 etag: str,
                 is_org_unit_scopable: bool,
                 privilege_name: str,
                 service_id: str,
                 service_name: str):
        """
        :param str etag: ETag of the resource.
        """
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "is_org_unit_scopable", is_org_unit_scopable)
        pulumi.set(__self__, "privilege_name", privilege_name)
        pulumi.set(__self__, "service_id", service_id)
        pulumi.set(__self__, "service_name", service_name)

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="isOrgUnitScopable")
    def is_org_unit_scopable(self) -> bool:
        return pulumi.get(self, "is_org_unit_scopable")

    @property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> str:
        return pulumi.get(self, "privilege_name")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")

    @property
    @pulumi.getter(name="serviceName")
    def service_name(self) -> str:
        return pulumi.get(self, "service_name")


@pulumi.output_type
class GetRolePrivilegeResult(dict):
    def __init__(__self__, *,
                 privilege_name: str,
                 service_id: str):
        pulumi.set(__self__, "privilege_name", privilege_name)
        pulumi.set(__self__, "service_id", service_id)

    @property
    @pulumi.getter(name="privilegeName")
    def privilege_name(self) -> str:
        return pulumi.get(self, "privilege_name")

    @property
    @pulumi.getter(name="serviceId")
    def service_id(self) -> str:
        return pulumi.get(self, "service_id")


@pulumi.output_type
class GetSchemaFieldResult(dict):
    def __init__(__self__, *,
                 display_name: str,
                 etag: str,
                 field_id: str,
                 field_name: str,
                 field_type: str,
                 indexed: bool,
                 multi_valued: bool,
                 numeric_indexing_specs: Sequence['outputs.GetSchemaFieldNumericIndexingSpecResult'],
                 read_access_type: str):
        """
        :param str display_name: Display name for the schema.
        :param str etag: ETag of the resource.
        """
        pulumi.set(__self__, "display_name", display_name)
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "field_id", field_id)
        pulumi.set(__self__, "field_name", field_name)
        pulumi.set(__self__, "field_type", field_type)
        pulumi.set(__self__, "indexed", indexed)
        pulumi.set(__self__, "multi_valued", multi_valued)
        pulumi.set(__self__, "numeric_indexing_specs", numeric_indexing_specs)
        pulumi.set(__self__, "read_access_type", read_access_type)

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> str:
        """
        Display name for the schema.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="fieldId")
    def field_id(self) -> str:
        return pulumi.get(self, "field_id")

    @property
    @pulumi.getter(name="fieldName")
    def field_name(self) -> str:
        return pulumi.get(self, "field_name")

    @property
    @pulumi.getter(name="fieldType")
    def field_type(self) -> str:
        return pulumi.get(self, "field_type")

    @property
    @pulumi.getter
    def indexed(self) -> bool:
        return pulumi.get(self, "indexed")

    @property
    @pulumi.getter(name="multiValued")
    def multi_valued(self) -> bool:
        return pulumi.get(self, "multi_valued")

    @property
    @pulumi.getter(name="numericIndexingSpecs")
    def numeric_indexing_specs(self) -> Sequence['outputs.GetSchemaFieldNumericIndexingSpecResult']:
        return pulumi.get(self, "numeric_indexing_specs")

    @property
    @pulumi.getter(name="readAccessType")
    def read_access_type(self) -> str:
        return pulumi.get(self, "read_access_type")


@pulumi.output_type
class GetSchemaFieldNumericIndexingSpecResult(dict):
    def __init__(__self__, *,
                 max_value: float,
                 min_value: float):
        pulumi.set(__self__, "max_value", max_value)
        pulumi.set(__self__, "min_value", min_value)

    @property
    @pulumi.getter(name="maxValue")
    def max_value(self) -> float:
        return pulumi.get(self, "max_value")

    @property
    @pulumi.getter(name="minValue")
    def min_value(self) -> float:
        return pulumi.get(self, "min_value")


@pulumi.output_type
class GetUserAddressResult(dict):
    def __init__(__self__, *,
                 country: str,
                 country_code: str,
                 custom_type: str,
                 extended_address: str,
                 formatted: str,
                 locality: str,
                 po_box: str,
                 postal_code: str,
                 primary: bool,
                 region: str,
                 source_is_structured: bool,
                 street_address: str,
                 type: str):
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "extended_address", extended_address)
        pulumi.set(__self__, "formatted", formatted)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "po_box", po_box)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_is_structured", source_is_structured)
        pulumi.set(__self__, "street_address", street_address)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="extendedAddress")
    def extended_address(self) -> str:
        return pulumi.get(self, "extended_address")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> str:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="poBox")
    def po_box(self) -> str:
        return pulumi.get(self, "po_box")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceIsStructured")
    def source_is_structured(self) -> bool:
        return pulumi.get(self, "source_is_structured")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> str:
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserCustomSchemaResult(dict):
    def __init__(__self__, *,
                 schema_name: str,
                 schema_values: Mapping[str, str]):
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> Mapping[str, str]:
        return pulumi.get(self, "schema_values")


@pulumi.output_type
class GetUserEmailResult(dict):
    def __init__(__self__, *,
                 address: str,
                 custom_type: str,
                 primary: bool,
                 type: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserExternalIdResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserImResult(dict):
    def __init__(__self__, *,
                 custom_protocol: str,
                 custom_type: str,
                 im: str,
                 primary: bool,
                 protocol: str,
                 type: str):
        pulumi.set(__self__, "custom_protocol", custom_protocol)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "im", im)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="customProtocol")
    def custom_protocol(self) -> str:
        return pulumi.get(self, "custom_protocol")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def im(self) -> str:
        return pulumi.get(self, "im")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserKeywordResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserLanguageResult(dict):
    def __init__(__self__, *,
                 custom_language: str,
                 language_code: str,
                 preference: str):
        pulumi.set(__self__, "custom_language", custom_language)
        pulumi.set(__self__, "language_code", language_code)
        pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter(name="customLanguage")
    def custom_language(self) -> str:
        return pulumi.get(self, "custom_language")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def preference(self) -> str:
        return pulumi.get(self, "preference")


@pulumi.output_type
class GetUserLocationResult(dict):
    def __init__(__self__, *,
                 area: str,
                 building_id: str,
                 custom_type: str,
                 desk_code: str,
                 floor_name: str,
                 floor_section: str,
                 type: str):
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "building_id", building_id)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "desk_code", desk_code)
        pulumi.set(__self__, "floor_name", floor_name)
        pulumi.set(__self__, "floor_section", floor_section)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def area(self) -> str:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="buildingId")
    def building_id(self) -> str:
        return pulumi.get(self, "building_id")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="deskCode")
    def desk_code(self) -> str:
        return pulumi.get(self, "desk_code")

    @property
    @pulumi.getter(name="floorName")
    def floor_name(self) -> str:
        return pulumi.get(self, "floor_name")

    @property
    @pulumi.getter(name="floorSection")
    def floor_section(self) -> str:
        return pulumi.get(self, "floor_section")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserNameResult(dict):
    def __init__(__self__, *,
                 family_name: str,
                 full_name: str,
                 given_name: str):
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "given_name", given_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")


@pulumi.output_type
class GetUserOrganizationResult(dict):
    def __init__(__self__, *,
                 cost_center: str,
                 custom_type: str,
                 department: str,
                 description: str,
                 domain: str,
                 full_time_equivalent: int,
                 location: str,
                 name: str,
                 primary: bool,
                 symbol: str,
                 title: str,
                 type: str):
        """
        :param str name: Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
        """
        pulumi.set(__self__, "cost_center", cost_center)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "department", department)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "full_time_equivalent", full_time_equivalent)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "symbol", symbol)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> str:
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def department(self) -> str:
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullTimeEquivalent")
    def full_time_equivalent(self) -> int:
        return pulumi.get(self, "full_time_equivalent")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def symbol(self) -> str:
        return pulumi.get(self, "symbol")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUserPhoneResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 primary: bool,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserPosixAccountResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 gecos: str,
                 gid: str,
                 home_directory: str,
                 operating_system_type: str,
                 primary: bool,
                 shell: str,
                 system_id: str,
                 uid: str,
                 username: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "gecos", gecos)
        pulumi.set(__self__, "gid", gid)
        pulumi.set(__self__, "home_directory", home_directory)
        pulumi.set(__self__, "operating_system_type", operating_system_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "shell", shell)
        pulumi.set(__self__, "system_id", system_id)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def gecos(self) -> str:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter
    def gid(self) -> str:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> str:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="operatingSystemType")
    def operating_system_type(self) -> str:
        return pulumi.get(self, "operating_system_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def shell(self) -> str:
        return pulumi.get(self, "shell")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> str:
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUserRelationResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUserSshPublicKeyResult(dict):
    def __init__(__self__, *,
                 expiration_time_usec: str,
                 fingerprint: str,
                 key: str):
        pulumi.set(__self__, "expiration_time_usec", expiration_time_usec)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="expirationTimeUsec")
    def expiration_time_usec(self) -> str:
        return pulumi.get(self, "expiration_time_usec")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetUserWebsiteResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 primary: bool,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserResult(dict):
    def __init__(__self__, *,
                 addresses: Sequence['outputs.GetUsersUserAddressResult'],
                 agreed_to_terms: bool,
                 aliases: Sequence[str],
                 archived: bool,
                 change_password_at_next_login: bool,
                 creation_time: str,
                 custom_schemas: Sequence['outputs.GetUsersUserCustomSchemaResult'],
                 customer_id: str,
                 deletion_time: str,
                 emails: Sequence['outputs.GetUsersUserEmailResult'],
                 etag: str,
                 external_ids: Sequence['outputs.GetUsersUserExternalIdResult'],
                 hash_function: str,
                 id: str,
                 ims: Sequence['outputs.GetUsersUserImResult'],
                 include_in_global_address_list: bool,
                 ip_allowlist: bool,
                 is_admin: bool,
                 is_delegated_admin: bool,
                 is_enforced_in2_step_verification: bool,
                 is_enrolled_in2_step_verification: bool,
                 is_mailbox_setup: bool,
                 keywords: Sequence['outputs.GetUsersUserKeywordResult'],
                 languages: Sequence['outputs.GetUsersUserLanguageResult'],
                 last_login_time: str,
                 locations: Sequence['outputs.GetUsersUserLocationResult'],
                 names: Sequence['outputs.GetUsersUserNameResult'],
                 non_editable_aliases: Sequence[str],
                 org_unit_path: str,
                 organizations: Sequence['outputs.GetUsersUserOrganizationResult'],
                 password: str,
                 phones: Sequence['outputs.GetUsersUserPhoneResult'],
                 posix_accounts: Sequence['outputs.GetUsersUserPosixAccountResult'],
                 primary_email: str,
                 recovery_email: str,
                 recovery_phone: str,
                 relations: Sequence['outputs.GetUsersUserRelationResult'],
                 ssh_public_keys: Sequence['outputs.GetUsersUserSshPublicKeyResult'],
                 suspended: bool,
                 suspension_reason: str,
                 thumbnail_photo_etag: str,
                 thumbnail_photo_url: str,
                 websites: Sequence['outputs.GetUsersUserWebsiteResult']):
        """
        :param str id: The ID of this resource.
        """
        pulumi.set(__self__, "addresses", addresses)
        pulumi.set(__self__, "agreed_to_terms", agreed_to_terms)
        pulumi.set(__self__, "aliases", aliases)
        pulumi.set(__self__, "archived", archived)
        pulumi.set(__self__, "change_password_at_next_login", change_password_at_next_login)
        pulumi.set(__self__, "creation_time", creation_time)
        pulumi.set(__self__, "custom_schemas", custom_schemas)
        pulumi.set(__self__, "customer_id", customer_id)
        pulumi.set(__self__, "deletion_time", deletion_time)
        pulumi.set(__self__, "emails", emails)
        pulumi.set(__self__, "etag", etag)
        pulumi.set(__self__, "external_ids", external_ids)
        pulumi.set(__self__, "hash_function", hash_function)
        pulumi.set(__self__, "id", id)
        pulumi.set(__self__, "ims", ims)
        pulumi.set(__self__, "include_in_global_address_list", include_in_global_address_list)
        pulumi.set(__self__, "ip_allowlist", ip_allowlist)
        pulumi.set(__self__, "is_admin", is_admin)
        pulumi.set(__self__, "is_delegated_admin", is_delegated_admin)
        pulumi.set(__self__, "is_enforced_in2_step_verification", is_enforced_in2_step_verification)
        pulumi.set(__self__, "is_enrolled_in2_step_verification", is_enrolled_in2_step_verification)
        pulumi.set(__self__, "is_mailbox_setup", is_mailbox_setup)
        pulumi.set(__self__, "keywords", keywords)
        pulumi.set(__self__, "languages", languages)
        pulumi.set(__self__, "last_login_time", last_login_time)
        pulumi.set(__self__, "locations", locations)
        pulumi.set(__self__, "names", names)
        pulumi.set(__self__, "non_editable_aliases", non_editable_aliases)
        pulumi.set(__self__, "org_unit_path", org_unit_path)
        pulumi.set(__self__, "organizations", organizations)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "phones", phones)
        pulumi.set(__self__, "posix_accounts", posix_accounts)
        pulumi.set(__self__, "primary_email", primary_email)
        pulumi.set(__self__, "recovery_email", recovery_email)
        pulumi.set(__self__, "recovery_phone", recovery_phone)
        pulumi.set(__self__, "relations", relations)
        pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        pulumi.set(__self__, "suspended", suspended)
        pulumi.set(__self__, "suspension_reason", suspension_reason)
        pulumi.set(__self__, "thumbnail_photo_etag", thumbnail_photo_etag)
        pulumi.set(__self__, "thumbnail_photo_url", thumbnail_photo_url)
        pulumi.set(__self__, "websites", websites)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetUsersUserAddressResult']:
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="agreedToTerms")
    def agreed_to_terms(self) -> bool:
        return pulumi.get(self, "agreed_to_terms")

    @property
    @pulumi.getter
    def aliases(self) -> Sequence[str]:
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter
    def archived(self) -> bool:
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="changePasswordAtNextLogin")
    def change_password_at_next_login(self) -> bool:
        return pulumi.get(self, "change_password_at_next_login")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customSchemas")
    def custom_schemas(self) -> Sequence['outputs.GetUsersUserCustomSchemaResult']:
        return pulumi.get(self, "custom_schemas")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter(name="deletionTime")
    def deletion_time(self) -> str:
        return pulumi.get(self, "deletion_time")

    @property
    @pulumi.getter
    def emails(self) -> Sequence['outputs.GetUsersUserEmailResult']:
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def etag(self) -> str:
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="externalIds")
    def external_ids(self) -> Sequence['outputs.GetUsersUserExternalIdResult']:
        return pulumi.get(self, "external_ids")

    @property
    @pulumi.getter(name="hashFunction")
    def hash_function(self) -> str:
        return pulumi.get(self, "hash_function")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The ID of this resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ims(self) -> Sequence['outputs.GetUsersUserImResult']:
        return pulumi.get(self, "ims")

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> bool:
        return pulumi.get(self, "include_in_global_address_list")

    @property
    @pulumi.getter(name="ipAllowlist")
    def ip_allowlist(self) -> bool:
        return pulumi.get(self, "ip_allowlist")

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> bool:
        return pulumi.get(self, "is_admin")

    @property
    @pulumi.getter(name="isDelegatedAdmin")
    def is_delegated_admin(self) -> bool:
        return pulumi.get(self, "is_delegated_admin")

    @property
    @pulumi.getter(name="isEnforcedIn2StepVerification")
    def is_enforced_in2_step_verification(self) -> bool:
        return pulumi.get(self, "is_enforced_in2_step_verification")

    @property
    @pulumi.getter(name="isEnrolledIn2StepVerification")
    def is_enrolled_in2_step_verification(self) -> bool:
        return pulumi.get(self, "is_enrolled_in2_step_verification")

    @property
    @pulumi.getter(name="isMailboxSetup")
    def is_mailbox_setup(self) -> bool:
        return pulumi.get(self, "is_mailbox_setup")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence['outputs.GetUsersUserKeywordResult']:
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def languages(self) -> Sequence['outputs.GetUsersUserLanguageResult']:
        return pulumi.get(self, "languages")

    @property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> str:
        return pulumi.get(self, "last_login_time")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetUsersUserLocationResult']:
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def names(self) -> Sequence['outputs.GetUsersUserNameResult']:
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="nonEditableAliases")
    def non_editable_aliases(self) -> Sequence[str]:
        return pulumi.get(self, "non_editable_aliases")

    @property
    @pulumi.getter(name="orgUnitPath")
    def org_unit_path(self) -> str:
        return pulumi.get(self, "org_unit_path")

    @property
    @pulumi.getter
    def organizations(self) -> Sequence['outputs.GetUsersUserOrganizationResult']:
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter
    def password(self) -> str:
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def phones(self) -> Sequence['outputs.GetUsersUserPhoneResult']:
        return pulumi.get(self, "phones")

    @property
    @pulumi.getter(name="posixAccounts")
    def posix_accounts(self) -> Sequence['outputs.GetUsersUserPosixAccountResult']:
        return pulumi.get(self, "posix_accounts")

    @property
    @pulumi.getter(name="primaryEmail")
    def primary_email(self) -> str:
        return pulumi.get(self, "primary_email")

    @property
    @pulumi.getter(name="recoveryEmail")
    def recovery_email(self) -> str:
        return pulumi.get(self, "recovery_email")

    @property
    @pulumi.getter(name="recoveryPhone")
    def recovery_phone(self) -> str:
        return pulumi.get(self, "recovery_phone")

    @property
    @pulumi.getter
    def relations(self) -> Sequence['outputs.GetUsersUserRelationResult']:
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Sequence['outputs.GetUsersUserSshPublicKeyResult']:
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter
    def suspended(self) -> bool:
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter(name="suspensionReason")
    def suspension_reason(self) -> str:
        return pulumi.get(self, "suspension_reason")

    @property
    @pulumi.getter(name="thumbnailPhotoEtag")
    def thumbnail_photo_etag(self) -> str:
        return pulumi.get(self, "thumbnail_photo_etag")

    @property
    @pulumi.getter(name="thumbnailPhotoUrl")
    def thumbnail_photo_url(self) -> str:
        return pulumi.get(self, "thumbnail_photo_url")

    @property
    @pulumi.getter
    def websites(self) -> Sequence['outputs.GetUsersUserWebsiteResult']:
        return pulumi.get(self, "websites")


@pulumi.output_type
class GetUsersUserAddressResult(dict):
    def __init__(__self__, *,
                 country: str,
                 country_code: str,
                 custom_type: str,
                 extended_address: str,
                 formatted: str,
                 locality: str,
                 po_box: str,
                 postal_code: str,
                 primary: bool,
                 region: str,
                 source_is_structured: bool,
                 street_address: str,
                 type: str):
        pulumi.set(__self__, "country", country)
        pulumi.set(__self__, "country_code", country_code)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "extended_address", extended_address)
        pulumi.set(__self__, "formatted", formatted)
        pulumi.set(__self__, "locality", locality)
        pulumi.set(__self__, "po_box", po_box)
        pulumi.set(__self__, "postal_code", postal_code)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "region", region)
        pulumi.set(__self__, "source_is_structured", source_is_structured)
        pulumi.set(__self__, "street_address", street_address)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def country(self) -> str:
        return pulumi.get(self, "country")

    @property
    @pulumi.getter(name="countryCode")
    def country_code(self) -> str:
        return pulumi.get(self, "country_code")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="extendedAddress")
    def extended_address(self) -> str:
        return pulumi.get(self, "extended_address")

    @property
    @pulumi.getter
    def formatted(self) -> str:
        return pulumi.get(self, "formatted")

    @property
    @pulumi.getter
    def locality(self) -> str:
        return pulumi.get(self, "locality")

    @property
    @pulumi.getter(name="poBox")
    def po_box(self) -> str:
        return pulumi.get(self, "po_box")

    @property
    @pulumi.getter(name="postalCode")
    def postal_code(self) -> str:
        return pulumi.get(self, "postal_code")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def region(self) -> str:
        return pulumi.get(self, "region")

    @property
    @pulumi.getter(name="sourceIsStructured")
    def source_is_structured(self) -> bool:
        return pulumi.get(self, "source_is_structured")

    @property
    @pulumi.getter(name="streetAddress")
    def street_address(self) -> str:
        return pulumi.get(self, "street_address")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUsersUserCustomSchemaResult(dict):
    def __init__(__self__, *,
                 schema_name: str,
                 schema_values: Mapping[str, str]):
        pulumi.set(__self__, "schema_name", schema_name)
        pulumi.set(__self__, "schema_values", schema_values)

    @property
    @pulumi.getter(name="schemaName")
    def schema_name(self) -> str:
        return pulumi.get(self, "schema_name")

    @property
    @pulumi.getter(name="schemaValues")
    def schema_values(self) -> Mapping[str, str]:
        return pulumi.get(self, "schema_values")


@pulumi.output_type
class GetUsersUserEmailResult(dict):
    def __init__(__self__, *,
                 address: str,
                 custom_type: str,
                 primary: bool,
                 type: str):
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def address(self) -> str:
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUsersUserExternalIdResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserImResult(dict):
    def __init__(__self__, *,
                 custom_protocol: str,
                 custom_type: str,
                 im: str,
                 primary: bool,
                 protocol: str,
                 type: str):
        pulumi.set(__self__, "custom_protocol", custom_protocol)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "im", im)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "protocol", protocol)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="customProtocol")
    def custom_protocol(self) -> str:
        return pulumi.get(self, "custom_protocol")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def im(self) -> str:
        return pulumi.get(self, "im")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def protocol(self) -> str:
        return pulumi.get(self, "protocol")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUsersUserKeywordResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserLanguageResult(dict):
    def __init__(__self__, *,
                 custom_language: str,
                 language_code: str,
                 preference: str):
        pulumi.set(__self__, "custom_language", custom_language)
        pulumi.set(__self__, "language_code", language_code)
        pulumi.set(__self__, "preference", preference)

    @property
    @pulumi.getter(name="customLanguage")
    def custom_language(self) -> str:
        return pulumi.get(self, "custom_language")

    @property
    @pulumi.getter(name="languageCode")
    def language_code(self) -> str:
        return pulumi.get(self, "language_code")

    @property
    @pulumi.getter
    def preference(self) -> str:
        return pulumi.get(self, "preference")


@pulumi.output_type
class GetUsersUserLocationResult(dict):
    def __init__(__self__, *,
                 area: str,
                 building_id: str,
                 custom_type: str,
                 desk_code: str,
                 floor_name: str,
                 floor_section: str,
                 type: str):
        pulumi.set(__self__, "area", area)
        pulumi.set(__self__, "building_id", building_id)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "desk_code", desk_code)
        pulumi.set(__self__, "floor_name", floor_name)
        pulumi.set(__self__, "floor_section", floor_section)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def area(self) -> str:
        return pulumi.get(self, "area")

    @property
    @pulumi.getter(name="buildingId")
    def building_id(self) -> str:
        return pulumi.get(self, "building_id")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter(name="deskCode")
    def desk_code(self) -> str:
        return pulumi.get(self, "desk_code")

    @property
    @pulumi.getter(name="floorName")
    def floor_name(self) -> str:
        return pulumi.get(self, "floor_name")

    @property
    @pulumi.getter(name="floorSection")
    def floor_section(self) -> str:
        return pulumi.get(self, "floor_section")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUsersUserNameResult(dict):
    def __init__(__self__, *,
                 family_name: str,
                 full_name: str,
                 given_name: str):
        pulumi.set(__self__, "family_name", family_name)
        pulumi.set(__self__, "full_name", full_name)
        pulumi.set(__self__, "given_name", given_name)

    @property
    @pulumi.getter(name="familyName")
    def family_name(self) -> str:
        return pulumi.get(self, "family_name")

    @property
    @pulumi.getter(name="fullName")
    def full_name(self) -> str:
        return pulumi.get(self, "full_name")

    @property
    @pulumi.getter(name="givenName")
    def given_name(self) -> str:
        return pulumi.get(self, "given_name")


@pulumi.output_type
class GetUsersUserOrganizationResult(dict):
    def __init__(__self__, *,
                 cost_center: str,
                 custom_type: str,
                 department: str,
                 description: str,
                 domain: str,
                 full_time_equivalent: int,
                 location: str,
                 name: str,
                 primary: bool,
                 symbol: str,
                 title: str,
                 type: str):
        pulumi.set(__self__, "cost_center", cost_center)
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "department", department)
        pulumi.set(__self__, "description", description)
        pulumi.set(__self__, "domain", domain)
        pulumi.set(__self__, "full_time_equivalent", full_time_equivalent)
        pulumi.set(__self__, "location", location)
        pulumi.set(__self__, "name", name)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "symbol", symbol)
        pulumi.set(__self__, "title", title)
        pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="costCenter")
    def cost_center(self) -> str:
        return pulumi.get(self, "cost_center")

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def department(self) -> str:
        return pulumi.get(self, "department")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def domain(self) -> str:
        return pulumi.get(self, "domain")

    @property
    @pulumi.getter(name="fullTimeEquivalent")
    def full_time_equivalent(self) -> int:
        return pulumi.get(self, "full_time_equivalent")

    @property
    @pulumi.getter
    def location(self) -> str:
        return pulumi.get(self, "location")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def symbol(self) -> str:
        return pulumi.get(self, "symbol")

    @property
    @pulumi.getter
    def title(self) -> str:
        return pulumi.get(self, "title")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")


@pulumi.output_type
class GetUsersUserPhoneResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 primary: bool,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserPosixAccountResult(dict):
    def __init__(__self__, *,
                 account_id: str,
                 gecos: str,
                 gid: str,
                 home_directory: str,
                 operating_system_type: str,
                 primary: bool,
                 shell: str,
                 system_id: str,
                 uid: str,
                 username: str):
        pulumi.set(__self__, "account_id", account_id)
        pulumi.set(__self__, "gecos", gecos)
        pulumi.set(__self__, "gid", gid)
        pulumi.set(__self__, "home_directory", home_directory)
        pulumi.set(__self__, "operating_system_type", operating_system_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "shell", shell)
        pulumi.set(__self__, "system_id", system_id)
        pulumi.set(__self__, "uid", uid)
        pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="accountId")
    def account_id(self) -> str:
        return pulumi.get(self, "account_id")

    @property
    @pulumi.getter
    def gecos(self) -> str:
        return pulumi.get(self, "gecos")

    @property
    @pulumi.getter
    def gid(self) -> str:
        return pulumi.get(self, "gid")

    @property
    @pulumi.getter(name="homeDirectory")
    def home_directory(self) -> str:
        return pulumi.get(self, "home_directory")

    @property
    @pulumi.getter(name="operatingSystemType")
    def operating_system_type(self) -> str:
        return pulumi.get(self, "operating_system_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def shell(self) -> str:
        return pulumi.get(self, "shell")

    @property
    @pulumi.getter(name="systemId")
    def system_id(self) -> str:
        return pulumi.get(self, "system_id")

    @property
    @pulumi.getter
    def uid(self) -> str:
        return pulumi.get(self, "uid")

    @property
    @pulumi.getter
    def username(self) -> str:
        return pulumi.get(self, "username")


@pulumi.output_type
class GetUsersUserRelationResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


@pulumi.output_type
class GetUsersUserSshPublicKeyResult(dict):
    def __init__(__self__, *,
                 expiration_time_usec: str,
                 fingerprint: str,
                 key: str):
        pulumi.set(__self__, "expiration_time_usec", expiration_time_usec)
        pulumi.set(__self__, "fingerprint", fingerprint)
        pulumi.set(__self__, "key", key)

    @property
    @pulumi.getter(name="expirationTimeUsec")
    def expiration_time_usec(self) -> str:
        return pulumi.get(self, "expiration_time_usec")

    @property
    @pulumi.getter
    def fingerprint(self) -> str:
        return pulumi.get(self, "fingerprint")

    @property
    @pulumi.getter
    def key(self) -> str:
        return pulumi.get(self, "key")


@pulumi.output_type
class GetUsersUserWebsiteResult(dict):
    def __init__(__self__, *,
                 custom_type: str,
                 primary: bool,
                 type: str,
                 value: str):
        pulumi.set(__self__, "custom_type", custom_type)
        pulumi.set(__self__, "primary", primary)
        pulumi.set(__self__, "type", type)
        pulumi.set(__self__, "value", value)

    @property
    @pulumi.getter(name="customType")
    def custom_type(self) -> str:
        return pulumi.get(self, "custom_type")

    @property
    @pulumi.getter
    def primary(self) -> bool:
        return pulumi.get(self, "primary")

    @property
    @pulumi.getter
    def type(self) -> str:
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def value(self) -> str:
        return pulumi.get(self, "value")


