# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['GroupSettingsArgs', 'GroupSettings']

@pulumi.input_type
class GroupSettingsArgs:
    def __init__(__self__, *,
                 email: pulumi.Input[str],
                 allow_external_members: Optional[pulumi.Input[bool]] = None,
                 allow_web_posting: Optional[pulumi.Input[bool]] = None,
                 archive_only: Optional[pulumi.Input[bool]] = None,
                 custom_footer_text: Optional[pulumi.Input[str]] = None,
                 custom_reply_to: Optional[pulumi.Input[str]] = None,
                 default_message_deny_notification_text: Optional[pulumi.Input[str]] = None,
                 enable_collaborative_inbox: Optional[pulumi.Input[bool]] = None,
                 include_custom_footer: Optional[pulumi.Input[bool]] = None,
                 include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
                 is_archived: Optional[pulumi.Input[bool]] = None,
                 members_can_post_as_the_group: Optional[pulumi.Input[bool]] = None,
                 message_moderation_level: Optional[pulumi.Input[str]] = None,
                 primary_language: Optional[pulumi.Input[str]] = None,
                 reply_to: Optional[pulumi.Input[str]] = None,
                 send_message_deny_notification: Optional[pulumi.Input[bool]] = None,
                 spam_moderation_level: Optional[pulumi.Input[str]] = None,
                 who_can_assist_content: Optional[pulumi.Input[str]] = None,
                 who_can_contact_owner: Optional[pulumi.Input[str]] = None,
                 who_can_discover_group: Optional[pulumi.Input[str]] = None,
                 who_can_join: Optional[pulumi.Input[str]] = None,
                 who_can_leave_group: Optional[pulumi.Input[str]] = None,
                 who_can_moderate_content: Optional[pulumi.Input[str]] = None,
                 who_can_moderate_members: Optional[pulumi.Input[str]] = None,
                 who_can_post_message: Optional[pulumi.Input[str]] = None,
                 who_can_view_group: Optional[pulumi.Input[str]] = None,
                 who_can_view_membership: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a GroupSettings resource.
        :param pulumi.Input[str] email: The group's email address.
        :param pulumi.Input[bool] allow_external_members: Identifies whether members external to your organization can join the group. If true, Google Workspace users external to
               your organization can become members of this group. If false, users not belonging to the organization are not allowed to
               become members of this group.
        :param pulumi.Input[bool] allow_web_posting: Allows posting from web. If true, allows any member to post to the group forum. If false, Members only use Gmail to
               communicate with the group.
        :param pulumi.Input[bool] archive_only: Allows the group to be archived only. If true, Group is archived and the group is inactive. New messages to this group
               are rejected. The older archived messages are browsable and searchable. If true, the `who_can_post_message` property is
               set to `NONE_CAN_POST`. If reverted from true to false, `who_can_post_message` is set to `ALL_MANAGERS_CAN_POST`. If
               false, The group is active and can receive messages. When false, updating `who_can_post_message` to `NONE_CAN_POST`,
               results in an error.
        :param pulumi.Input[str] custom_footer_text: Set the content of custom footer text. The maximum number of characters is 1,000.
        :param pulumi.Input[str] custom_reply_to: An email address used when replying to a message if the `reply_to` property is set to `REPLY_TO_CUSTOM`. This address is
               defined by an account administrator. When the group's `reply_to` property is set to `REPLY_TO_CUSTOM`, the
               `custom_reply_to` property holds a custom email address used when replying to a message, the `custom_reply_to` property
               must have a text value or an error is returned.
        :param pulumi.Input[str] default_message_deny_notification_text: When a message is rejected, this is text for the rejection notification sent to the message's author. By default, this
               property is empty and has no value in the API's response body. The maximum notification text size is 10,000 characters.
               Requires `send_message_deny_notification` property to be true.
        :param pulumi.Input[bool] enable_collaborative_inbox: Specifies whether a collaborative inbox will remain turned on for the group.
        :param pulumi.Input[bool] include_custom_footer: Whether to include custom footer.
        :param pulumi.Input[bool] include_in_global_address_list: Enables the group to be included in the Global Address List. If true, the group is included in the Global Address List.
               If false, it is not included in the Global Address List.
        :param pulumi.Input[bool] is_archived: Allows the Group contents to be archived. If true, archive messages sent to the group. If false, Do not keep an archive
               of messages sent to this group. If false, previously archived messages remain in the archive.
        :param pulumi.Input[bool] members_can_post_as_the_group: Enables members to post messages as the group. If true, group member can post messages using the group's email address
               instead of their own email address. Message appear to originate from the group itself. Any message moderation settings
               on individual users or new members do not apply to posts made on behalf of the group. If false, members can not post in
               behalf of the group's email address.
        :param pulumi.Input[str] message_moderation_level: Moderation level of incoming messages. Possible values are: - `MODERATE_ALL_MESSAGES`: All messages are sent to the
               group owner's email address for approval. If approved, the message is sent to the group. - `MODERATE_NON_MEMBERS`: All
               messages from non group members are sent to the group owner's email address for approval. If approved, the message is
               sent to the group. - `MODERATE_NEW_MEMBERS`: All messages from new members are sent to the group owner's email address
               for approval. If approved, the message is sent to the group. - `MODERATE_NONE`: No moderator approval is required.
               Messages are delivered directly to the group. Note: When the `who_can_post_message` is set to `ANYONE_CAN_POST`, we
               recommend the `message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam.When
               `member_can_post_as_the_group` is true, any message moderation settings on individual users or new members will not
               apply to posts made on behalf of the group.
        :param pulumi.Input[str] primary_language: The primary language for group. For a group's primary language use the language tags from the Google Workspace languages
               found at Google Workspace Email Settings API Email Language Tags.
        :param pulumi.Input[str] reply_to: Specifies who receives the default reply. Possible values are: - `REPLY_TO_CUSTOM`: For replies to messages, use the
               group's custom email address. When set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds the custom email
               address used when replying to a message, the customReplyTo property must have a value. Otherwise an error is returned. -
               `REPLY_TO_SENDER`: The reply sent to author of message. - `REPLY_TO_LIST`: This reply message is sent to the group. -
               `REPLY_TO_OWNER`: The reply is sent to the owner(s) of the group. This does not include the group's managers. -
               `REPLY_TO_IGNORE`: Group users individually decide where the message reply is sent. - `REPLY_TO_MANAGERS`: This reply
               message is sent to the group's managers, which includes all managers and the group owner.
        :param pulumi.Input[bool] send_message_deny_notification: Allows a member to be notified if the member's message to the group is denied by the group owner. If true, when a
               message is rejected, send the deny message notification to the message author. The
               `default_message_deny_notification_text` property is dependent on the `send_message_deny_notification` property being
               true. If false, when a message is rejected, no notification is sent.
        :param pulumi.Input[str] spam_moderation_level: Specifies moderation levels for messages detected as spam. Possible values are: - `ALLOW`: Post the message to the
               group. - `MODERATE`: Send the message to the moderation queue. This is the default. - `SILENTLY_MODERATE`: Send the
               message to the moderation queue, but do not send notification to moderators. - `REJECT`: Immediately reject the message.
        :param pulumi.Input[str] who_can_assist_content: Specifies who can moderate metadata. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `MANAGERS_ONLY` -
               `OWNERS_ONLY` - `NONE`
        :param pulumi.Input[str] who_can_contact_owner: Permission to contact owner of the group via web UI. Possible values are: - `ALL_IN_DOMAIN_CAN_CONTACT` -
               `ALL_MANAGERS_CAN_CONTACT` - `ALL_MEMBERS_CAN_CONTACT` - `ANYONE_CAN_CONTACT` - `ALL_OWNERS_CAN_CONTACT`
        :param pulumi.Input[str] who_can_discover_group: Specifies the set of users for whom this group is discoverable. Possible values are: - `ANYONE_CAN_DISCOVER` -
               `ALL_IN_DOMAIN_CAN_DISCOVER` - `ALL_MEMBERS_CAN_DISCOVER`
        :param pulumi.Input[str] who_can_join: Permission to join group. Possible values are: - `ANYONE_CAN_JOIN`: Any Internet user, both inside and outside your
               domain, can join the group. - `ALL_IN_DOMAIN_CAN_JOIN`: Anyone in the account domain can join. This includes accounts
               with multiple domains. - `INVITED_CAN_JOIN`: Candidates for membership can be invited to join. - `CAN_REQUEST_TO_JOIN`:
               Non members can request an invitation to join.
        :param pulumi.Input[str] who_can_leave_group: Permission to leave the group. Possible values are: - `ALL_MANAGERS_CAN_LEAVE` - `ALL_MEMBERS_CAN_LEAVE` -
               `NONE_CAN_LEAVE`
        :param pulumi.Input[str] who_can_moderate_content: Specifies who can moderate content. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` -
               `NONE`
        :param pulumi.Input[str] who_can_moderate_members: Specifies who can manage members. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` - `NONE`
        :param pulumi.Input[str] who_can_post_message: Permissions to post messages. Possible values are: - `NONE_CAN_POST`: The group is disabled and archived. No one can
               post a message to this group. * When archiveOnly is false, updating whoCanPostMessage to NONE_CAN_POST, results in an
               error. * If archiveOnly is reverted from true to false, whoCanPostMessages is set to ALL_MANAGERS_CAN_POST. -
               `ALL_MANAGERS_CAN_POST`: Managers, including group owners, can post messages. - `ALL_MEMBERS_CAN_POST`: Any group member
               can post a message. - `ALL_OWNERS_CAN_POST`: Only group owners can post a message. - `ALL_IN_DOMAIN_CAN_POST`: Anyone in
               the account can post a message. - `ANYONE_CAN_POST`: Any Internet user who outside your account can access your Google
               Groups service and post a message. *Note: When `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend
               the`message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam. Users not
               belonging to the organization are not allowed to become members of this group.
        :param pulumi.Input[str] who_can_view_group: Permissions to view group messages. Possible values are: - `ANYONE_CAN_VIEW`: Any Internet user can view the group's
               messages. - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in your account can view this group's messages. - `ALL_MEMBERS_CAN_VIEW`:
               All group members can view the group's messages. - `ALL_MANAGERS_CAN_VIEW`: Any group manager can view this group's
               messages. - `ALL_OWNERS_CAN_VIEW`: The group owners can view this group's messages.
        :param pulumi.Input[str] who_can_view_membership: Permissions to view membership. Possible values are: - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in the account can view the
               group members list. If a group already has external members, those members can still send email to this group. -
               `ALL_MEMBERS_CAN_VIEW`: The group members can view the group members list. - `ALL_MANAGERS_CAN_VIEW`: The group managers
               can view group members list. - `ALL_OWNERS_CAN_VIEW`: The group owners can view group members list.
        """
        pulumi.set(__self__, "email", email)
        if allow_external_members is not None:
            pulumi.set(__self__, "allow_external_members", allow_external_members)
        if allow_web_posting is not None:
            pulumi.set(__self__, "allow_web_posting", allow_web_posting)
        if archive_only is not None:
            pulumi.set(__self__, "archive_only", archive_only)
        if custom_footer_text is not None:
            pulumi.set(__self__, "custom_footer_text", custom_footer_text)
        if custom_reply_to is not None:
            pulumi.set(__self__, "custom_reply_to", custom_reply_to)
        if default_message_deny_notification_text is not None:
            pulumi.set(__self__, "default_message_deny_notification_text", default_message_deny_notification_text)
        if enable_collaborative_inbox is not None:
            pulumi.set(__self__, "enable_collaborative_inbox", enable_collaborative_inbox)
        if include_custom_footer is not None:
            pulumi.set(__self__, "include_custom_footer", include_custom_footer)
        if include_in_global_address_list is not None:
            pulumi.set(__self__, "include_in_global_address_list", include_in_global_address_list)
        if is_archived is not None:
            pulumi.set(__self__, "is_archived", is_archived)
        if members_can_post_as_the_group is not None:
            pulumi.set(__self__, "members_can_post_as_the_group", members_can_post_as_the_group)
        if message_moderation_level is not None:
            pulumi.set(__self__, "message_moderation_level", message_moderation_level)
        if primary_language is not None:
            pulumi.set(__self__, "primary_language", primary_language)
        if reply_to is not None:
            pulumi.set(__self__, "reply_to", reply_to)
        if send_message_deny_notification is not None:
            pulumi.set(__self__, "send_message_deny_notification", send_message_deny_notification)
        if spam_moderation_level is not None:
            pulumi.set(__self__, "spam_moderation_level", spam_moderation_level)
        if who_can_assist_content is not None:
            pulumi.set(__self__, "who_can_assist_content", who_can_assist_content)
        if who_can_contact_owner is not None:
            pulumi.set(__self__, "who_can_contact_owner", who_can_contact_owner)
        if who_can_discover_group is not None:
            pulumi.set(__self__, "who_can_discover_group", who_can_discover_group)
        if who_can_join is not None:
            pulumi.set(__self__, "who_can_join", who_can_join)
        if who_can_leave_group is not None:
            pulumi.set(__self__, "who_can_leave_group", who_can_leave_group)
        if who_can_moderate_content is not None:
            pulumi.set(__self__, "who_can_moderate_content", who_can_moderate_content)
        if who_can_moderate_members is not None:
            pulumi.set(__self__, "who_can_moderate_members", who_can_moderate_members)
        if who_can_post_message is not None:
            pulumi.set(__self__, "who_can_post_message", who_can_post_message)
        if who_can_view_group is not None:
            pulumi.set(__self__, "who_can_view_group", who_can_view_group)
        if who_can_view_membership is not None:
            pulumi.set(__self__, "who_can_view_membership", who_can_view_membership)

    @property
    @pulumi.getter
    def email(self) -> pulumi.Input[str]:
        """
        The group's email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: pulumi.Input[str]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="allowExternalMembers")
    def allow_external_members(self) -> Optional[pulumi.Input[bool]]:
        """
        Identifies whether members external to your organization can join the group. If true, Google Workspace users external to
        your organization can become members of this group. If false, users not belonging to the organization are not allowed to
        become members of this group.
        """
        return pulumi.get(self, "allow_external_members")

    @allow_external_members.setter
    def allow_external_members(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_external_members", value)

    @property
    @pulumi.getter(name="allowWebPosting")
    def allow_web_posting(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows posting from web. If true, allows any member to post to the group forum. If false, Members only use Gmail to
        communicate with the group.
        """
        return pulumi.get(self, "allow_web_posting")

    @allow_web_posting.setter
    def allow_web_posting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_web_posting", value)

    @property
    @pulumi.getter(name="archiveOnly")
    def archive_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows the group to be archived only. If true, Group is archived and the group is inactive. New messages to this group
        are rejected. The older archived messages are browsable and searchable. If true, the `who_can_post_message` property is
        set to `NONE_CAN_POST`. If reverted from true to false, `who_can_post_message` is set to `ALL_MANAGERS_CAN_POST`. If
        false, The group is active and can receive messages. When false, updating `who_can_post_message` to `NONE_CAN_POST`,
        results in an error.
        """
        return pulumi.get(self, "archive_only")

    @archive_only.setter
    def archive_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archive_only", value)

    @property
    @pulumi.getter(name="customFooterText")
    def custom_footer_text(self) -> Optional[pulumi.Input[str]]:
        """
        Set the content of custom footer text. The maximum number of characters is 1,000.
        """
        return pulumi.get(self, "custom_footer_text")

    @custom_footer_text.setter
    def custom_footer_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_footer_text", value)

    @property
    @pulumi.getter(name="customReplyTo")
    def custom_reply_to(self) -> Optional[pulumi.Input[str]]:
        """
        An email address used when replying to a message if the `reply_to` property is set to `REPLY_TO_CUSTOM`. This address is
        defined by an account administrator. When the group's `reply_to` property is set to `REPLY_TO_CUSTOM`, the
        `custom_reply_to` property holds a custom email address used when replying to a message, the `custom_reply_to` property
        must have a text value or an error is returned.
        """
        return pulumi.get(self, "custom_reply_to")

    @custom_reply_to.setter
    def custom_reply_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_reply_to", value)

    @property
    @pulumi.getter(name="defaultMessageDenyNotificationText")
    def default_message_deny_notification_text(self) -> Optional[pulumi.Input[str]]:
        """
        When a message is rejected, this is text for the rejection notification sent to the message's author. By default, this
        property is empty and has no value in the API's response body. The maximum notification text size is 10,000 characters.
        Requires `send_message_deny_notification` property to be true.
        """
        return pulumi.get(self, "default_message_deny_notification_text")

    @default_message_deny_notification_text.setter
    def default_message_deny_notification_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_message_deny_notification_text", value)

    @property
    @pulumi.getter(name="enableCollaborativeInbox")
    def enable_collaborative_inbox(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether a collaborative inbox will remain turned on for the group.
        """
        return pulumi.get(self, "enable_collaborative_inbox")

    @enable_collaborative_inbox.setter
    def enable_collaborative_inbox(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_collaborative_inbox", value)

    @property
    @pulumi.getter(name="includeCustomFooter")
    def include_custom_footer(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include custom footer.
        """
        return pulumi.get(self, "include_custom_footer")

    @include_custom_footer.setter
    def include_custom_footer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_custom_footer", value)

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the group to be included in the Global Address List. If true, the group is included in the Global Address List.
        If false, it is not included in the Global Address List.
        """
        return pulumi.get(self, "include_in_global_address_list")

    @include_in_global_address_list.setter
    def include_in_global_address_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_in_global_address_list", value)

    @property
    @pulumi.getter(name="isArchived")
    def is_archived(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows the Group contents to be archived. If true, archive messages sent to the group. If false, Do not keep an archive
        of messages sent to this group. If false, previously archived messages remain in the archive.
        """
        return pulumi.get(self, "is_archived")

    @is_archived.setter
    def is_archived(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archived", value)

    @property
    @pulumi.getter(name="membersCanPostAsTheGroup")
    def members_can_post_as_the_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables members to post messages as the group. If true, group member can post messages using the group's email address
        instead of their own email address. Message appear to originate from the group itself. Any message moderation settings
        on individual users or new members do not apply to posts made on behalf of the group. If false, members can not post in
        behalf of the group's email address.
        """
        return pulumi.get(self, "members_can_post_as_the_group")

    @members_can_post_as_the_group.setter
    def members_can_post_as_the_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "members_can_post_as_the_group", value)

    @property
    @pulumi.getter(name="messageModerationLevel")
    def message_moderation_level(self) -> Optional[pulumi.Input[str]]:
        """
        Moderation level of incoming messages. Possible values are: - `MODERATE_ALL_MESSAGES`: All messages are sent to the
        group owner's email address for approval. If approved, the message is sent to the group. - `MODERATE_NON_MEMBERS`: All
        messages from non group members are sent to the group owner's email address for approval. If approved, the message is
        sent to the group. - `MODERATE_NEW_MEMBERS`: All messages from new members are sent to the group owner's email address
        for approval. If approved, the message is sent to the group. - `MODERATE_NONE`: No moderator approval is required.
        Messages are delivered directly to the group. Note: When the `who_can_post_message` is set to `ANYONE_CAN_POST`, we
        recommend the `message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam.When
        `member_can_post_as_the_group` is true, any message moderation settings on individual users or new members will not
        apply to posts made on behalf of the group.
        """
        return pulumi.get(self, "message_moderation_level")

    @message_moderation_level.setter
    def message_moderation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_moderation_level", value)

    @property
    @pulumi.getter(name="primaryLanguage")
    def primary_language(self) -> Optional[pulumi.Input[str]]:
        """
        The primary language for group. For a group's primary language use the language tags from the Google Workspace languages
        found at Google Workspace Email Settings API Email Language Tags.
        """
        return pulumi.get(self, "primary_language")

    @primary_language.setter
    def primary_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_language", value)

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies who receives the default reply. Possible values are: - `REPLY_TO_CUSTOM`: For replies to messages, use the
        group's custom email address. When set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds the custom email
        address used when replying to a message, the customReplyTo property must have a value. Otherwise an error is returned. -
        `REPLY_TO_SENDER`: The reply sent to author of message. - `REPLY_TO_LIST`: This reply message is sent to the group. -
        `REPLY_TO_OWNER`: The reply is sent to the owner(s) of the group. This does not include the group's managers. -
        `REPLY_TO_IGNORE`: Group users individually decide where the message reply is sent. - `REPLY_TO_MANAGERS`: This reply
        message is sent to the group's managers, which includes all managers and the group owner.
        """
        return pulumi.get(self, "reply_to")

    @reply_to.setter
    def reply_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reply_to", value)

    @property
    @pulumi.getter(name="sendMessageDenyNotification")
    def send_message_deny_notification(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows a member to be notified if the member's message to the group is denied by the group owner. If true, when a
        message is rejected, send the deny message notification to the message author. The
        `default_message_deny_notification_text` property is dependent on the `send_message_deny_notification` property being
        true. If false, when a message is rejected, no notification is sent.
        """
        return pulumi.get(self, "send_message_deny_notification")

    @send_message_deny_notification.setter
    def send_message_deny_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_message_deny_notification", value)

    @property
    @pulumi.getter(name="spamModerationLevel")
    def spam_moderation_level(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies moderation levels for messages detected as spam. Possible values are: - `ALLOW`: Post the message to the
        group. - `MODERATE`: Send the message to the moderation queue. This is the default. - `SILENTLY_MODERATE`: Send the
        message to the moderation queue, but do not send notification to moderators. - `REJECT`: Immediately reject the message.
        """
        return pulumi.get(self, "spam_moderation_level")

    @spam_moderation_level.setter
    def spam_moderation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_moderation_level", value)

    @property
    @pulumi.getter(name="whoCanAssistContent")
    def who_can_assist_content(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies who can moderate metadata. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `MANAGERS_ONLY` -
        `OWNERS_ONLY` - `NONE`
        """
        return pulumi.get(self, "who_can_assist_content")

    @who_can_assist_content.setter
    def who_can_assist_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_assist_content", value)

    @property
    @pulumi.getter(name="whoCanContactOwner")
    def who_can_contact_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Permission to contact owner of the group via web UI. Possible values are: - `ALL_IN_DOMAIN_CAN_CONTACT` -
        `ALL_MANAGERS_CAN_CONTACT` - `ALL_MEMBERS_CAN_CONTACT` - `ANYONE_CAN_CONTACT` - `ALL_OWNERS_CAN_CONTACT`
        """
        return pulumi.get(self, "who_can_contact_owner")

    @who_can_contact_owner.setter
    def who_can_contact_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_contact_owner", value)

    @property
    @pulumi.getter(name="whoCanDiscoverGroup")
    def who_can_discover_group(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the set of users for whom this group is discoverable. Possible values are: - `ANYONE_CAN_DISCOVER` -
        `ALL_IN_DOMAIN_CAN_DISCOVER` - `ALL_MEMBERS_CAN_DISCOVER`
        """
        return pulumi.get(self, "who_can_discover_group")

    @who_can_discover_group.setter
    def who_can_discover_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_discover_group", value)

    @property
    @pulumi.getter(name="whoCanJoin")
    def who_can_join(self) -> Optional[pulumi.Input[str]]:
        """
        Permission to join group. Possible values are: - `ANYONE_CAN_JOIN`: Any Internet user, both inside and outside your
        domain, can join the group. - `ALL_IN_DOMAIN_CAN_JOIN`: Anyone in the account domain can join. This includes accounts
        with multiple domains. - `INVITED_CAN_JOIN`: Candidates for membership can be invited to join. - `CAN_REQUEST_TO_JOIN`:
        Non members can request an invitation to join.
        """
        return pulumi.get(self, "who_can_join")

    @who_can_join.setter
    def who_can_join(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_join", value)

    @property
    @pulumi.getter(name="whoCanLeaveGroup")
    def who_can_leave_group(self) -> Optional[pulumi.Input[str]]:
        """
        Permission to leave the group. Possible values are: - `ALL_MANAGERS_CAN_LEAVE` - `ALL_MEMBERS_CAN_LEAVE` -
        `NONE_CAN_LEAVE`
        """
        return pulumi.get(self, "who_can_leave_group")

    @who_can_leave_group.setter
    def who_can_leave_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_leave_group", value)

    @property
    @pulumi.getter(name="whoCanModerateContent")
    def who_can_moderate_content(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies who can moderate content. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` -
        `NONE`
        """
        return pulumi.get(self, "who_can_moderate_content")

    @who_can_moderate_content.setter
    def who_can_moderate_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_moderate_content", value)

    @property
    @pulumi.getter(name="whoCanModerateMembers")
    def who_can_moderate_members(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies who can manage members. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` - `NONE`
        """
        return pulumi.get(self, "who_can_moderate_members")

    @who_can_moderate_members.setter
    def who_can_moderate_members(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_moderate_members", value)

    @property
    @pulumi.getter(name="whoCanPostMessage")
    def who_can_post_message(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions to post messages. Possible values are: - `NONE_CAN_POST`: The group is disabled and archived. No one can
        post a message to this group. * When archiveOnly is false, updating whoCanPostMessage to NONE_CAN_POST, results in an
        error. * If archiveOnly is reverted from true to false, whoCanPostMessages is set to ALL_MANAGERS_CAN_POST. -
        `ALL_MANAGERS_CAN_POST`: Managers, including group owners, can post messages. - `ALL_MEMBERS_CAN_POST`: Any group member
        can post a message. - `ALL_OWNERS_CAN_POST`: Only group owners can post a message. - `ALL_IN_DOMAIN_CAN_POST`: Anyone in
        the account can post a message. - `ANYONE_CAN_POST`: Any Internet user who outside your account can access your Google
        Groups service and post a message. *Note: When `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend
        the`message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam. Users not
        belonging to the organization are not allowed to become members of this group.
        """
        return pulumi.get(self, "who_can_post_message")

    @who_can_post_message.setter
    def who_can_post_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_post_message", value)

    @property
    @pulumi.getter(name="whoCanViewGroup")
    def who_can_view_group(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions to view group messages. Possible values are: - `ANYONE_CAN_VIEW`: Any Internet user can view the group's
        messages. - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in your account can view this group's messages. - `ALL_MEMBERS_CAN_VIEW`:
        All group members can view the group's messages. - `ALL_MANAGERS_CAN_VIEW`: Any group manager can view this group's
        messages. - `ALL_OWNERS_CAN_VIEW`: The group owners can view this group's messages.
        """
        return pulumi.get(self, "who_can_view_group")

    @who_can_view_group.setter
    def who_can_view_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_view_group", value)

    @property
    @pulumi.getter(name="whoCanViewMembership")
    def who_can_view_membership(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions to view membership. Possible values are: - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in the account can view the
        group members list. If a group already has external members, those members can still send email to this group. -
        `ALL_MEMBERS_CAN_VIEW`: The group members can view the group members list. - `ALL_MANAGERS_CAN_VIEW`: The group managers
        can view group members list. - `ALL_OWNERS_CAN_VIEW`: The group owners can view group members list.
        """
        return pulumi.get(self, "who_can_view_membership")

    @who_can_view_membership.setter
    def who_can_view_membership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_view_membership", value)


@pulumi.input_type
class _GroupSettingsState:
    def __init__(__self__, *,
                 allow_external_members: Optional[pulumi.Input[bool]] = None,
                 allow_web_posting: Optional[pulumi.Input[bool]] = None,
                 archive_only: Optional[pulumi.Input[bool]] = None,
                 custom_footer_text: Optional[pulumi.Input[str]] = None,
                 custom_reply_to: Optional[pulumi.Input[str]] = None,
                 custom_roles_enabled_for_settings_to_be_merged: Optional[pulumi.Input[bool]] = None,
                 default_message_deny_notification_text: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_collaborative_inbox: Optional[pulumi.Input[bool]] = None,
                 include_custom_footer: Optional[pulumi.Input[bool]] = None,
                 include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
                 is_archived: Optional[pulumi.Input[bool]] = None,
                 members_can_post_as_the_group: Optional[pulumi.Input[bool]] = None,
                 message_moderation_level: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 primary_language: Optional[pulumi.Input[str]] = None,
                 reply_to: Optional[pulumi.Input[str]] = None,
                 send_message_deny_notification: Optional[pulumi.Input[bool]] = None,
                 spam_moderation_level: Optional[pulumi.Input[str]] = None,
                 who_can_assist_content: Optional[pulumi.Input[str]] = None,
                 who_can_contact_owner: Optional[pulumi.Input[str]] = None,
                 who_can_discover_group: Optional[pulumi.Input[str]] = None,
                 who_can_join: Optional[pulumi.Input[str]] = None,
                 who_can_leave_group: Optional[pulumi.Input[str]] = None,
                 who_can_moderate_content: Optional[pulumi.Input[str]] = None,
                 who_can_moderate_members: Optional[pulumi.Input[str]] = None,
                 who_can_post_message: Optional[pulumi.Input[str]] = None,
                 who_can_view_group: Optional[pulumi.Input[str]] = None,
                 who_can_view_membership: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering GroupSettings resources.
        :param pulumi.Input[bool] allow_external_members: Identifies whether members external to your organization can join the group. If true, Google Workspace users external to
               your organization can become members of this group. If false, users not belonging to the organization are not allowed to
               become members of this group.
        :param pulumi.Input[bool] allow_web_posting: Allows posting from web. If true, allows any member to post to the group forum. If false, Members only use Gmail to
               communicate with the group.
        :param pulumi.Input[bool] archive_only: Allows the group to be archived only. If true, Group is archived and the group is inactive. New messages to this group
               are rejected. The older archived messages are browsable and searchable. If true, the `who_can_post_message` property is
               set to `NONE_CAN_POST`. If reverted from true to false, `who_can_post_message` is set to `ALL_MANAGERS_CAN_POST`. If
               false, The group is active and can receive messages. When false, updating `who_can_post_message` to `NONE_CAN_POST`,
               results in an error.
        :param pulumi.Input[str] custom_footer_text: Set the content of custom footer text. The maximum number of characters is 1,000.
        :param pulumi.Input[str] custom_reply_to: An email address used when replying to a message if the `reply_to` property is set to `REPLY_TO_CUSTOM`. This address is
               defined by an account administrator. When the group's `reply_to` property is set to `REPLY_TO_CUSTOM`, the
               `custom_reply_to` property holds a custom email address used when replying to a message, the `custom_reply_to` property
               must have a text value or an error is returned.
        :param pulumi.Input[bool] custom_roles_enabled_for_settings_to_be_merged: Specifies whether the group has a custom role that's included in one of the settings being merged.
        :param pulumi.Input[str] default_message_deny_notification_text: When a message is rejected, this is text for the rejection notification sent to the message's author. By default, this
               property is empty and has no value in the API's response body. The maximum notification text size is 10,000 characters.
               Requires `send_message_deny_notification` property to be true.
        :param pulumi.Input[str] description: Description of the group. The maximum group description is no more than 300 characters.
        :param pulumi.Input[str] email: The group's email address.
        :param pulumi.Input[bool] enable_collaborative_inbox: Specifies whether a collaborative inbox will remain turned on for the group.
        :param pulumi.Input[bool] include_custom_footer: Whether to include custom footer.
        :param pulumi.Input[bool] include_in_global_address_list: Enables the group to be included in the Global Address List. If true, the group is included in the Global Address List.
               If false, it is not included in the Global Address List.
        :param pulumi.Input[bool] is_archived: Allows the Group contents to be archived. If true, archive messages sent to the group. If false, Do not keep an archive
               of messages sent to this group. If false, previously archived messages remain in the archive.
        :param pulumi.Input[bool] members_can_post_as_the_group: Enables members to post messages as the group. If true, group member can post messages using the group's email address
               instead of their own email address. Message appear to originate from the group itself. Any message moderation settings
               on individual users or new members do not apply to posts made on behalf of the group. If false, members can not post in
               behalf of the group's email address.
        :param pulumi.Input[str] message_moderation_level: Moderation level of incoming messages. Possible values are: - `MODERATE_ALL_MESSAGES`: All messages are sent to the
               group owner's email address for approval. If approved, the message is sent to the group. - `MODERATE_NON_MEMBERS`: All
               messages from non group members are sent to the group owner's email address for approval. If approved, the message is
               sent to the group. - `MODERATE_NEW_MEMBERS`: All messages from new members are sent to the group owner's email address
               for approval. If approved, the message is sent to the group. - `MODERATE_NONE`: No moderator approval is required.
               Messages are delivered directly to the group. Note: When the `who_can_post_message` is set to `ANYONE_CAN_POST`, we
               recommend the `message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam.When
               `member_can_post_as_the_group` is true, any message moderation settings on individual users or new members will not
               apply to posts made on behalf of the group.
        :param pulumi.Input[str] name: Name of the group, which has a maximum size of 75 characters.
        :param pulumi.Input[str] primary_language: The primary language for group. For a group's primary language use the language tags from the Google Workspace languages
               found at Google Workspace Email Settings API Email Language Tags.
        :param pulumi.Input[str] reply_to: Specifies who receives the default reply. Possible values are: - `REPLY_TO_CUSTOM`: For replies to messages, use the
               group's custom email address. When set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds the custom email
               address used when replying to a message, the customReplyTo property must have a value. Otherwise an error is returned. -
               `REPLY_TO_SENDER`: The reply sent to author of message. - `REPLY_TO_LIST`: This reply message is sent to the group. -
               `REPLY_TO_OWNER`: The reply is sent to the owner(s) of the group. This does not include the group's managers. -
               `REPLY_TO_IGNORE`: Group users individually decide where the message reply is sent. - `REPLY_TO_MANAGERS`: This reply
               message is sent to the group's managers, which includes all managers and the group owner.
        :param pulumi.Input[bool] send_message_deny_notification: Allows a member to be notified if the member's message to the group is denied by the group owner. If true, when a
               message is rejected, send the deny message notification to the message author. The
               `default_message_deny_notification_text` property is dependent on the `send_message_deny_notification` property being
               true. If false, when a message is rejected, no notification is sent.
        :param pulumi.Input[str] spam_moderation_level: Specifies moderation levels for messages detected as spam. Possible values are: - `ALLOW`: Post the message to the
               group. - `MODERATE`: Send the message to the moderation queue. This is the default. - `SILENTLY_MODERATE`: Send the
               message to the moderation queue, but do not send notification to moderators. - `REJECT`: Immediately reject the message.
        :param pulumi.Input[str] who_can_assist_content: Specifies who can moderate metadata. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `MANAGERS_ONLY` -
               `OWNERS_ONLY` - `NONE`
        :param pulumi.Input[str] who_can_contact_owner: Permission to contact owner of the group via web UI. Possible values are: - `ALL_IN_DOMAIN_CAN_CONTACT` -
               `ALL_MANAGERS_CAN_CONTACT` - `ALL_MEMBERS_CAN_CONTACT` - `ANYONE_CAN_CONTACT` - `ALL_OWNERS_CAN_CONTACT`
        :param pulumi.Input[str] who_can_discover_group: Specifies the set of users for whom this group is discoverable. Possible values are: - `ANYONE_CAN_DISCOVER` -
               `ALL_IN_DOMAIN_CAN_DISCOVER` - `ALL_MEMBERS_CAN_DISCOVER`
        :param pulumi.Input[str] who_can_join: Permission to join group. Possible values are: - `ANYONE_CAN_JOIN`: Any Internet user, both inside and outside your
               domain, can join the group. - `ALL_IN_DOMAIN_CAN_JOIN`: Anyone in the account domain can join. This includes accounts
               with multiple domains. - `INVITED_CAN_JOIN`: Candidates for membership can be invited to join. - `CAN_REQUEST_TO_JOIN`:
               Non members can request an invitation to join.
        :param pulumi.Input[str] who_can_leave_group: Permission to leave the group. Possible values are: - `ALL_MANAGERS_CAN_LEAVE` - `ALL_MEMBERS_CAN_LEAVE` -
               `NONE_CAN_LEAVE`
        :param pulumi.Input[str] who_can_moderate_content: Specifies who can moderate content. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` -
               `NONE`
        :param pulumi.Input[str] who_can_moderate_members: Specifies who can manage members. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` - `NONE`
        :param pulumi.Input[str] who_can_post_message: Permissions to post messages. Possible values are: - `NONE_CAN_POST`: The group is disabled and archived. No one can
               post a message to this group. * When archiveOnly is false, updating whoCanPostMessage to NONE_CAN_POST, results in an
               error. * If archiveOnly is reverted from true to false, whoCanPostMessages is set to ALL_MANAGERS_CAN_POST. -
               `ALL_MANAGERS_CAN_POST`: Managers, including group owners, can post messages. - `ALL_MEMBERS_CAN_POST`: Any group member
               can post a message. - `ALL_OWNERS_CAN_POST`: Only group owners can post a message. - `ALL_IN_DOMAIN_CAN_POST`: Anyone in
               the account can post a message. - `ANYONE_CAN_POST`: Any Internet user who outside your account can access your Google
               Groups service and post a message. *Note: When `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend
               the`message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam. Users not
               belonging to the organization are not allowed to become members of this group.
        :param pulumi.Input[str] who_can_view_group: Permissions to view group messages. Possible values are: - `ANYONE_CAN_VIEW`: Any Internet user can view the group's
               messages. - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in your account can view this group's messages. - `ALL_MEMBERS_CAN_VIEW`:
               All group members can view the group's messages. - `ALL_MANAGERS_CAN_VIEW`: Any group manager can view this group's
               messages. - `ALL_OWNERS_CAN_VIEW`: The group owners can view this group's messages.
        :param pulumi.Input[str] who_can_view_membership: Permissions to view membership. Possible values are: - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in the account can view the
               group members list. If a group already has external members, those members can still send email to this group. -
               `ALL_MEMBERS_CAN_VIEW`: The group members can view the group members list. - `ALL_MANAGERS_CAN_VIEW`: The group managers
               can view group members list. - `ALL_OWNERS_CAN_VIEW`: The group owners can view group members list.
        """
        if allow_external_members is not None:
            pulumi.set(__self__, "allow_external_members", allow_external_members)
        if allow_web_posting is not None:
            pulumi.set(__self__, "allow_web_posting", allow_web_posting)
        if archive_only is not None:
            pulumi.set(__self__, "archive_only", archive_only)
        if custom_footer_text is not None:
            pulumi.set(__self__, "custom_footer_text", custom_footer_text)
        if custom_reply_to is not None:
            pulumi.set(__self__, "custom_reply_to", custom_reply_to)
        if custom_roles_enabled_for_settings_to_be_merged is not None:
            pulumi.set(__self__, "custom_roles_enabled_for_settings_to_be_merged", custom_roles_enabled_for_settings_to_be_merged)
        if default_message_deny_notification_text is not None:
            pulumi.set(__self__, "default_message_deny_notification_text", default_message_deny_notification_text)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if email is not None:
            pulumi.set(__self__, "email", email)
        if enable_collaborative_inbox is not None:
            pulumi.set(__self__, "enable_collaborative_inbox", enable_collaborative_inbox)
        if include_custom_footer is not None:
            pulumi.set(__self__, "include_custom_footer", include_custom_footer)
        if include_in_global_address_list is not None:
            pulumi.set(__self__, "include_in_global_address_list", include_in_global_address_list)
        if is_archived is not None:
            pulumi.set(__self__, "is_archived", is_archived)
        if members_can_post_as_the_group is not None:
            pulumi.set(__self__, "members_can_post_as_the_group", members_can_post_as_the_group)
        if message_moderation_level is not None:
            pulumi.set(__self__, "message_moderation_level", message_moderation_level)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if primary_language is not None:
            pulumi.set(__self__, "primary_language", primary_language)
        if reply_to is not None:
            pulumi.set(__self__, "reply_to", reply_to)
        if send_message_deny_notification is not None:
            pulumi.set(__self__, "send_message_deny_notification", send_message_deny_notification)
        if spam_moderation_level is not None:
            pulumi.set(__self__, "spam_moderation_level", spam_moderation_level)
        if who_can_assist_content is not None:
            pulumi.set(__self__, "who_can_assist_content", who_can_assist_content)
        if who_can_contact_owner is not None:
            pulumi.set(__self__, "who_can_contact_owner", who_can_contact_owner)
        if who_can_discover_group is not None:
            pulumi.set(__self__, "who_can_discover_group", who_can_discover_group)
        if who_can_join is not None:
            pulumi.set(__self__, "who_can_join", who_can_join)
        if who_can_leave_group is not None:
            pulumi.set(__self__, "who_can_leave_group", who_can_leave_group)
        if who_can_moderate_content is not None:
            pulumi.set(__self__, "who_can_moderate_content", who_can_moderate_content)
        if who_can_moderate_members is not None:
            pulumi.set(__self__, "who_can_moderate_members", who_can_moderate_members)
        if who_can_post_message is not None:
            pulumi.set(__self__, "who_can_post_message", who_can_post_message)
        if who_can_view_group is not None:
            pulumi.set(__self__, "who_can_view_group", who_can_view_group)
        if who_can_view_membership is not None:
            pulumi.set(__self__, "who_can_view_membership", who_can_view_membership)

    @property
    @pulumi.getter(name="allowExternalMembers")
    def allow_external_members(self) -> Optional[pulumi.Input[bool]]:
        """
        Identifies whether members external to your organization can join the group. If true, Google Workspace users external to
        your organization can become members of this group. If false, users not belonging to the organization are not allowed to
        become members of this group.
        """
        return pulumi.get(self, "allow_external_members")

    @allow_external_members.setter
    def allow_external_members(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_external_members", value)

    @property
    @pulumi.getter(name="allowWebPosting")
    def allow_web_posting(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows posting from web. If true, allows any member to post to the group forum. If false, Members only use Gmail to
        communicate with the group.
        """
        return pulumi.get(self, "allow_web_posting")

    @allow_web_posting.setter
    def allow_web_posting(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "allow_web_posting", value)

    @property
    @pulumi.getter(name="archiveOnly")
    def archive_only(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows the group to be archived only. If true, Group is archived and the group is inactive. New messages to this group
        are rejected. The older archived messages are browsable and searchable. If true, the `who_can_post_message` property is
        set to `NONE_CAN_POST`. If reverted from true to false, `who_can_post_message` is set to `ALL_MANAGERS_CAN_POST`. If
        false, The group is active and can receive messages. When false, updating `who_can_post_message` to `NONE_CAN_POST`,
        results in an error.
        """
        return pulumi.get(self, "archive_only")

    @archive_only.setter
    def archive_only(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archive_only", value)

    @property
    @pulumi.getter(name="customFooterText")
    def custom_footer_text(self) -> Optional[pulumi.Input[str]]:
        """
        Set the content of custom footer text. The maximum number of characters is 1,000.
        """
        return pulumi.get(self, "custom_footer_text")

    @custom_footer_text.setter
    def custom_footer_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_footer_text", value)

    @property
    @pulumi.getter(name="customReplyTo")
    def custom_reply_to(self) -> Optional[pulumi.Input[str]]:
        """
        An email address used when replying to a message if the `reply_to` property is set to `REPLY_TO_CUSTOM`. This address is
        defined by an account administrator. When the group's `reply_to` property is set to `REPLY_TO_CUSTOM`, the
        `custom_reply_to` property holds a custom email address used when replying to a message, the `custom_reply_to` property
        must have a text value or an error is returned.
        """
        return pulumi.get(self, "custom_reply_to")

    @custom_reply_to.setter
    def custom_reply_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "custom_reply_to", value)

    @property
    @pulumi.getter(name="customRolesEnabledForSettingsToBeMerged")
    def custom_roles_enabled_for_settings_to_be_merged(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether the group has a custom role that's included in one of the settings being merged.
        """
        return pulumi.get(self, "custom_roles_enabled_for_settings_to_be_merged")

    @custom_roles_enabled_for_settings_to_be_merged.setter
    def custom_roles_enabled_for_settings_to_be_merged(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "custom_roles_enabled_for_settings_to_be_merged", value)

    @property
    @pulumi.getter(name="defaultMessageDenyNotificationText")
    def default_message_deny_notification_text(self) -> Optional[pulumi.Input[str]]:
        """
        When a message is rejected, this is text for the rejection notification sent to the message's author. By default, this
        property is empty and has no value in the API's response body. The maximum notification text size is 10,000 characters.
        Requires `send_message_deny_notification` property to be true.
        """
        return pulumi.get(self, "default_message_deny_notification_text")

    @default_message_deny_notification_text.setter
    def default_message_deny_notification_text(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "default_message_deny_notification_text", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Description of the group. The maximum group description is no more than 300 characters.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def email(self) -> Optional[pulumi.Input[str]]:
        """
        The group's email address.
        """
        return pulumi.get(self, "email")

    @email.setter
    def email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "email", value)

    @property
    @pulumi.getter(name="enableCollaborativeInbox")
    def enable_collaborative_inbox(self) -> Optional[pulumi.Input[bool]]:
        """
        Specifies whether a collaborative inbox will remain turned on for the group.
        """
        return pulumi.get(self, "enable_collaborative_inbox")

    @enable_collaborative_inbox.setter
    def enable_collaborative_inbox(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "enable_collaborative_inbox", value)

    @property
    @pulumi.getter(name="includeCustomFooter")
    def include_custom_footer(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether to include custom footer.
        """
        return pulumi.get(self, "include_custom_footer")

    @include_custom_footer.setter
    def include_custom_footer(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_custom_footer", value)

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables the group to be included in the Global Address List. If true, the group is included in the Global Address List.
        If false, it is not included in the Global Address List.
        """
        return pulumi.get(self, "include_in_global_address_list")

    @include_in_global_address_list.setter
    def include_in_global_address_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_in_global_address_list", value)

    @property
    @pulumi.getter(name="isArchived")
    def is_archived(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows the Group contents to be archived. If true, archive messages sent to the group. If false, Do not keep an archive
        of messages sent to this group. If false, previously archived messages remain in the archive.
        """
        return pulumi.get(self, "is_archived")

    @is_archived.setter
    def is_archived(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_archived", value)

    @property
    @pulumi.getter(name="membersCanPostAsTheGroup")
    def members_can_post_as_the_group(self) -> Optional[pulumi.Input[bool]]:
        """
        Enables members to post messages as the group. If true, group member can post messages using the group's email address
        instead of their own email address. Message appear to originate from the group itself. Any message moderation settings
        on individual users or new members do not apply to posts made on behalf of the group. If false, members can not post in
        behalf of the group's email address.
        """
        return pulumi.get(self, "members_can_post_as_the_group")

    @members_can_post_as_the_group.setter
    def members_can_post_as_the_group(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "members_can_post_as_the_group", value)

    @property
    @pulumi.getter(name="messageModerationLevel")
    def message_moderation_level(self) -> Optional[pulumi.Input[str]]:
        """
        Moderation level of incoming messages. Possible values are: - `MODERATE_ALL_MESSAGES`: All messages are sent to the
        group owner's email address for approval. If approved, the message is sent to the group. - `MODERATE_NON_MEMBERS`: All
        messages from non group members are sent to the group owner's email address for approval. If approved, the message is
        sent to the group. - `MODERATE_NEW_MEMBERS`: All messages from new members are sent to the group owner's email address
        for approval. If approved, the message is sent to the group. - `MODERATE_NONE`: No moderator approval is required.
        Messages are delivered directly to the group. Note: When the `who_can_post_message` is set to `ANYONE_CAN_POST`, we
        recommend the `message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam.When
        `member_can_post_as_the_group` is true, any message moderation settings on individual users or new members will not
        apply to posts made on behalf of the group.
        """
        return pulumi.get(self, "message_moderation_level")

    @message_moderation_level.setter
    def message_moderation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "message_moderation_level", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the group, which has a maximum size of 75 characters.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="primaryLanguage")
    def primary_language(self) -> Optional[pulumi.Input[str]]:
        """
        The primary language for group. For a group's primary language use the language tags from the Google Workspace languages
        found at Google Workspace Email Settings API Email Language Tags.
        """
        return pulumi.get(self, "primary_language")

    @primary_language.setter
    def primary_language(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_language", value)

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies who receives the default reply. Possible values are: - `REPLY_TO_CUSTOM`: For replies to messages, use the
        group's custom email address. When set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds the custom email
        address used when replying to a message, the customReplyTo property must have a value. Otherwise an error is returned. -
        `REPLY_TO_SENDER`: The reply sent to author of message. - `REPLY_TO_LIST`: This reply message is sent to the group. -
        `REPLY_TO_OWNER`: The reply is sent to the owner(s) of the group. This does not include the group's managers. -
        `REPLY_TO_IGNORE`: Group users individually decide where the message reply is sent. - `REPLY_TO_MANAGERS`: This reply
        message is sent to the group's managers, which includes all managers and the group owner.
        """
        return pulumi.get(self, "reply_to")

    @reply_to.setter
    def reply_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "reply_to", value)

    @property
    @pulumi.getter(name="sendMessageDenyNotification")
    def send_message_deny_notification(self) -> Optional[pulumi.Input[bool]]:
        """
        Allows a member to be notified if the member's message to the group is denied by the group owner. If true, when a
        message is rejected, send the deny message notification to the message author. The
        `default_message_deny_notification_text` property is dependent on the `send_message_deny_notification` property being
        true. If false, when a message is rejected, no notification is sent.
        """
        return pulumi.get(self, "send_message_deny_notification")

    @send_message_deny_notification.setter
    def send_message_deny_notification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "send_message_deny_notification", value)

    @property
    @pulumi.getter(name="spamModerationLevel")
    def spam_moderation_level(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies moderation levels for messages detected as spam. Possible values are: - `ALLOW`: Post the message to the
        group. - `MODERATE`: Send the message to the moderation queue. This is the default. - `SILENTLY_MODERATE`: Send the
        message to the moderation queue, but do not send notification to moderators. - `REJECT`: Immediately reject the message.
        """
        return pulumi.get(self, "spam_moderation_level")

    @spam_moderation_level.setter
    def spam_moderation_level(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "spam_moderation_level", value)

    @property
    @pulumi.getter(name="whoCanAssistContent")
    def who_can_assist_content(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies who can moderate metadata. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `MANAGERS_ONLY` -
        `OWNERS_ONLY` - `NONE`
        """
        return pulumi.get(self, "who_can_assist_content")

    @who_can_assist_content.setter
    def who_can_assist_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_assist_content", value)

    @property
    @pulumi.getter(name="whoCanContactOwner")
    def who_can_contact_owner(self) -> Optional[pulumi.Input[str]]:
        """
        Permission to contact owner of the group via web UI. Possible values are: - `ALL_IN_DOMAIN_CAN_CONTACT` -
        `ALL_MANAGERS_CAN_CONTACT` - `ALL_MEMBERS_CAN_CONTACT` - `ANYONE_CAN_CONTACT` - `ALL_OWNERS_CAN_CONTACT`
        """
        return pulumi.get(self, "who_can_contact_owner")

    @who_can_contact_owner.setter
    def who_can_contact_owner(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_contact_owner", value)

    @property
    @pulumi.getter(name="whoCanDiscoverGroup")
    def who_can_discover_group(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies the set of users for whom this group is discoverable. Possible values are: - `ANYONE_CAN_DISCOVER` -
        `ALL_IN_DOMAIN_CAN_DISCOVER` - `ALL_MEMBERS_CAN_DISCOVER`
        """
        return pulumi.get(self, "who_can_discover_group")

    @who_can_discover_group.setter
    def who_can_discover_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_discover_group", value)

    @property
    @pulumi.getter(name="whoCanJoin")
    def who_can_join(self) -> Optional[pulumi.Input[str]]:
        """
        Permission to join group. Possible values are: - `ANYONE_CAN_JOIN`: Any Internet user, both inside and outside your
        domain, can join the group. - `ALL_IN_DOMAIN_CAN_JOIN`: Anyone in the account domain can join. This includes accounts
        with multiple domains. - `INVITED_CAN_JOIN`: Candidates for membership can be invited to join. - `CAN_REQUEST_TO_JOIN`:
        Non members can request an invitation to join.
        """
        return pulumi.get(self, "who_can_join")

    @who_can_join.setter
    def who_can_join(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_join", value)

    @property
    @pulumi.getter(name="whoCanLeaveGroup")
    def who_can_leave_group(self) -> Optional[pulumi.Input[str]]:
        """
        Permission to leave the group. Possible values are: - `ALL_MANAGERS_CAN_LEAVE` - `ALL_MEMBERS_CAN_LEAVE` -
        `NONE_CAN_LEAVE`
        """
        return pulumi.get(self, "who_can_leave_group")

    @who_can_leave_group.setter
    def who_can_leave_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_leave_group", value)

    @property
    @pulumi.getter(name="whoCanModerateContent")
    def who_can_moderate_content(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies who can moderate content. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` -
        `NONE`
        """
        return pulumi.get(self, "who_can_moderate_content")

    @who_can_moderate_content.setter
    def who_can_moderate_content(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_moderate_content", value)

    @property
    @pulumi.getter(name="whoCanModerateMembers")
    def who_can_moderate_members(self) -> Optional[pulumi.Input[str]]:
        """
        Specifies who can manage members. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` - `NONE`
        """
        return pulumi.get(self, "who_can_moderate_members")

    @who_can_moderate_members.setter
    def who_can_moderate_members(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_moderate_members", value)

    @property
    @pulumi.getter(name="whoCanPostMessage")
    def who_can_post_message(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions to post messages. Possible values are: - `NONE_CAN_POST`: The group is disabled and archived. No one can
        post a message to this group. * When archiveOnly is false, updating whoCanPostMessage to NONE_CAN_POST, results in an
        error. * If archiveOnly is reverted from true to false, whoCanPostMessages is set to ALL_MANAGERS_CAN_POST. -
        `ALL_MANAGERS_CAN_POST`: Managers, including group owners, can post messages. - `ALL_MEMBERS_CAN_POST`: Any group member
        can post a message. - `ALL_OWNERS_CAN_POST`: Only group owners can post a message. - `ALL_IN_DOMAIN_CAN_POST`: Anyone in
        the account can post a message. - `ANYONE_CAN_POST`: Any Internet user who outside your account can access your Google
        Groups service and post a message. *Note: When `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend
        the`message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam. Users not
        belonging to the organization are not allowed to become members of this group.
        """
        return pulumi.get(self, "who_can_post_message")

    @who_can_post_message.setter
    def who_can_post_message(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_post_message", value)

    @property
    @pulumi.getter(name="whoCanViewGroup")
    def who_can_view_group(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions to view group messages. Possible values are: - `ANYONE_CAN_VIEW`: Any Internet user can view the group's
        messages. - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in your account can view this group's messages. - `ALL_MEMBERS_CAN_VIEW`:
        All group members can view the group's messages. - `ALL_MANAGERS_CAN_VIEW`: Any group manager can view this group's
        messages. - `ALL_OWNERS_CAN_VIEW`: The group owners can view this group's messages.
        """
        return pulumi.get(self, "who_can_view_group")

    @who_can_view_group.setter
    def who_can_view_group(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_view_group", value)

    @property
    @pulumi.getter(name="whoCanViewMembership")
    def who_can_view_membership(self) -> Optional[pulumi.Input[str]]:
        """
        Permissions to view membership. Possible values are: - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in the account can view the
        group members list. If a group already has external members, those members can still send email to this group. -
        `ALL_MEMBERS_CAN_VIEW`: The group members can view the group members list. - `ALL_MANAGERS_CAN_VIEW`: The group managers
        can view group members list. - `ALL_OWNERS_CAN_VIEW`: The group owners can view group members list.
        """
        return pulumi.get(self, "who_can_view_membership")

    @who_can_view_membership.setter
    def who_can_view_membership(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "who_can_view_membership", value)


class GroupSettings(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_external_members: Optional[pulumi.Input[bool]] = None,
                 allow_web_posting: Optional[pulumi.Input[bool]] = None,
                 archive_only: Optional[pulumi.Input[bool]] = None,
                 custom_footer_text: Optional[pulumi.Input[str]] = None,
                 custom_reply_to: Optional[pulumi.Input[str]] = None,
                 default_message_deny_notification_text: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_collaborative_inbox: Optional[pulumi.Input[bool]] = None,
                 include_custom_footer: Optional[pulumi.Input[bool]] = None,
                 include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
                 is_archived: Optional[pulumi.Input[bool]] = None,
                 members_can_post_as_the_group: Optional[pulumi.Input[bool]] = None,
                 message_moderation_level: Optional[pulumi.Input[str]] = None,
                 primary_language: Optional[pulumi.Input[str]] = None,
                 reply_to: Optional[pulumi.Input[str]] = None,
                 send_message_deny_notification: Optional[pulumi.Input[bool]] = None,
                 spam_moderation_level: Optional[pulumi.Input[str]] = None,
                 who_can_assist_content: Optional[pulumi.Input[str]] = None,
                 who_can_contact_owner: Optional[pulumi.Input[str]] = None,
                 who_can_discover_group: Optional[pulumi.Input[str]] = None,
                 who_can_join: Optional[pulumi.Input[str]] = None,
                 who_can_leave_group: Optional[pulumi.Input[str]] = None,
                 who_can_moderate_content: Optional[pulumi.Input[str]] = None,
                 who_can_moderate_members: Optional[pulumi.Input[str]] = None,
                 who_can_post_message: Optional[pulumi.Input[str]] = None,
                 who_can_view_group: Optional[pulumi.Input[str]] = None,
                 who_can_view_membership: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Group Settings resource manages Google Workspace Groups Setting. Group Settings requires the `https://www.googleapis.com/auth/apps.groups.settings` client scope.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_googleworkspace as googleworkspace

        sales = googleworkspace.Group("sales", email="sales@example.com")
        sales_settings = googleworkspace.GroupSettings("sales-settings",
            email=sales.email,
            allow_external_members=False,
            who_can_join="INVITED_CAN_JOIN",
            who_can_view_membership="ALL_MANAGERS_CAN_VIEW",
            who_can_post_message="ALL_MEMBERS_CAN_POST")
        ```

        ## Import

        ```sh
         $ pulumi import googleworkspace:index/groupSettings:GroupSettings sales-settings sales@example.com
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_external_members: Identifies whether members external to your organization can join the group. If true, Google Workspace users external to
               your organization can become members of this group. If false, users not belonging to the organization are not allowed to
               become members of this group.
        :param pulumi.Input[bool] allow_web_posting: Allows posting from web. If true, allows any member to post to the group forum. If false, Members only use Gmail to
               communicate with the group.
        :param pulumi.Input[bool] archive_only: Allows the group to be archived only. If true, Group is archived and the group is inactive. New messages to this group
               are rejected. The older archived messages are browsable and searchable. If true, the `who_can_post_message` property is
               set to `NONE_CAN_POST`. If reverted from true to false, `who_can_post_message` is set to `ALL_MANAGERS_CAN_POST`. If
               false, The group is active and can receive messages. When false, updating `who_can_post_message` to `NONE_CAN_POST`,
               results in an error.
        :param pulumi.Input[str] custom_footer_text: Set the content of custom footer text. The maximum number of characters is 1,000.
        :param pulumi.Input[str] custom_reply_to: An email address used when replying to a message if the `reply_to` property is set to `REPLY_TO_CUSTOM`. This address is
               defined by an account administrator. When the group's `reply_to` property is set to `REPLY_TO_CUSTOM`, the
               `custom_reply_to` property holds a custom email address used when replying to a message, the `custom_reply_to` property
               must have a text value or an error is returned.
        :param pulumi.Input[str] default_message_deny_notification_text: When a message is rejected, this is text for the rejection notification sent to the message's author. By default, this
               property is empty and has no value in the API's response body. The maximum notification text size is 10,000 characters.
               Requires `send_message_deny_notification` property to be true.
        :param pulumi.Input[str] email: The group's email address.
        :param pulumi.Input[bool] enable_collaborative_inbox: Specifies whether a collaborative inbox will remain turned on for the group.
        :param pulumi.Input[bool] include_custom_footer: Whether to include custom footer.
        :param pulumi.Input[bool] include_in_global_address_list: Enables the group to be included in the Global Address List. If true, the group is included in the Global Address List.
               If false, it is not included in the Global Address List.
        :param pulumi.Input[bool] is_archived: Allows the Group contents to be archived. If true, archive messages sent to the group. If false, Do not keep an archive
               of messages sent to this group. If false, previously archived messages remain in the archive.
        :param pulumi.Input[bool] members_can_post_as_the_group: Enables members to post messages as the group. If true, group member can post messages using the group's email address
               instead of their own email address. Message appear to originate from the group itself. Any message moderation settings
               on individual users or new members do not apply to posts made on behalf of the group. If false, members can not post in
               behalf of the group's email address.
        :param pulumi.Input[str] message_moderation_level: Moderation level of incoming messages. Possible values are: - `MODERATE_ALL_MESSAGES`: All messages are sent to the
               group owner's email address for approval. If approved, the message is sent to the group. - `MODERATE_NON_MEMBERS`: All
               messages from non group members are sent to the group owner's email address for approval. If approved, the message is
               sent to the group. - `MODERATE_NEW_MEMBERS`: All messages from new members are sent to the group owner's email address
               for approval. If approved, the message is sent to the group. - `MODERATE_NONE`: No moderator approval is required.
               Messages are delivered directly to the group. Note: When the `who_can_post_message` is set to `ANYONE_CAN_POST`, we
               recommend the `message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam.When
               `member_can_post_as_the_group` is true, any message moderation settings on individual users or new members will not
               apply to posts made on behalf of the group.
        :param pulumi.Input[str] primary_language: The primary language for group. For a group's primary language use the language tags from the Google Workspace languages
               found at Google Workspace Email Settings API Email Language Tags.
        :param pulumi.Input[str] reply_to: Specifies who receives the default reply. Possible values are: - `REPLY_TO_CUSTOM`: For replies to messages, use the
               group's custom email address. When set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds the custom email
               address used when replying to a message, the customReplyTo property must have a value. Otherwise an error is returned. -
               `REPLY_TO_SENDER`: The reply sent to author of message. - `REPLY_TO_LIST`: This reply message is sent to the group. -
               `REPLY_TO_OWNER`: The reply is sent to the owner(s) of the group. This does not include the group's managers. -
               `REPLY_TO_IGNORE`: Group users individually decide where the message reply is sent. - `REPLY_TO_MANAGERS`: This reply
               message is sent to the group's managers, which includes all managers and the group owner.
        :param pulumi.Input[bool] send_message_deny_notification: Allows a member to be notified if the member's message to the group is denied by the group owner. If true, when a
               message is rejected, send the deny message notification to the message author. The
               `default_message_deny_notification_text` property is dependent on the `send_message_deny_notification` property being
               true. If false, when a message is rejected, no notification is sent.
        :param pulumi.Input[str] spam_moderation_level: Specifies moderation levels for messages detected as spam. Possible values are: - `ALLOW`: Post the message to the
               group. - `MODERATE`: Send the message to the moderation queue. This is the default. - `SILENTLY_MODERATE`: Send the
               message to the moderation queue, but do not send notification to moderators. - `REJECT`: Immediately reject the message.
        :param pulumi.Input[str] who_can_assist_content: Specifies who can moderate metadata. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `MANAGERS_ONLY` -
               `OWNERS_ONLY` - `NONE`
        :param pulumi.Input[str] who_can_contact_owner: Permission to contact owner of the group via web UI. Possible values are: - `ALL_IN_DOMAIN_CAN_CONTACT` -
               `ALL_MANAGERS_CAN_CONTACT` - `ALL_MEMBERS_CAN_CONTACT` - `ANYONE_CAN_CONTACT` - `ALL_OWNERS_CAN_CONTACT`
        :param pulumi.Input[str] who_can_discover_group: Specifies the set of users for whom this group is discoverable. Possible values are: - `ANYONE_CAN_DISCOVER` -
               `ALL_IN_DOMAIN_CAN_DISCOVER` - `ALL_MEMBERS_CAN_DISCOVER`
        :param pulumi.Input[str] who_can_join: Permission to join group. Possible values are: - `ANYONE_CAN_JOIN`: Any Internet user, both inside and outside your
               domain, can join the group. - `ALL_IN_DOMAIN_CAN_JOIN`: Anyone in the account domain can join. This includes accounts
               with multiple domains. - `INVITED_CAN_JOIN`: Candidates for membership can be invited to join. - `CAN_REQUEST_TO_JOIN`:
               Non members can request an invitation to join.
        :param pulumi.Input[str] who_can_leave_group: Permission to leave the group. Possible values are: - `ALL_MANAGERS_CAN_LEAVE` - `ALL_MEMBERS_CAN_LEAVE` -
               `NONE_CAN_LEAVE`
        :param pulumi.Input[str] who_can_moderate_content: Specifies who can moderate content. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` -
               `NONE`
        :param pulumi.Input[str] who_can_moderate_members: Specifies who can manage members. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` - `NONE`
        :param pulumi.Input[str] who_can_post_message: Permissions to post messages. Possible values are: - `NONE_CAN_POST`: The group is disabled and archived. No one can
               post a message to this group. * When archiveOnly is false, updating whoCanPostMessage to NONE_CAN_POST, results in an
               error. * If archiveOnly is reverted from true to false, whoCanPostMessages is set to ALL_MANAGERS_CAN_POST. -
               `ALL_MANAGERS_CAN_POST`: Managers, including group owners, can post messages. - `ALL_MEMBERS_CAN_POST`: Any group member
               can post a message. - `ALL_OWNERS_CAN_POST`: Only group owners can post a message. - `ALL_IN_DOMAIN_CAN_POST`: Anyone in
               the account can post a message. - `ANYONE_CAN_POST`: Any Internet user who outside your account can access your Google
               Groups service and post a message. *Note: When `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend
               the`message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam. Users not
               belonging to the organization are not allowed to become members of this group.
        :param pulumi.Input[str] who_can_view_group: Permissions to view group messages. Possible values are: - `ANYONE_CAN_VIEW`: Any Internet user can view the group's
               messages. - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in your account can view this group's messages. - `ALL_MEMBERS_CAN_VIEW`:
               All group members can view the group's messages. - `ALL_MANAGERS_CAN_VIEW`: Any group manager can view this group's
               messages. - `ALL_OWNERS_CAN_VIEW`: The group owners can view this group's messages.
        :param pulumi.Input[str] who_can_view_membership: Permissions to view membership. Possible values are: - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in the account can view the
               group members list. If a group already has external members, those members can still send email to this group. -
               `ALL_MEMBERS_CAN_VIEW`: The group members can view the group members list. - `ALL_MANAGERS_CAN_VIEW`: The group managers
               can view group members list. - `ALL_OWNERS_CAN_VIEW`: The group owners can view group members list.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: GroupSettingsArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Group Settings resource manages Google Workspace Groups Setting. Group Settings requires the `https://www.googleapis.com/auth/apps.groups.settings` client scope.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_googleworkspace as googleworkspace

        sales = googleworkspace.Group("sales", email="sales@example.com")
        sales_settings = googleworkspace.GroupSettings("sales-settings",
            email=sales.email,
            allow_external_members=False,
            who_can_join="INVITED_CAN_JOIN",
            who_can_view_membership="ALL_MANAGERS_CAN_VIEW",
            who_can_post_message="ALL_MEMBERS_CAN_POST")
        ```

        ## Import

        ```sh
         $ pulumi import googleworkspace:index/groupSettings:GroupSettings sales-settings sales@example.com
        ```

        :param str resource_name: The name of the resource.
        :param GroupSettingsArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(GroupSettingsArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 allow_external_members: Optional[pulumi.Input[bool]] = None,
                 allow_web_posting: Optional[pulumi.Input[bool]] = None,
                 archive_only: Optional[pulumi.Input[bool]] = None,
                 custom_footer_text: Optional[pulumi.Input[str]] = None,
                 custom_reply_to: Optional[pulumi.Input[str]] = None,
                 default_message_deny_notification_text: Optional[pulumi.Input[str]] = None,
                 email: Optional[pulumi.Input[str]] = None,
                 enable_collaborative_inbox: Optional[pulumi.Input[bool]] = None,
                 include_custom_footer: Optional[pulumi.Input[bool]] = None,
                 include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
                 is_archived: Optional[pulumi.Input[bool]] = None,
                 members_can_post_as_the_group: Optional[pulumi.Input[bool]] = None,
                 message_moderation_level: Optional[pulumi.Input[str]] = None,
                 primary_language: Optional[pulumi.Input[str]] = None,
                 reply_to: Optional[pulumi.Input[str]] = None,
                 send_message_deny_notification: Optional[pulumi.Input[bool]] = None,
                 spam_moderation_level: Optional[pulumi.Input[str]] = None,
                 who_can_assist_content: Optional[pulumi.Input[str]] = None,
                 who_can_contact_owner: Optional[pulumi.Input[str]] = None,
                 who_can_discover_group: Optional[pulumi.Input[str]] = None,
                 who_can_join: Optional[pulumi.Input[str]] = None,
                 who_can_leave_group: Optional[pulumi.Input[str]] = None,
                 who_can_moderate_content: Optional[pulumi.Input[str]] = None,
                 who_can_moderate_members: Optional[pulumi.Input[str]] = None,
                 who_can_post_message: Optional[pulumi.Input[str]] = None,
                 who_can_view_group: Optional[pulumi.Input[str]] = None,
                 who_can_view_membership: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = GroupSettingsArgs.__new__(GroupSettingsArgs)

            __props__.__dict__["allow_external_members"] = allow_external_members
            __props__.__dict__["allow_web_posting"] = allow_web_posting
            __props__.__dict__["archive_only"] = archive_only
            __props__.__dict__["custom_footer_text"] = custom_footer_text
            __props__.__dict__["custom_reply_to"] = custom_reply_to
            __props__.__dict__["default_message_deny_notification_text"] = default_message_deny_notification_text
            if email is None and not opts.urn:
                raise TypeError("Missing required property 'email'")
            __props__.__dict__["email"] = email
            __props__.__dict__["enable_collaborative_inbox"] = enable_collaborative_inbox
            __props__.__dict__["include_custom_footer"] = include_custom_footer
            __props__.__dict__["include_in_global_address_list"] = include_in_global_address_list
            __props__.__dict__["is_archived"] = is_archived
            __props__.__dict__["members_can_post_as_the_group"] = members_can_post_as_the_group
            __props__.__dict__["message_moderation_level"] = message_moderation_level
            __props__.__dict__["primary_language"] = primary_language
            __props__.__dict__["reply_to"] = reply_to
            __props__.__dict__["send_message_deny_notification"] = send_message_deny_notification
            __props__.__dict__["spam_moderation_level"] = spam_moderation_level
            __props__.__dict__["who_can_assist_content"] = who_can_assist_content
            __props__.__dict__["who_can_contact_owner"] = who_can_contact_owner
            __props__.__dict__["who_can_discover_group"] = who_can_discover_group
            __props__.__dict__["who_can_join"] = who_can_join
            __props__.__dict__["who_can_leave_group"] = who_can_leave_group
            __props__.__dict__["who_can_moderate_content"] = who_can_moderate_content
            __props__.__dict__["who_can_moderate_members"] = who_can_moderate_members
            __props__.__dict__["who_can_post_message"] = who_can_post_message
            __props__.__dict__["who_can_view_group"] = who_can_view_group
            __props__.__dict__["who_can_view_membership"] = who_can_view_membership
            __props__.__dict__["custom_roles_enabled_for_settings_to_be_merged"] = None
            __props__.__dict__["description"] = None
            __props__.__dict__["name"] = None
        super(GroupSettings, __self__).__init__(
            'googleworkspace:index/groupSettings:GroupSettings',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            allow_external_members: Optional[pulumi.Input[bool]] = None,
            allow_web_posting: Optional[pulumi.Input[bool]] = None,
            archive_only: Optional[pulumi.Input[bool]] = None,
            custom_footer_text: Optional[pulumi.Input[str]] = None,
            custom_reply_to: Optional[pulumi.Input[str]] = None,
            custom_roles_enabled_for_settings_to_be_merged: Optional[pulumi.Input[bool]] = None,
            default_message_deny_notification_text: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            email: Optional[pulumi.Input[str]] = None,
            enable_collaborative_inbox: Optional[pulumi.Input[bool]] = None,
            include_custom_footer: Optional[pulumi.Input[bool]] = None,
            include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
            is_archived: Optional[pulumi.Input[bool]] = None,
            members_can_post_as_the_group: Optional[pulumi.Input[bool]] = None,
            message_moderation_level: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            primary_language: Optional[pulumi.Input[str]] = None,
            reply_to: Optional[pulumi.Input[str]] = None,
            send_message_deny_notification: Optional[pulumi.Input[bool]] = None,
            spam_moderation_level: Optional[pulumi.Input[str]] = None,
            who_can_assist_content: Optional[pulumi.Input[str]] = None,
            who_can_contact_owner: Optional[pulumi.Input[str]] = None,
            who_can_discover_group: Optional[pulumi.Input[str]] = None,
            who_can_join: Optional[pulumi.Input[str]] = None,
            who_can_leave_group: Optional[pulumi.Input[str]] = None,
            who_can_moderate_content: Optional[pulumi.Input[str]] = None,
            who_can_moderate_members: Optional[pulumi.Input[str]] = None,
            who_can_post_message: Optional[pulumi.Input[str]] = None,
            who_can_view_group: Optional[pulumi.Input[str]] = None,
            who_can_view_membership: Optional[pulumi.Input[str]] = None) -> 'GroupSettings':
        """
        Get an existing GroupSettings resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] allow_external_members: Identifies whether members external to your organization can join the group. If true, Google Workspace users external to
               your organization can become members of this group. If false, users not belonging to the organization are not allowed to
               become members of this group.
        :param pulumi.Input[bool] allow_web_posting: Allows posting from web. If true, allows any member to post to the group forum. If false, Members only use Gmail to
               communicate with the group.
        :param pulumi.Input[bool] archive_only: Allows the group to be archived only. If true, Group is archived and the group is inactive. New messages to this group
               are rejected. The older archived messages are browsable and searchable. If true, the `who_can_post_message` property is
               set to `NONE_CAN_POST`. If reverted from true to false, `who_can_post_message` is set to `ALL_MANAGERS_CAN_POST`. If
               false, The group is active and can receive messages. When false, updating `who_can_post_message` to `NONE_CAN_POST`,
               results in an error.
        :param pulumi.Input[str] custom_footer_text: Set the content of custom footer text. The maximum number of characters is 1,000.
        :param pulumi.Input[str] custom_reply_to: An email address used when replying to a message if the `reply_to` property is set to `REPLY_TO_CUSTOM`. This address is
               defined by an account administrator. When the group's `reply_to` property is set to `REPLY_TO_CUSTOM`, the
               `custom_reply_to` property holds a custom email address used when replying to a message, the `custom_reply_to` property
               must have a text value or an error is returned.
        :param pulumi.Input[bool] custom_roles_enabled_for_settings_to_be_merged: Specifies whether the group has a custom role that's included in one of the settings being merged.
        :param pulumi.Input[str] default_message_deny_notification_text: When a message is rejected, this is text for the rejection notification sent to the message's author. By default, this
               property is empty and has no value in the API's response body. The maximum notification text size is 10,000 characters.
               Requires `send_message_deny_notification` property to be true.
        :param pulumi.Input[str] description: Description of the group. The maximum group description is no more than 300 characters.
        :param pulumi.Input[str] email: The group's email address.
        :param pulumi.Input[bool] enable_collaborative_inbox: Specifies whether a collaborative inbox will remain turned on for the group.
        :param pulumi.Input[bool] include_custom_footer: Whether to include custom footer.
        :param pulumi.Input[bool] include_in_global_address_list: Enables the group to be included in the Global Address List. If true, the group is included in the Global Address List.
               If false, it is not included in the Global Address List.
        :param pulumi.Input[bool] is_archived: Allows the Group contents to be archived. If true, archive messages sent to the group. If false, Do not keep an archive
               of messages sent to this group. If false, previously archived messages remain in the archive.
        :param pulumi.Input[bool] members_can_post_as_the_group: Enables members to post messages as the group. If true, group member can post messages using the group's email address
               instead of their own email address. Message appear to originate from the group itself. Any message moderation settings
               on individual users or new members do not apply to posts made on behalf of the group. If false, members can not post in
               behalf of the group's email address.
        :param pulumi.Input[str] message_moderation_level: Moderation level of incoming messages. Possible values are: - `MODERATE_ALL_MESSAGES`: All messages are sent to the
               group owner's email address for approval. If approved, the message is sent to the group. - `MODERATE_NON_MEMBERS`: All
               messages from non group members are sent to the group owner's email address for approval. If approved, the message is
               sent to the group. - `MODERATE_NEW_MEMBERS`: All messages from new members are sent to the group owner's email address
               for approval. If approved, the message is sent to the group. - `MODERATE_NONE`: No moderator approval is required.
               Messages are delivered directly to the group. Note: When the `who_can_post_message` is set to `ANYONE_CAN_POST`, we
               recommend the `message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam.When
               `member_can_post_as_the_group` is true, any message moderation settings on individual users or new members will not
               apply to posts made on behalf of the group.
        :param pulumi.Input[str] name: Name of the group, which has a maximum size of 75 characters.
        :param pulumi.Input[str] primary_language: The primary language for group. For a group's primary language use the language tags from the Google Workspace languages
               found at Google Workspace Email Settings API Email Language Tags.
        :param pulumi.Input[str] reply_to: Specifies who receives the default reply. Possible values are: - `REPLY_TO_CUSTOM`: For replies to messages, use the
               group's custom email address. When set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds the custom email
               address used when replying to a message, the customReplyTo property must have a value. Otherwise an error is returned. -
               `REPLY_TO_SENDER`: The reply sent to author of message. - `REPLY_TO_LIST`: This reply message is sent to the group. -
               `REPLY_TO_OWNER`: The reply is sent to the owner(s) of the group. This does not include the group's managers. -
               `REPLY_TO_IGNORE`: Group users individually decide where the message reply is sent. - `REPLY_TO_MANAGERS`: This reply
               message is sent to the group's managers, which includes all managers and the group owner.
        :param pulumi.Input[bool] send_message_deny_notification: Allows a member to be notified if the member's message to the group is denied by the group owner. If true, when a
               message is rejected, send the deny message notification to the message author. The
               `default_message_deny_notification_text` property is dependent on the `send_message_deny_notification` property being
               true. If false, when a message is rejected, no notification is sent.
        :param pulumi.Input[str] spam_moderation_level: Specifies moderation levels for messages detected as spam. Possible values are: - `ALLOW`: Post the message to the
               group. - `MODERATE`: Send the message to the moderation queue. This is the default. - `SILENTLY_MODERATE`: Send the
               message to the moderation queue, but do not send notification to moderators. - `REJECT`: Immediately reject the message.
        :param pulumi.Input[str] who_can_assist_content: Specifies who can moderate metadata. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `MANAGERS_ONLY` -
               `OWNERS_ONLY` - `NONE`
        :param pulumi.Input[str] who_can_contact_owner: Permission to contact owner of the group via web UI. Possible values are: - `ALL_IN_DOMAIN_CAN_CONTACT` -
               `ALL_MANAGERS_CAN_CONTACT` - `ALL_MEMBERS_CAN_CONTACT` - `ANYONE_CAN_CONTACT` - `ALL_OWNERS_CAN_CONTACT`
        :param pulumi.Input[str] who_can_discover_group: Specifies the set of users for whom this group is discoverable. Possible values are: - `ANYONE_CAN_DISCOVER` -
               `ALL_IN_DOMAIN_CAN_DISCOVER` - `ALL_MEMBERS_CAN_DISCOVER`
        :param pulumi.Input[str] who_can_join: Permission to join group. Possible values are: - `ANYONE_CAN_JOIN`: Any Internet user, both inside and outside your
               domain, can join the group. - `ALL_IN_DOMAIN_CAN_JOIN`: Anyone in the account domain can join. This includes accounts
               with multiple domains. - `INVITED_CAN_JOIN`: Candidates for membership can be invited to join. - `CAN_REQUEST_TO_JOIN`:
               Non members can request an invitation to join.
        :param pulumi.Input[str] who_can_leave_group: Permission to leave the group. Possible values are: - `ALL_MANAGERS_CAN_LEAVE` - `ALL_MEMBERS_CAN_LEAVE` -
               `NONE_CAN_LEAVE`
        :param pulumi.Input[str] who_can_moderate_content: Specifies who can moderate content. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` -
               `NONE`
        :param pulumi.Input[str] who_can_moderate_members: Specifies who can manage members. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` - `NONE`
        :param pulumi.Input[str] who_can_post_message: Permissions to post messages. Possible values are: - `NONE_CAN_POST`: The group is disabled and archived. No one can
               post a message to this group. * When archiveOnly is false, updating whoCanPostMessage to NONE_CAN_POST, results in an
               error. * If archiveOnly is reverted from true to false, whoCanPostMessages is set to ALL_MANAGERS_CAN_POST. -
               `ALL_MANAGERS_CAN_POST`: Managers, including group owners, can post messages. - `ALL_MEMBERS_CAN_POST`: Any group member
               can post a message. - `ALL_OWNERS_CAN_POST`: Only group owners can post a message. - `ALL_IN_DOMAIN_CAN_POST`: Anyone in
               the account can post a message. - `ANYONE_CAN_POST`: Any Internet user who outside your account can access your Google
               Groups service and post a message. *Note: When `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend
               the`message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam. Users not
               belonging to the organization are not allowed to become members of this group.
        :param pulumi.Input[str] who_can_view_group: Permissions to view group messages. Possible values are: - `ANYONE_CAN_VIEW`: Any Internet user can view the group's
               messages. - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in your account can view this group's messages. - `ALL_MEMBERS_CAN_VIEW`:
               All group members can view the group's messages. - `ALL_MANAGERS_CAN_VIEW`: Any group manager can view this group's
               messages. - `ALL_OWNERS_CAN_VIEW`: The group owners can view this group's messages.
        :param pulumi.Input[str] who_can_view_membership: Permissions to view membership. Possible values are: - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in the account can view the
               group members list. If a group already has external members, those members can still send email to this group. -
               `ALL_MEMBERS_CAN_VIEW`: The group members can view the group members list. - `ALL_MANAGERS_CAN_VIEW`: The group managers
               can view group members list. - `ALL_OWNERS_CAN_VIEW`: The group owners can view group members list.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _GroupSettingsState.__new__(_GroupSettingsState)

        __props__.__dict__["allow_external_members"] = allow_external_members
        __props__.__dict__["allow_web_posting"] = allow_web_posting
        __props__.__dict__["archive_only"] = archive_only
        __props__.__dict__["custom_footer_text"] = custom_footer_text
        __props__.__dict__["custom_reply_to"] = custom_reply_to
        __props__.__dict__["custom_roles_enabled_for_settings_to_be_merged"] = custom_roles_enabled_for_settings_to_be_merged
        __props__.__dict__["default_message_deny_notification_text"] = default_message_deny_notification_text
        __props__.__dict__["description"] = description
        __props__.__dict__["email"] = email
        __props__.__dict__["enable_collaborative_inbox"] = enable_collaborative_inbox
        __props__.__dict__["include_custom_footer"] = include_custom_footer
        __props__.__dict__["include_in_global_address_list"] = include_in_global_address_list
        __props__.__dict__["is_archived"] = is_archived
        __props__.__dict__["members_can_post_as_the_group"] = members_can_post_as_the_group
        __props__.__dict__["message_moderation_level"] = message_moderation_level
        __props__.__dict__["name"] = name
        __props__.__dict__["primary_language"] = primary_language
        __props__.__dict__["reply_to"] = reply_to
        __props__.__dict__["send_message_deny_notification"] = send_message_deny_notification
        __props__.__dict__["spam_moderation_level"] = spam_moderation_level
        __props__.__dict__["who_can_assist_content"] = who_can_assist_content
        __props__.__dict__["who_can_contact_owner"] = who_can_contact_owner
        __props__.__dict__["who_can_discover_group"] = who_can_discover_group
        __props__.__dict__["who_can_join"] = who_can_join
        __props__.__dict__["who_can_leave_group"] = who_can_leave_group
        __props__.__dict__["who_can_moderate_content"] = who_can_moderate_content
        __props__.__dict__["who_can_moderate_members"] = who_can_moderate_members
        __props__.__dict__["who_can_post_message"] = who_can_post_message
        __props__.__dict__["who_can_view_group"] = who_can_view_group
        __props__.__dict__["who_can_view_membership"] = who_can_view_membership
        return GroupSettings(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="allowExternalMembers")
    def allow_external_members(self) -> pulumi.Output[Optional[bool]]:
        """
        Identifies whether members external to your organization can join the group. If true, Google Workspace users external to
        your organization can become members of this group. If false, users not belonging to the organization are not allowed to
        become members of this group.
        """
        return pulumi.get(self, "allow_external_members")

    @property
    @pulumi.getter(name="allowWebPosting")
    def allow_web_posting(self) -> pulumi.Output[Optional[bool]]:
        """
        Allows posting from web. If true, allows any member to post to the group forum. If false, Members only use Gmail to
        communicate with the group.
        """
        return pulumi.get(self, "allow_web_posting")

    @property
    @pulumi.getter(name="archiveOnly")
    def archive_only(self) -> pulumi.Output[Optional[bool]]:
        """
        Allows the group to be archived only. If true, Group is archived and the group is inactive. New messages to this group
        are rejected. The older archived messages are browsable and searchable. If true, the `who_can_post_message` property is
        set to `NONE_CAN_POST`. If reverted from true to false, `who_can_post_message` is set to `ALL_MANAGERS_CAN_POST`. If
        false, The group is active and can receive messages. When false, updating `who_can_post_message` to `NONE_CAN_POST`,
        results in an error.
        """
        return pulumi.get(self, "archive_only")

    @property
    @pulumi.getter(name="customFooterText")
    def custom_footer_text(self) -> pulumi.Output[Optional[str]]:
        """
        Set the content of custom footer text. The maximum number of characters is 1,000.
        """
        return pulumi.get(self, "custom_footer_text")

    @property
    @pulumi.getter(name="customReplyTo")
    def custom_reply_to(self) -> pulumi.Output[Optional[str]]:
        """
        An email address used when replying to a message if the `reply_to` property is set to `REPLY_TO_CUSTOM`. This address is
        defined by an account administrator. When the group's `reply_to` property is set to `REPLY_TO_CUSTOM`, the
        `custom_reply_to` property holds a custom email address used when replying to a message, the `custom_reply_to` property
        must have a text value or an error is returned.
        """
        return pulumi.get(self, "custom_reply_to")

    @property
    @pulumi.getter(name="customRolesEnabledForSettingsToBeMerged")
    def custom_roles_enabled_for_settings_to_be_merged(self) -> pulumi.Output[bool]:
        """
        Specifies whether the group has a custom role that's included in one of the settings being merged.
        """
        return pulumi.get(self, "custom_roles_enabled_for_settings_to_be_merged")

    @property
    @pulumi.getter(name="defaultMessageDenyNotificationText")
    def default_message_deny_notification_text(self) -> pulumi.Output[Optional[str]]:
        """
        When a message is rejected, this is text for the rejection notification sent to the message's author. By default, this
        property is empty and has no value in the API's response body. The maximum notification text size is 10,000 characters.
        Requires `send_message_deny_notification` property to be true.
        """
        return pulumi.get(self, "default_message_deny_notification_text")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[str]:
        """
        Description of the group. The maximum group description is no more than 300 characters.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> pulumi.Output[str]:
        """
        The group's email address.
        """
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="enableCollaborativeInbox")
    def enable_collaborative_inbox(self) -> pulumi.Output[Optional[bool]]:
        """
        Specifies whether a collaborative inbox will remain turned on for the group.
        """
        return pulumi.get(self, "enable_collaborative_inbox")

    @property
    @pulumi.getter(name="includeCustomFooter")
    def include_custom_footer(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether to include custom footer.
        """
        return pulumi.get(self, "include_custom_footer")

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables the group to be included in the Global Address List. If true, the group is included in the Global Address List.
        If false, it is not included in the Global Address List.
        """
        return pulumi.get(self, "include_in_global_address_list")

    @property
    @pulumi.getter(name="isArchived")
    def is_archived(self) -> pulumi.Output[Optional[bool]]:
        """
        Allows the Group contents to be archived. If true, archive messages sent to the group. If false, Do not keep an archive
        of messages sent to this group. If false, previously archived messages remain in the archive.
        """
        return pulumi.get(self, "is_archived")

    @property
    @pulumi.getter(name="membersCanPostAsTheGroup")
    def members_can_post_as_the_group(self) -> pulumi.Output[Optional[bool]]:
        """
        Enables members to post messages as the group. If true, group member can post messages using the group's email address
        instead of their own email address. Message appear to originate from the group itself. Any message moderation settings
        on individual users or new members do not apply to posts made on behalf of the group. If false, members can not post in
        behalf of the group's email address.
        """
        return pulumi.get(self, "members_can_post_as_the_group")

    @property
    @pulumi.getter(name="messageModerationLevel")
    def message_moderation_level(self) -> pulumi.Output[Optional[str]]:
        """
        Moderation level of incoming messages. Possible values are: - `MODERATE_ALL_MESSAGES`: All messages are sent to the
        group owner's email address for approval. If approved, the message is sent to the group. - `MODERATE_NON_MEMBERS`: All
        messages from non group members are sent to the group owner's email address for approval. If approved, the message is
        sent to the group. - `MODERATE_NEW_MEMBERS`: All messages from new members are sent to the group owner's email address
        for approval. If approved, the message is sent to the group. - `MODERATE_NONE`: No moderator approval is required.
        Messages are delivered directly to the group. Note: When the `who_can_post_message` is set to `ANYONE_CAN_POST`, we
        recommend the `message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam.When
        `member_can_post_as_the_group` is true, any message moderation settings on individual users or new members will not
        apply to posts made on behalf of the group.
        """
        return pulumi.get(self, "message_moderation_level")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the group, which has a maximum size of 75 characters.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryLanguage")
    def primary_language(self) -> pulumi.Output[Optional[str]]:
        """
        The primary language for group. For a group's primary language use the language tags from the Google Workspace languages
        found at Google Workspace Email Settings API Email Language Tags.
        """
        return pulumi.get(self, "primary_language")

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies who receives the default reply. Possible values are: - `REPLY_TO_CUSTOM`: For replies to messages, use the
        group's custom email address. When set to `REPLY_TO_CUSTOM`, the `custom_reply_to` property holds the custom email
        address used when replying to a message, the customReplyTo property must have a value. Otherwise an error is returned. -
        `REPLY_TO_SENDER`: The reply sent to author of message. - `REPLY_TO_LIST`: This reply message is sent to the group. -
        `REPLY_TO_OWNER`: The reply is sent to the owner(s) of the group. This does not include the group's managers. -
        `REPLY_TO_IGNORE`: Group users individually decide where the message reply is sent. - `REPLY_TO_MANAGERS`: This reply
        message is sent to the group's managers, which includes all managers and the group owner.
        """
        return pulumi.get(self, "reply_to")

    @property
    @pulumi.getter(name="sendMessageDenyNotification")
    def send_message_deny_notification(self) -> pulumi.Output[Optional[bool]]:
        """
        Allows a member to be notified if the member's message to the group is denied by the group owner. If true, when a
        message is rejected, send the deny message notification to the message author. The
        `default_message_deny_notification_text` property is dependent on the `send_message_deny_notification` property being
        true. If false, when a message is rejected, no notification is sent.
        """
        return pulumi.get(self, "send_message_deny_notification")

    @property
    @pulumi.getter(name="spamModerationLevel")
    def spam_moderation_level(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies moderation levels for messages detected as spam. Possible values are: - `ALLOW`: Post the message to the
        group. - `MODERATE`: Send the message to the moderation queue. This is the default. - `SILENTLY_MODERATE`: Send the
        message to the moderation queue, but do not send notification to moderators. - `REJECT`: Immediately reject the message.
        """
        return pulumi.get(self, "spam_moderation_level")

    @property
    @pulumi.getter(name="whoCanAssistContent")
    def who_can_assist_content(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies who can moderate metadata. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `MANAGERS_ONLY` -
        `OWNERS_ONLY` - `NONE`
        """
        return pulumi.get(self, "who_can_assist_content")

    @property
    @pulumi.getter(name="whoCanContactOwner")
    def who_can_contact_owner(self) -> pulumi.Output[Optional[str]]:
        """
        Permission to contact owner of the group via web UI. Possible values are: - `ALL_IN_DOMAIN_CAN_CONTACT` -
        `ALL_MANAGERS_CAN_CONTACT` - `ALL_MEMBERS_CAN_CONTACT` - `ANYONE_CAN_CONTACT` - `ALL_OWNERS_CAN_CONTACT`
        """
        return pulumi.get(self, "who_can_contact_owner")

    @property
    @pulumi.getter(name="whoCanDiscoverGroup")
    def who_can_discover_group(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies the set of users for whom this group is discoverable. Possible values are: - `ANYONE_CAN_DISCOVER` -
        `ALL_IN_DOMAIN_CAN_DISCOVER` - `ALL_MEMBERS_CAN_DISCOVER`
        """
        return pulumi.get(self, "who_can_discover_group")

    @property
    @pulumi.getter(name="whoCanJoin")
    def who_can_join(self) -> pulumi.Output[Optional[str]]:
        """
        Permission to join group. Possible values are: - `ANYONE_CAN_JOIN`: Any Internet user, both inside and outside your
        domain, can join the group. - `ALL_IN_DOMAIN_CAN_JOIN`: Anyone in the account domain can join. This includes accounts
        with multiple domains. - `INVITED_CAN_JOIN`: Candidates for membership can be invited to join. - `CAN_REQUEST_TO_JOIN`:
        Non members can request an invitation to join.
        """
        return pulumi.get(self, "who_can_join")

    @property
    @pulumi.getter(name="whoCanLeaveGroup")
    def who_can_leave_group(self) -> pulumi.Output[Optional[str]]:
        """
        Permission to leave the group. Possible values are: - `ALL_MANAGERS_CAN_LEAVE` - `ALL_MEMBERS_CAN_LEAVE` -
        `NONE_CAN_LEAVE`
        """
        return pulumi.get(self, "who_can_leave_group")

    @property
    @pulumi.getter(name="whoCanModerateContent")
    def who_can_moderate_content(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies who can moderate content. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` -
        `NONE`
        """
        return pulumi.get(self, "who_can_moderate_content")

    @property
    @pulumi.getter(name="whoCanModerateMembers")
    def who_can_moderate_members(self) -> pulumi.Output[Optional[str]]:
        """
        Specifies who can manage members. Possible values are: - `ALL_MEMBERS` - `OWNERS_AND_MANAGERS` - `OWNERS_ONLY` - `NONE`
        """
        return pulumi.get(self, "who_can_moderate_members")

    @property
    @pulumi.getter(name="whoCanPostMessage")
    def who_can_post_message(self) -> pulumi.Output[str]:
        """
        Permissions to post messages. Possible values are: - `NONE_CAN_POST`: The group is disabled and archived. No one can
        post a message to this group. * When archiveOnly is false, updating whoCanPostMessage to NONE_CAN_POST, results in an
        error. * If archiveOnly is reverted from true to false, whoCanPostMessages is set to ALL_MANAGERS_CAN_POST. -
        `ALL_MANAGERS_CAN_POST`: Managers, including group owners, can post messages. - `ALL_MEMBERS_CAN_POST`: Any group member
        can post a message. - `ALL_OWNERS_CAN_POST`: Only group owners can post a message. - `ALL_IN_DOMAIN_CAN_POST`: Anyone in
        the account can post a message. - `ANYONE_CAN_POST`: Any Internet user who outside your account can access your Google
        Groups service and post a message. *Note: When `who_can_post_message` is set to `ANYONE_CAN_POST`, we recommend
        the`message_moderation_level` be set to `MODERATE_NON_MEMBERS` to protect the group from possible spam. Users not
        belonging to the organization are not allowed to become members of this group.
        """
        return pulumi.get(self, "who_can_post_message")

    @property
    @pulumi.getter(name="whoCanViewGroup")
    def who_can_view_group(self) -> pulumi.Output[Optional[str]]:
        """
        Permissions to view group messages. Possible values are: - `ANYONE_CAN_VIEW`: Any Internet user can view the group's
        messages. - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in your account can view this group's messages. - `ALL_MEMBERS_CAN_VIEW`:
        All group members can view the group's messages. - `ALL_MANAGERS_CAN_VIEW`: Any group manager can view this group's
        messages. - `ALL_OWNERS_CAN_VIEW`: The group owners can view this group's messages.
        """
        return pulumi.get(self, "who_can_view_group")

    @property
    @pulumi.getter(name="whoCanViewMembership")
    def who_can_view_membership(self) -> pulumi.Output[Optional[str]]:
        """
        Permissions to view membership. Possible values are: - `ALL_IN_DOMAIN_CAN_VIEW`: Anyone in the account can view the
        group members list. If a group already has external members, those members can still send email to this group. -
        `ALL_MEMBERS_CAN_VIEW`: The group members can view the group members list. - `ALL_MANAGERS_CAN_VIEW`: The group managers
        can view group members list. - `ALL_OWNERS_CAN_VIEW`: The group owners can view group members list.
        """
        return pulumi.get(self, "who_can_view_membership")

