# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetGroupSettingsResult',
    'AwaitableGetGroupSettingsResult',
    'get_group_settings',
    'get_group_settings_output',
]

@pulumi.output_type
class GetGroupSettingsResult:
    """
    A collection of values returned by getGroupSettings.
    """
    def __init__(__self__, allow_external_members=None, allow_web_posting=None, archive_only=None, custom_footer_text=None, custom_reply_to=None, custom_roles_enabled_for_settings_to_be_merged=None, default_message_deny_notification_text=None, description=None, email=None, enable_collaborative_inbox=None, id=None, include_custom_footer=None, include_in_global_address_list=None, is_archived=None, members_can_post_as_the_group=None, message_moderation_level=None, name=None, primary_language=None, reply_to=None, send_message_deny_notification=None, spam_moderation_level=None, who_can_assist_content=None, who_can_contact_owner=None, who_can_discover_group=None, who_can_join=None, who_can_leave_group=None, who_can_moderate_content=None, who_can_moderate_members=None, who_can_post_message=None, who_can_view_group=None, who_can_view_membership=None):
        if allow_external_members and not isinstance(allow_external_members, bool):
            raise TypeError("Expected argument 'allow_external_members' to be a bool")
        pulumi.set(__self__, "allow_external_members", allow_external_members)
        if allow_web_posting and not isinstance(allow_web_posting, bool):
            raise TypeError("Expected argument 'allow_web_posting' to be a bool")
        pulumi.set(__self__, "allow_web_posting", allow_web_posting)
        if archive_only and not isinstance(archive_only, bool):
            raise TypeError("Expected argument 'archive_only' to be a bool")
        pulumi.set(__self__, "archive_only", archive_only)
        if custom_footer_text and not isinstance(custom_footer_text, str):
            raise TypeError("Expected argument 'custom_footer_text' to be a str")
        pulumi.set(__self__, "custom_footer_text", custom_footer_text)
        if custom_reply_to and not isinstance(custom_reply_to, str):
            raise TypeError("Expected argument 'custom_reply_to' to be a str")
        pulumi.set(__self__, "custom_reply_to", custom_reply_to)
        if custom_roles_enabled_for_settings_to_be_merged and not isinstance(custom_roles_enabled_for_settings_to_be_merged, bool):
            raise TypeError("Expected argument 'custom_roles_enabled_for_settings_to_be_merged' to be a bool")
        pulumi.set(__self__, "custom_roles_enabled_for_settings_to_be_merged", custom_roles_enabled_for_settings_to_be_merged)
        if default_message_deny_notification_text and not isinstance(default_message_deny_notification_text, str):
            raise TypeError("Expected argument 'default_message_deny_notification_text' to be a str")
        pulumi.set(__self__, "default_message_deny_notification_text", default_message_deny_notification_text)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if email and not isinstance(email, str):
            raise TypeError("Expected argument 'email' to be a str")
        pulumi.set(__self__, "email", email)
        if enable_collaborative_inbox and not isinstance(enable_collaborative_inbox, bool):
            raise TypeError("Expected argument 'enable_collaborative_inbox' to be a bool")
        pulumi.set(__self__, "enable_collaborative_inbox", enable_collaborative_inbox)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if include_custom_footer and not isinstance(include_custom_footer, bool):
            raise TypeError("Expected argument 'include_custom_footer' to be a bool")
        pulumi.set(__self__, "include_custom_footer", include_custom_footer)
        if include_in_global_address_list and not isinstance(include_in_global_address_list, bool):
            raise TypeError("Expected argument 'include_in_global_address_list' to be a bool")
        pulumi.set(__self__, "include_in_global_address_list", include_in_global_address_list)
        if is_archived and not isinstance(is_archived, bool):
            raise TypeError("Expected argument 'is_archived' to be a bool")
        pulumi.set(__self__, "is_archived", is_archived)
        if members_can_post_as_the_group and not isinstance(members_can_post_as_the_group, bool):
            raise TypeError("Expected argument 'members_can_post_as_the_group' to be a bool")
        pulumi.set(__self__, "members_can_post_as_the_group", members_can_post_as_the_group)
        if message_moderation_level and not isinstance(message_moderation_level, str):
            raise TypeError("Expected argument 'message_moderation_level' to be a str")
        pulumi.set(__self__, "message_moderation_level", message_moderation_level)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if primary_language and not isinstance(primary_language, str):
            raise TypeError("Expected argument 'primary_language' to be a str")
        pulumi.set(__self__, "primary_language", primary_language)
        if reply_to and not isinstance(reply_to, str):
            raise TypeError("Expected argument 'reply_to' to be a str")
        pulumi.set(__self__, "reply_to", reply_to)
        if send_message_deny_notification and not isinstance(send_message_deny_notification, bool):
            raise TypeError("Expected argument 'send_message_deny_notification' to be a bool")
        pulumi.set(__self__, "send_message_deny_notification", send_message_deny_notification)
        if spam_moderation_level and not isinstance(spam_moderation_level, str):
            raise TypeError("Expected argument 'spam_moderation_level' to be a str")
        pulumi.set(__self__, "spam_moderation_level", spam_moderation_level)
        if who_can_assist_content and not isinstance(who_can_assist_content, str):
            raise TypeError("Expected argument 'who_can_assist_content' to be a str")
        pulumi.set(__self__, "who_can_assist_content", who_can_assist_content)
        if who_can_contact_owner and not isinstance(who_can_contact_owner, str):
            raise TypeError("Expected argument 'who_can_contact_owner' to be a str")
        pulumi.set(__self__, "who_can_contact_owner", who_can_contact_owner)
        if who_can_discover_group and not isinstance(who_can_discover_group, str):
            raise TypeError("Expected argument 'who_can_discover_group' to be a str")
        pulumi.set(__self__, "who_can_discover_group", who_can_discover_group)
        if who_can_join and not isinstance(who_can_join, str):
            raise TypeError("Expected argument 'who_can_join' to be a str")
        pulumi.set(__self__, "who_can_join", who_can_join)
        if who_can_leave_group and not isinstance(who_can_leave_group, str):
            raise TypeError("Expected argument 'who_can_leave_group' to be a str")
        pulumi.set(__self__, "who_can_leave_group", who_can_leave_group)
        if who_can_moderate_content and not isinstance(who_can_moderate_content, str):
            raise TypeError("Expected argument 'who_can_moderate_content' to be a str")
        pulumi.set(__self__, "who_can_moderate_content", who_can_moderate_content)
        if who_can_moderate_members and not isinstance(who_can_moderate_members, str):
            raise TypeError("Expected argument 'who_can_moderate_members' to be a str")
        pulumi.set(__self__, "who_can_moderate_members", who_can_moderate_members)
        if who_can_post_message and not isinstance(who_can_post_message, str):
            raise TypeError("Expected argument 'who_can_post_message' to be a str")
        pulumi.set(__self__, "who_can_post_message", who_can_post_message)
        if who_can_view_group and not isinstance(who_can_view_group, str):
            raise TypeError("Expected argument 'who_can_view_group' to be a str")
        pulumi.set(__self__, "who_can_view_group", who_can_view_group)
        if who_can_view_membership and not isinstance(who_can_view_membership, str):
            raise TypeError("Expected argument 'who_can_view_membership' to be a str")
        pulumi.set(__self__, "who_can_view_membership", who_can_view_membership)

    @property
    @pulumi.getter(name="allowExternalMembers")
    def allow_external_members(self) -> bool:
        return pulumi.get(self, "allow_external_members")

    @property
    @pulumi.getter(name="allowWebPosting")
    def allow_web_posting(self) -> bool:
        return pulumi.get(self, "allow_web_posting")

    @property
    @pulumi.getter(name="archiveOnly")
    def archive_only(self) -> bool:
        return pulumi.get(self, "archive_only")

    @property
    @pulumi.getter(name="customFooterText")
    def custom_footer_text(self) -> str:
        return pulumi.get(self, "custom_footer_text")

    @property
    @pulumi.getter(name="customReplyTo")
    def custom_reply_to(self) -> str:
        return pulumi.get(self, "custom_reply_to")

    @property
    @pulumi.getter(name="customRolesEnabledForSettingsToBeMerged")
    def custom_roles_enabled_for_settings_to_be_merged(self) -> bool:
        return pulumi.get(self, "custom_roles_enabled_for_settings_to_be_merged")

    @property
    @pulumi.getter(name="defaultMessageDenyNotificationText")
    def default_message_deny_notification_text(self) -> str:
        return pulumi.get(self, "default_message_deny_notification_text")

    @property
    @pulumi.getter
    def description(self) -> str:
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def email(self) -> str:
        return pulumi.get(self, "email")

    @property
    @pulumi.getter(name="enableCollaborativeInbox")
    def enable_collaborative_inbox(self) -> bool:
        return pulumi.get(self, "enable_collaborative_inbox")

    @property
    @pulumi.getter
    def id(self) -> str:
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="includeCustomFooter")
    def include_custom_footer(self) -> bool:
        return pulumi.get(self, "include_custom_footer")

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> bool:
        return pulumi.get(self, "include_in_global_address_list")

    @property
    @pulumi.getter(name="isArchived")
    def is_archived(self) -> bool:
        return pulumi.get(self, "is_archived")

    @property
    @pulumi.getter(name="membersCanPostAsTheGroup")
    def members_can_post_as_the_group(self) -> bool:
        return pulumi.get(self, "members_can_post_as_the_group")

    @property
    @pulumi.getter(name="messageModerationLevel")
    def message_moderation_level(self) -> str:
        return pulumi.get(self, "message_moderation_level")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="primaryLanguage")
    def primary_language(self) -> str:
        return pulumi.get(self, "primary_language")

    @property
    @pulumi.getter(name="replyTo")
    def reply_to(self) -> str:
        return pulumi.get(self, "reply_to")

    @property
    @pulumi.getter(name="sendMessageDenyNotification")
    def send_message_deny_notification(self) -> bool:
        return pulumi.get(self, "send_message_deny_notification")

    @property
    @pulumi.getter(name="spamModerationLevel")
    def spam_moderation_level(self) -> str:
        return pulumi.get(self, "spam_moderation_level")

    @property
    @pulumi.getter(name="whoCanAssistContent")
    def who_can_assist_content(self) -> str:
        return pulumi.get(self, "who_can_assist_content")

    @property
    @pulumi.getter(name="whoCanContactOwner")
    def who_can_contact_owner(self) -> str:
        return pulumi.get(self, "who_can_contact_owner")

    @property
    @pulumi.getter(name="whoCanDiscoverGroup")
    def who_can_discover_group(self) -> str:
        return pulumi.get(self, "who_can_discover_group")

    @property
    @pulumi.getter(name="whoCanJoin")
    def who_can_join(self) -> str:
        return pulumi.get(self, "who_can_join")

    @property
    @pulumi.getter(name="whoCanLeaveGroup")
    def who_can_leave_group(self) -> str:
        return pulumi.get(self, "who_can_leave_group")

    @property
    @pulumi.getter(name="whoCanModerateContent")
    def who_can_moderate_content(self) -> str:
        return pulumi.get(self, "who_can_moderate_content")

    @property
    @pulumi.getter(name="whoCanModerateMembers")
    def who_can_moderate_members(self) -> str:
        return pulumi.get(self, "who_can_moderate_members")

    @property
    @pulumi.getter(name="whoCanPostMessage")
    def who_can_post_message(self) -> str:
        return pulumi.get(self, "who_can_post_message")

    @property
    @pulumi.getter(name="whoCanViewGroup")
    def who_can_view_group(self) -> str:
        return pulumi.get(self, "who_can_view_group")

    @property
    @pulumi.getter(name="whoCanViewMembership")
    def who_can_view_membership(self) -> str:
        return pulumi.get(self, "who_can_view_membership")


class AwaitableGetGroupSettingsResult(GetGroupSettingsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetGroupSettingsResult(
            allow_external_members=self.allow_external_members,
            allow_web_posting=self.allow_web_posting,
            archive_only=self.archive_only,
            custom_footer_text=self.custom_footer_text,
            custom_reply_to=self.custom_reply_to,
            custom_roles_enabled_for_settings_to_be_merged=self.custom_roles_enabled_for_settings_to_be_merged,
            default_message_deny_notification_text=self.default_message_deny_notification_text,
            description=self.description,
            email=self.email,
            enable_collaborative_inbox=self.enable_collaborative_inbox,
            id=self.id,
            include_custom_footer=self.include_custom_footer,
            include_in_global_address_list=self.include_in_global_address_list,
            is_archived=self.is_archived,
            members_can_post_as_the_group=self.members_can_post_as_the_group,
            message_moderation_level=self.message_moderation_level,
            name=self.name,
            primary_language=self.primary_language,
            reply_to=self.reply_to,
            send_message_deny_notification=self.send_message_deny_notification,
            spam_moderation_level=self.spam_moderation_level,
            who_can_assist_content=self.who_can_assist_content,
            who_can_contact_owner=self.who_can_contact_owner,
            who_can_discover_group=self.who_can_discover_group,
            who_can_join=self.who_can_join,
            who_can_leave_group=self.who_can_leave_group,
            who_can_moderate_content=self.who_can_moderate_content,
            who_can_moderate_members=self.who_can_moderate_members,
            who_can_post_message=self.who_can_post_message,
            who_can_view_group=self.who_can_view_group,
            who_can_view_membership=self.who_can_view_membership)


def get_group_settings(email: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetGroupSettingsResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_googleworkspace as googleworkspace

    sales_settings = googleworkspace.get_group_settings(email="sales@example.com")
    pulumi.export("whoCanJoinSales", sales_settings.who_can_join)
    ```
    """
    __args__ = dict()
    __args__['email'] = email
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('googleworkspace:index/getGroupSettings:getGroupSettings', __args__, opts=opts, typ=GetGroupSettingsResult).value

    return AwaitableGetGroupSettingsResult(
        allow_external_members=__ret__.allow_external_members,
        allow_web_posting=__ret__.allow_web_posting,
        archive_only=__ret__.archive_only,
        custom_footer_text=__ret__.custom_footer_text,
        custom_reply_to=__ret__.custom_reply_to,
        custom_roles_enabled_for_settings_to_be_merged=__ret__.custom_roles_enabled_for_settings_to_be_merged,
        default_message_deny_notification_text=__ret__.default_message_deny_notification_text,
        description=__ret__.description,
        email=__ret__.email,
        enable_collaborative_inbox=__ret__.enable_collaborative_inbox,
        id=__ret__.id,
        include_custom_footer=__ret__.include_custom_footer,
        include_in_global_address_list=__ret__.include_in_global_address_list,
        is_archived=__ret__.is_archived,
        members_can_post_as_the_group=__ret__.members_can_post_as_the_group,
        message_moderation_level=__ret__.message_moderation_level,
        name=__ret__.name,
        primary_language=__ret__.primary_language,
        reply_to=__ret__.reply_to,
        send_message_deny_notification=__ret__.send_message_deny_notification,
        spam_moderation_level=__ret__.spam_moderation_level,
        who_can_assist_content=__ret__.who_can_assist_content,
        who_can_contact_owner=__ret__.who_can_contact_owner,
        who_can_discover_group=__ret__.who_can_discover_group,
        who_can_join=__ret__.who_can_join,
        who_can_leave_group=__ret__.who_can_leave_group,
        who_can_moderate_content=__ret__.who_can_moderate_content,
        who_can_moderate_members=__ret__.who_can_moderate_members,
        who_can_post_message=__ret__.who_can_post_message,
        who_can_view_group=__ret__.who_can_view_group,
        who_can_view_membership=__ret__.who_can_view_membership)


@_utilities.lift_output_func(get_group_settings)
def get_group_settings_output(email: Optional[pulumi.Input[str]] = None,
                              opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetGroupSettingsResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_googleworkspace as googleworkspace

    sales_settings = googleworkspace.get_group_settings(email="sales@example.com")
    pulumi.export("whoCanJoinSales", sales_settings.who_can_join)
    ```
    """
    ...
