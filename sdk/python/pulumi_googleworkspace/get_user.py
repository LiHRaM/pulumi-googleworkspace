# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetUserResult',
    'AwaitableGetUserResult',
    'get_user',
    'get_user_output',
]

@pulumi.output_type
class GetUserResult:
    """
    A collection of values returned by getUser.
    """
    def __init__(__self__, addresses=None, agreed_to_terms=None, aliases=None, archived=None, change_password_at_next_login=None, creation_time=None, custom_schemas=None, customer_id=None, deletion_time=None, emails=None, etag=None, external_ids=None, hash_function=None, id=None, ims=None, include_in_global_address_list=None, ip_allowlist=None, is_admin=None, is_delegated_admin=None, is_enforced_in2_step_verification=None, is_enrolled_in2_step_verification=None, is_mailbox_setup=None, keywords=None, languages=None, last_login_time=None, locations=None, names=None, non_editable_aliases=None, org_unit_path=None, organizations=None, password=None, phones=None, posix_accounts=None, primary_email=None, recovery_email=None, recovery_phone=None, relations=None, ssh_public_keys=None, suspended=None, suspension_reason=None, thumbnail_photo_etag=None, thumbnail_photo_url=None, websites=None):
        if addresses and not isinstance(addresses, list):
            raise TypeError("Expected argument 'addresses' to be a list")
        pulumi.set(__self__, "addresses", addresses)
        if agreed_to_terms and not isinstance(agreed_to_terms, bool):
            raise TypeError("Expected argument 'agreed_to_terms' to be a bool")
        pulumi.set(__self__, "agreed_to_terms", agreed_to_terms)
        if aliases and not isinstance(aliases, list):
            raise TypeError("Expected argument 'aliases' to be a list")
        pulumi.set(__self__, "aliases", aliases)
        if archived and not isinstance(archived, bool):
            raise TypeError("Expected argument 'archived' to be a bool")
        pulumi.set(__self__, "archived", archived)
        if change_password_at_next_login and not isinstance(change_password_at_next_login, bool):
            raise TypeError("Expected argument 'change_password_at_next_login' to be a bool")
        pulumi.set(__self__, "change_password_at_next_login", change_password_at_next_login)
        if creation_time and not isinstance(creation_time, str):
            raise TypeError("Expected argument 'creation_time' to be a str")
        pulumi.set(__self__, "creation_time", creation_time)
        if custom_schemas and not isinstance(custom_schemas, list):
            raise TypeError("Expected argument 'custom_schemas' to be a list")
        pulumi.set(__self__, "custom_schemas", custom_schemas)
        if customer_id and not isinstance(customer_id, str):
            raise TypeError("Expected argument 'customer_id' to be a str")
        pulumi.set(__self__, "customer_id", customer_id)
        if deletion_time and not isinstance(deletion_time, str):
            raise TypeError("Expected argument 'deletion_time' to be a str")
        pulumi.set(__self__, "deletion_time", deletion_time)
        if emails and not isinstance(emails, list):
            raise TypeError("Expected argument 'emails' to be a list")
        pulumi.set(__self__, "emails", emails)
        if etag and not isinstance(etag, str):
            raise TypeError("Expected argument 'etag' to be a str")
        pulumi.set(__self__, "etag", etag)
        if external_ids and not isinstance(external_ids, list):
            raise TypeError("Expected argument 'external_ids' to be a list")
        pulumi.set(__self__, "external_ids", external_ids)
        if hash_function and not isinstance(hash_function, str):
            raise TypeError("Expected argument 'hash_function' to be a str")
        pulumi.set(__self__, "hash_function", hash_function)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if ims and not isinstance(ims, list):
            raise TypeError("Expected argument 'ims' to be a list")
        pulumi.set(__self__, "ims", ims)
        if include_in_global_address_list and not isinstance(include_in_global_address_list, bool):
            raise TypeError("Expected argument 'include_in_global_address_list' to be a bool")
        pulumi.set(__self__, "include_in_global_address_list", include_in_global_address_list)
        if ip_allowlist and not isinstance(ip_allowlist, bool):
            raise TypeError("Expected argument 'ip_allowlist' to be a bool")
        pulumi.set(__self__, "ip_allowlist", ip_allowlist)
        if is_admin and not isinstance(is_admin, bool):
            raise TypeError("Expected argument 'is_admin' to be a bool")
        pulumi.set(__self__, "is_admin", is_admin)
        if is_delegated_admin and not isinstance(is_delegated_admin, bool):
            raise TypeError("Expected argument 'is_delegated_admin' to be a bool")
        pulumi.set(__self__, "is_delegated_admin", is_delegated_admin)
        if is_enforced_in2_step_verification and not isinstance(is_enforced_in2_step_verification, bool):
            raise TypeError("Expected argument 'is_enforced_in2_step_verification' to be a bool")
        pulumi.set(__self__, "is_enforced_in2_step_verification", is_enforced_in2_step_verification)
        if is_enrolled_in2_step_verification and not isinstance(is_enrolled_in2_step_verification, bool):
            raise TypeError("Expected argument 'is_enrolled_in2_step_verification' to be a bool")
        pulumi.set(__self__, "is_enrolled_in2_step_verification", is_enrolled_in2_step_verification)
        if is_mailbox_setup and not isinstance(is_mailbox_setup, bool):
            raise TypeError("Expected argument 'is_mailbox_setup' to be a bool")
        pulumi.set(__self__, "is_mailbox_setup", is_mailbox_setup)
        if keywords and not isinstance(keywords, list):
            raise TypeError("Expected argument 'keywords' to be a list")
        pulumi.set(__self__, "keywords", keywords)
        if languages and not isinstance(languages, list):
            raise TypeError("Expected argument 'languages' to be a list")
        pulumi.set(__self__, "languages", languages)
        if last_login_time and not isinstance(last_login_time, str):
            raise TypeError("Expected argument 'last_login_time' to be a str")
        pulumi.set(__self__, "last_login_time", last_login_time)
        if locations and not isinstance(locations, list):
            raise TypeError("Expected argument 'locations' to be a list")
        pulumi.set(__self__, "locations", locations)
        if names and not isinstance(names, list):
            raise TypeError("Expected argument 'names' to be a list")
        pulumi.set(__self__, "names", names)
        if non_editable_aliases and not isinstance(non_editable_aliases, list):
            raise TypeError("Expected argument 'non_editable_aliases' to be a list")
        pulumi.set(__self__, "non_editable_aliases", non_editable_aliases)
        if org_unit_path and not isinstance(org_unit_path, str):
            raise TypeError("Expected argument 'org_unit_path' to be a str")
        pulumi.set(__self__, "org_unit_path", org_unit_path)
        if organizations and not isinstance(organizations, list):
            raise TypeError("Expected argument 'organizations' to be a list")
        pulumi.set(__self__, "organizations", organizations)
        if password and not isinstance(password, str):
            raise TypeError("Expected argument 'password' to be a str")
        pulumi.set(__self__, "password", password)
        if phones and not isinstance(phones, list):
            raise TypeError("Expected argument 'phones' to be a list")
        pulumi.set(__self__, "phones", phones)
        if posix_accounts and not isinstance(posix_accounts, list):
            raise TypeError("Expected argument 'posix_accounts' to be a list")
        pulumi.set(__self__, "posix_accounts", posix_accounts)
        if primary_email and not isinstance(primary_email, str):
            raise TypeError("Expected argument 'primary_email' to be a str")
        pulumi.set(__self__, "primary_email", primary_email)
        if recovery_email and not isinstance(recovery_email, str):
            raise TypeError("Expected argument 'recovery_email' to be a str")
        pulumi.set(__self__, "recovery_email", recovery_email)
        if recovery_phone and not isinstance(recovery_phone, str):
            raise TypeError("Expected argument 'recovery_phone' to be a str")
        pulumi.set(__self__, "recovery_phone", recovery_phone)
        if relations and not isinstance(relations, list):
            raise TypeError("Expected argument 'relations' to be a list")
        pulumi.set(__self__, "relations", relations)
        if ssh_public_keys and not isinstance(ssh_public_keys, list):
            raise TypeError("Expected argument 'ssh_public_keys' to be a list")
        pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        if suspended and not isinstance(suspended, bool):
            raise TypeError("Expected argument 'suspended' to be a bool")
        pulumi.set(__self__, "suspended", suspended)
        if suspension_reason and not isinstance(suspension_reason, str):
            raise TypeError("Expected argument 'suspension_reason' to be a str")
        pulumi.set(__self__, "suspension_reason", suspension_reason)
        if thumbnail_photo_etag and not isinstance(thumbnail_photo_etag, str):
            raise TypeError("Expected argument 'thumbnail_photo_etag' to be a str")
        pulumi.set(__self__, "thumbnail_photo_etag", thumbnail_photo_etag)
        if thumbnail_photo_url and not isinstance(thumbnail_photo_url, str):
            raise TypeError("Expected argument 'thumbnail_photo_url' to be a str")
        pulumi.set(__self__, "thumbnail_photo_url", thumbnail_photo_url)
        if websites and not isinstance(websites, list):
            raise TypeError("Expected argument 'websites' to be a list")
        pulumi.set(__self__, "websites", websites)

    @property
    @pulumi.getter
    def addresses(self) -> Sequence['outputs.GetUserAddressResult']:
        """
        A list of the user's addresses. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="agreedToTerms")
    def agreed_to_terms(self) -> bool:
        """
        This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
        """
        return pulumi.get(self, "agreed_to_terms")

    @property
    @pulumi.getter
    def aliases(self) -> Sequence[str]:
        """
        asps.list of the user's alias email addresses.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter
    def archived(self) -> bool:
        """
        Indicates if user is archived.
        """
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="changePasswordAtNextLogin")
    def change_password_at_next_login(self) -> bool:
        """
        Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs in via a third-party identity provider.
        """
        return pulumi.get(self, "change_password_at_next_login")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> str:
        """
        The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customSchemas")
    def custom_schemas(self) -> Sequence['outputs.GetUserCustomSchemaResult']:
        """
        Custom fields of the user.
        """
        return pulumi.get(self, "custom_schemas")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> str:
        """
        The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId. As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the account's primary domain in the domain parameter of a users.list request.
        """
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter(name="deletionTime")
    def deletion_time(self) -> str:
        """
        The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "deletion_time")

    @property
    @pulumi.getter
    def emails(self) -> Sequence['outputs.GetUserEmailResult']:
        """
        A list of the user's email addresses. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def etag(self) -> str:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="externalIds")
    def external_ids(self) -> Sequence['outputs.GetUserExternalIdResult']:
        """
        A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "external_ids")

    @property
    @pulumi.getter(name="hashFunction")
    def hash_function(self) -> str:
        """
        Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        """
        return pulumi.get(self, "hash_function")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The unique ID for the user.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def ims(self) -> Sequence['outputs.GetUserImResult']:
        """
        The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "ims")

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> bool:
        """
        Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature is enabled for the domain.
        """
        return pulumi.get(self, "include_in_global_address_list")

    @property
    @pulumi.getter(name="ipAllowlist")
    def ip_allowlist(self) -> bool:
        """
        If true, the user's IP address is added to the allow list.
        """
        return pulumi.get(self, "ip_allowlist")

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> bool:
        """
        Indicates a user with super admininistrator privileges.
        """
        return pulumi.get(self, "is_admin")

    @property
    @pulumi.getter(name="isDelegatedAdmin")
    def is_delegated_admin(self) -> bool:
        """
        Indicates if the user is a delegated administrator.
        """
        return pulumi.get(self, "is_delegated_admin")

    @property
    @pulumi.getter(name="isEnforcedIn2StepVerification")
    def is_enforced_in2_step_verification(self) -> bool:
        """
        Is 2-step verification enforced.
        """
        return pulumi.get(self, "is_enforced_in2_step_verification")

    @property
    @pulumi.getter(name="isEnrolledIn2StepVerification")
    def is_enrolled_in2_step_verification(self) -> bool:
        """
        Is enrolled in 2-step verification.
        """
        return pulumi.get(self, "is_enrolled_in2_step_verification")

    @property
    @pulumi.getter(name="isMailboxSetup")
    def is_mailbox_setup(self) -> bool:
        """
        Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a Gmail license.
        """
        return pulumi.get(self, "is_mailbox_setup")

    @property
    @pulumi.getter
    def keywords(self) -> Sequence['outputs.GetUserKeywordResult']:
        """
        A list of the user's keywords. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def languages(self) -> Sequence['outputs.GetUserLanguageResult']:
        """
        A list of the user's languages. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "languages")

    @property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> str:
        """
        The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "last_login_time")

    @property
    @pulumi.getter
    def locations(self) -> Sequence['outputs.GetUserLocationResult']:
        """
        A list of the user's locations. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def names(self) -> Sequence['outputs.GetUserNameResult']:
        """
        Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for this field is 1Kb.
        """
        return pulumi.get(self, "names")

    @property
    @pulumi.getter(name="nonEditableAliases")
    def non_editable_aliases(self) -> Sequence[str]:
        """
        asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or sub-domain.
        """
        return pulumi.get(self, "non_editable_aliases")

    @property
    @pulumi.getter(name="orgUnitPath")
    def org_unit_path(self) -> str:
        """
        The full path of the parent organization associated with the user. If the parent organization is the top-level, it is represented as a forward slash (/).
        """
        return pulumi.get(self, "org_unit_path")

    @property
    @pulumi.getter
    def organizations(self) -> Sequence['outputs.GetUserOrganizationResult']:
        """
        A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter
    def password(self) -> str:
        """
        Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8 characters is required. The maximum length is 100 characters. As the API does not return the value of password, this field is write-only, and the value stored in the state will be what is provided in the configuration. The field is required on create and will be empty on import.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def phones(self) -> Sequence['outputs.GetUserPhoneResult']:
        """
        A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "phones")

    @property
    @pulumi.getter(name="posixAccounts")
    def posix_accounts(self) -> Sequence['outputs.GetUserPosixAccountResult']:
        """
        A list of POSIX account information for the user.
        """
        return pulumi.get(self, "posix_accounts")

    @property
    @pulumi.getter(name="primaryEmail")
    def primary_email(self) -> str:
        """
        The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        """
        return pulumi.get(self, "primary_email")

    @property
    @pulumi.getter(name="recoveryEmail")
    def recovery_email(self) -> str:
        """
        Recovery email of the user.
        """
        return pulumi.get(self, "recovery_email")

    @property
    @pulumi.getter(name="recoveryPhone")
    def recovery_phone(self) -> str:
        """
        Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example: +16506661212.
        """
        return pulumi.get(self, "recovery_phone")

    @property
    @pulumi.getter
    def relations(self) -> Sequence['outputs.GetUserRelationResult']:
        """
        A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        """
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Sequence['outputs.GetUserSshPublicKeyResult']:
        """
        A list of SSH public keys. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter
    def suspended(self) -> bool:
        """
        Indicates if user is suspended.
        """
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter(name="suspensionReason")
    def suspension_reason(self) -> str:
        """
        Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The property is returned only if the suspended property is true.
        """
        return pulumi.get(self, "suspension_reason")

    @property
    @pulumi.getter(name="thumbnailPhotoEtag")
    def thumbnail_photo_etag(self) -> str:
        """
        ETag of the user's photo
        """
        return pulumi.get(self, "thumbnail_photo_etag")

    @property
    @pulumi.getter(name="thumbnailPhotoUrl")
    def thumbnail_photo_url(self) -> str:
        """
        Photo Url of the user.
        """
        return pulumi.get(self, "thumbnail_photo_url")

    @property
    @pulumi.getter
    def websites(self) -> Sequence['outputs.GetUserWebsiteResult']:
        """
        A list of the user's websites. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "websites")


class AwaitableGetUserResult(GetUserResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetUserResult(
            addresses=self.addresses,
            agreed_to_terms=self.agreed_to_terms,
            aliases=self.aliases,
            archived=self.archived,
            change_password_at_next_login=self.change_password_at_next_login,
            creation_time=self.creation_time,
            custom_schemas=self.custom_schemas,
            customer_id=self.customer_id,
            deletion_time=self.deletion_time,
            emails=self.emails,
            etag=self.etag,
            external_ids=self.external_ids,
            hash_function=self.hash_function,
            id=self.id,
            ims=self.ims,
            include_in_global_address_list=self.include_in_global_address_list,
            ip_allowlist=self.ip_allowlist,
            is_admin=self.is_admin,
            is_delegated_admin=self.is_delegated_admin,
            is_enforced_in2_step_verification=self.is_enforced_in2_step_verification,
            is_enrolled_in2_step_verification=self.is_enrolled_in2_step_verification,
            is_mailbox_setup=self.is_mailbox_setup,
            keywords=self.keywords,
            languages=self.languages,
            last_login_time=self.last_login_time,
            locations=self.locations,
            names=self.names,
            non_editable_aliases=self.non_editable_aliases,
            org_unit_path=self.org_unit_path,
            organizations=self.organizations,
            password=self.password,
            phones=self.phones,
            posix_accounts=self.posix_accounts,
            primary_email=self.primary_email,
            recovery_email=self.recovery_email,
            recovery_phone=self.recovery_phone,
            relations=self.relations,
            ssh_public_keys=self.ssh_public_keys,
            suspended=self.suspended,
            suspension_reason=self.suspension_reason,
            thumbnail_photo_etag=self.thumbnail_photo_etag,
            thumbnail_photo_url=self.thumbnail_photo_url,
            websites=self.websites)


def get_user(id: Optional[str] = None,
             primary_email: Optional[str] = None,
             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetUserResult:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_googleworkspace as googleworkspace

    dwight = googleworkspace.get_user(primary_email="dwight.schrute@example.com")
    pulumi.export("isUserAdmin", dwight.is_admin)
    ```


    :param str id: The unique ID for the user.
    :param str primary_email: The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['primaryEmail'] = primary_email
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('googleworkspace:index/getUser:getUser', __args__, opts=opts, typ=GetUserResult).value

    return AwaitableGetUserResult(
        addresses=__ret__.addresses,
        agreed_to_terms=__ret__.agreed_to_terms,
        aliases=__ret__.aliases,
        archived=__ret__.archived,
        change_password_at_next_login=__ret__.change_password_at_next_login,
        creation_time=__ret__.creation_time,
        custom_schemas=__ret__.custom_schemas,
        customer_id=__ret__.customer_id,
        deletion_time=__ret__.deletion_time,
        emails=__ret__.emails,
        etag=__ret__.etag,
        external_ids=__ret__.external_ids,
        hash_function=__ret__.hash_function,
        id=__ret__.id,
        ims=__ret__.ims,
        include_in_global_address_list=__ret__.include_in_global_address_list,
        ip_allowlist=__ret__.ip_allowlist,
        is_admin=__ret__.is_admin,
        is_delegated_admin=__ret__.is_delegated_admin,
        is_enforced_in2_step_verification=__ret__.is_enforced_in2_step_verification,
        is_enrolled_in2_step_verification=__ret__.is_enrolled_in2_step_verification,
        is_mailbox_setup=__ret__.is_mailbox_setup,
        keywords=__ret__.keywords,
        languages=__ret__.languages,
        last_login_time=__ret__.last_login_time,
        locations=__ret__.locations,
        names=__ret__.names,
        non_editable_aliases=__ret__.non_editable_aliases,
        org_unit_path=__ret__.org_unit_path,
        organizations=__ret__.organizations,
        password=__ret__.password,
        phones=__ret__.phones,
        posix_accounts=__ret__.posix_accounts,
        primary_email=__ret__.primary_email,
        recovery_email=__ret__.recovery_email,
        recovery_phone=__ret__.recovery_phone,
        relations=__ret__.relations,
        ssh_public_keys=__ret__.ssh_public_keys,
        suspended=__ret__.suspended,
        suspension_reason=__ret__.suspension_reason,
        thumbnail_photo_etag=__ret__.thumbnail_photo_etag,
        thumbnail_photo_url=__ret__.thumbnail_photo_url,
        websites=__ret__.websites)


@_utilities.lift_output_func(get_user)
def get_user_output(id: Optional[pulumi.Input[Optional[str]]] = None,
                    primary_email: Optional[pulumi.Input[Optional[str]]] = None,
                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetUserResult]:
    """
    ## Example Usage

    ```python
    import pulumi
    import pulumi_googleworkspace as googleworkspace

    dwight = googleworkspace.get_user(primary_email="dwight.schrute@example.com")
    pulumi.export("isUserAdmin", dwight.is_admin)
    ```


    :param str id: The unique ID for the user.
    :param str primary_email: The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
    """
    ...
