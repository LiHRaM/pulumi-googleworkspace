# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['ProviderArgs', 'Provider']

@pulumi.input_type
class ProviderArgs:
    def __init__(__self__, *,
                 access_token: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 impersonated_user_email: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_account: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Provider resource.
        :param pulumi.Input[str] access_token: A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the `Authorization: Bearer`
               token used to authenticate HTTP requests to Google Admin SDK APIs. This is an alternative to `credentials`, and ignores
               the `oauth_scopes` field. If both are specified, `access_token` will be used over the `credentials` field.
        :param pulumi.Input[str] credentials: Either the path to or the contents of a service account key file in JSON format you can manage key files using the Cloud
               Console). If not provided, the application default credentials will be used.
        :param pulumi.Input[str] customer_id: The customer id provided with your Google Workspace subscription. It is found in the admin console under Account
               Settings.
        :param pulumi.Input[str] impersonated_user_email: The impersonated user's email with access to the Admin APIs can access the Admin SDK Directory API.
               `impersonated_user_email` is required for all services except group and user management.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth_scopes: The list of the scopes required for your application (for a list of possible scopes, see [Authorize
               requests](https://developers.google.com/admin-sdk/directory/v1/guides/authorizing))
        :param pulumi.Input[str] service_account: The service account used to create the provided `access_token` if authenticating using the `access_token` method and
               needing to impersonate a user. This service account will require the GCP role `Service Account Token Creator` if needing
               to impersonate a user.
        """
        if access_token is not None:
            pulumi.set(__self__, "access_token", access_token)
        if credentials is not None:
            pulumi.set(__self__, "credentials", credentials)
        if customer_id is not None:
            pulumi.set(__self__, "customer_id", customer_id)
        if impersonated_user_email is not None:
            pulumi.set(__self__, "impersonated_user_email", impersonated_user_email)
        if oauth_scopes is not None:
            pulumi.set(__self__, "oauth_scopes", oauth_scopes)
        if service_account is not None:
            pulumi.set(__self__, "service_account", service_account)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> Optional[pulumi.Input[str]]:
        """
        A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the `Authorization: Bearer`
        token used to authenticate HTTP requests to Google Admin SDK APIs. This is an alternative to `credentials`, and ignores
        the `oauth_scopes` field. If both are specified, `access_token` will be used over the `credentials` field.
        """
        return pulumi.get(self, "access_token")

    @access_token.setter
    def access_token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "access_token", value)

    @property
    @pulumi.getter
    def credentials(self) -> Optional[pulumi.Input[str]]:
        """
        Either the path to or the contents of a service account key file in JSON format you can manage key files using the Cloud
        Console). If not provided, the application default credentials will be used.
        """
        return pulumi.get(self, "credentials")

    @credentials.setter
    def credentials(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credentials", value)

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The customer id provided with your Google Workspace subscription. It is found in the admin console under Account
        Settings.
        """
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter(name="impersonatedUserEmail")
    def impersonated_user_email(self) -> Optional[pulumi.Input[str]]:
        """
        The impersonated user's email with access to the Admin APIs can access the Admin SDK Directory API.
        `impersonated_user_email` is required for all services except group and user management.
        """
        return pulumi.get(self, "impersonated_user_email")

    @impersonated_user_email.setter
    def impersonated_user_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "impersonated_user_email", value)

    @property
    @pulumi.getter(name="oauthScopes")
    def oauth_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        The list of the scopes required for your application (for a list of possible scopes, see [Authorize
        requests](https://developers.google.com/admin-sdk/directory/v1/guides/authorizing))
        """
        return pulumi.get(self, "oauth_scopes")

    @oauth_scopes.setter
    def oauth_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "oauth_scopes", value)

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> Optional[pulumi.Input[str]]:
        """
        The service account used to create the provided `access_token` if authenticating using the `access_token` method and
        needing to impersonate a user. This service account will require the GCP role `Service Account Token Creator` if needing
        to impersonate a user.
        """
        return pulumi.get(self, "service_account")

    @service_account.setter
    def service_account(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "service_account", value)


class Provider(pulumi.ProviderResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 impersonated_user_email: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The provider type for the googleworkspace package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] access_token: A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the `Authorization: Bearer`
               token used to authenticate HTTP requests to Google Admin SDK APIs. This is an alternative to `credentials`, and ignores
               the `oauth_scopes` field. If both are specified, `access_token` will be used over the `credentials` field.
        :param pulumi.Input[str] credentials: Either the path to or the contents of a service account key file in JSON format you can manage key files using the Cloud
               Console). If not provided, the application default credentials will be used.
        :param pulumi.Input[str] customer_id: The customer id provided with your Google Workspace subscription. It is found in the admin console under Account
               Settings.
        :param pulumi.Input[str] impersonated_user_email: The impersonated user's email with access to the Admin APIs can access the Admin SDK Directory API.
               `impersonated_user_email` is required for all services except group and user management.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] oauth_scopes: The list of the scopes required for your application (for a list of possible scopes, see [Authorize
               requests](https://developers.google.com/admin-sdk/directory/v1/guides/authorizing))
        :param pulumi.Input[str] service_account: The service account used to create the provided `access_token` if authenticating using the `access_token` method and
               needing to impersonate a user. This service account will require the GCP role `Service Account Token Creator` if needing
               to impersonate a user.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProviderArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The provider type for the googleworkspace package. By default, resources use package-wide configuration
        settings, however an explicit `Provider` instance may be created and passed during resource
        construction to achieve fine-grained programmatic control over provider settings. See the
        [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.

        :param str resource_name: The name of the resource.
        :param ProviderArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProviderArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 access_token: Optional[pulumi.Input[str]] = None,
                 credentials: Optional[pulumi.Input[str]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 impersonated_user_email: Optional[pulumi.Input[str]] = None,
                 oauth_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 service_account: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProviderArgs.__new__(ProviderArgs)

            __props__.__dict__["access_token"] = access_token
            __props__.__dict__["credentials"] = credentials
            __props__.__dict__["customer_id"] = customer_id
            __props__.__dict__["impersonated_user_email"] = impersonated_user_email
            __props__.__dict__["oauth_scopes"] = pulumi.Output.from_input(oauth_scopes).apply(pulumi.runtime.to_json) if oauth_scopes is not None else None
            __props__.__dict__["service_account"] = service_account
        super(Provider, __self__).__init__(
            'googleworkspace',
            resource_name,
            __props__,
            opts)

    @property
    @pulumi.getter(name="accessToken")
    def access_token(self) -> pulumi.Output[Optional[str]]:
        """
        A temporary [OAuth 2.0 access token] obtained from the Google Authorization server, i.e. the `Authorization: Bearer`
        token used to authenticate HTTP requests to Google Admin SDK APIs. This is an alternative to `credentials`, and ignores
        the `oauth_scopes` field. If both are specified, `access_token` will be used over the `credentials` field.
        """
        return pulumi.get(self, "access_token")

    @property
    @pulumi.getter
    def credentials(self) -> pulumi.Output[Optional[str]]:
        """
        Either the path to or the contents of a service account key file in JSON format you can manage key files using the Cloud
        Console). If not provided, the application default credentials will be used.
        """
        return pulumi.get(self, "credentials")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> pulumi.Output[Optional[str]]:
        """
        The customer id provided with your Google Workspace subscription. It is found in the admin console under Account
        Settings.
        """
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter(name="impersonatedUserEmail")
    def impersonated_user_email(self) -> pulumi.Output[Optional[str]]:
        """
        The impersonated user's email with access to the Admin APIs can access the Admin SDK Directory API.
        `impersonated_user_email` is required for all services except group and user management.
        """
        return pulumi.get(self, "impersonated_user_email")

    @property
    @pulumi.getter(name="serviceAccount")
    def service_account(self) -> pulumi.Output[Optional[str]]:
        """
        The service account used to create the provided `access_token` if authenticating using the `access_token` method and
        needing to impersonate a user. This service account will require the GCP role `Service Account Token Creator` if needing
        to impersonate a user.
        """
        return pulumi.get(self, "service_account")

