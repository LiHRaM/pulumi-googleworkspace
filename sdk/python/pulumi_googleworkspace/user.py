# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['UserArgs', 'User']

@pulumi.input_type
class UserArgs:
    def __init__(__self__, *,
                 primary_email: pulumi.Input[str],
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input['UserAddressArgs']]]] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 archived: Optional[pulumi.Input[bool]] = None,
                 change_password_at_next_login: Optional[pulumi.Input[bool]] = None,
                 custom_schemas: Optional[pulumi.Input[Sequence[pulumi.Input['UserCustomSchemaArgs']]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input['UserEmailArgs']]]] = None,
                 external_ids: Optional[pulumi.Input[Sequence[pulumi.Input['UserExternalIdArgs']]]] = None,
                 hash_function: Optional[pulumi.Input[str]] = None,
                 ims: Optional[pulumi.Input[Sequence[pulumi.Input['UserImArgs']]]] = None,
                 include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
                 ip_allowlist: Optional[pulumi.Input[bool]] = None,
                 is_admin: Optional[pulumi.Input[bool]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input['UserKeywordArgs']]]] = None,
                 languages: Optional[pulumi.Input[Sequence[pulumi.Input['UserLanguageArgs']]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['UserLocationArgs']]]] = None,
                 name: Optional[pulumi.Input['UserNameArgs']] = None,
                 org_unit_path: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input['UserOrganizationArgs']]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 phones: Optional[pulumi.Input[Sequence[pulumi.Input['UserPhoneArgs']]]] = None,
                 posix_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['UserPosixAccountArgs']]]] = None,
                 recovery_email: Optional[pulumi.Input[str]] = None,
                 recovery_phone: Optional[pulumi.Input[str]] = None,
                 relations: Optional[pulumi.Input[Sequence[pulumi.Input['UserRelationArgs']]]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input['UserSshPublicKeyArgs']]]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 websites: Optional[pulumi.Input[Sequence[pulumi.Input['UserWebsiteArgs']]]] = None):
        """
        The set of arguments for constructing a User resource.
        :param pulumi.Input[str] primary_email: The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        :param pulumi.Input[Sequence[pulumi.Input['UserAddressArgs']]] addresses: A list of the user's addresses. The maximum allowed data size is 10Kb.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: asps.list of the user's alias email addresses.
        :param pulumi.Input[bool] archived: Indicates if user is archived.
        :param pulumi.Input[bool] change_password_at_next_login: Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
               in via a third-party identity provider.
        :param pulumi.Input[Sequence[pulumi.Input['UserCustomSchemaArgs']]] custom_schemas: Custom fields of the user.
        :param pulumi.Input[Sequence[pulumi.Input['UserEmailArgs']]] emails: A list of the user's email addresses. The maximum allowed data size is 10Kb.
        :param pulumi.Input[Sequence[pulumi.Input['UserExternalIdArgs']]] external_ids: A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        :param pulumi.Input[str] hash_function: Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
               hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        :param pulumi.Input[Sequence[pulumi.Input['UserImArgs']]] ims: The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
               properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        :param pulumi.Input[bool] include_in_global_address_list: Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
               is enabled for the domain.
        :param pulumi.Input[bool] ip_allowlist: If true, the user's IP address is added to the allow list.
        :param pulumi.Input[bool] is_admin: Indicates a user with super admininistrator privileges.
        :param pulumi.Input[Sequence[pulumi.Input['UserKeywordArgs']]] keywords: A list of the user's keywords. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input['UserLanguageArgs']]] languages: A list of the user's languages. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input['UserLocationArgs']]] locations: A list of the user's locations. The maximum allowed data size is 10Kb.
        :param pulumi.Input['UserNameArgs'] name: Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
               givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
               spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
               this field is 1Kb.
        :param pulumi.Input[str] org_unit_path: The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
               represented as a forward slash (/).
        :param pulumi.Input[Sequence[pulumi.Input['UserOrganizationArgs']]] organizations: A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        :param pulumi.Input[str] password: Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
               characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
               field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
               required on create and will be empty on import.
        :param pulumi.Input[Sequence[pulumi.Input['UserPhoneArgs']]] phones: A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input['UserPosixAccountArgs']]] posix_accounts: A list of POSIX account information for the user.
        :param pulumi.Input[str] recovery_email: Recovery email of the user.
        :param pulumi.Input[str] recovery_phone: Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
               +16506661212.
        :param pulumi.Input[Sequence[pulumi.Input['UserRelationArgs']]] relations: A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        :param pulumi.Input[Sequence[pulumi.Input['UserSshPublicKeyArgs']]] ssh_public_keys: A list of SSH public keys. The maximum allowed data size is 10Kb.
        :param pulumi.Input[bool] suspended: Indicates if user is suspended.
        :param pulumi.Input[Sequence[pulumi.Input['UserWebsiteArgs']]] websites: A list of the user's websites. The maximum allowed data size is 2Kb.
        """
        pulumi.set(__self__, "primary_email", primary_email)
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if archived is not None:
            pulumi.set(__self__, "archived", archived)
        if change_password_at_next_login is not None:
            pulumi.set(__self__, "change_password_at_next_login", change_password_at_next_login)
        if custom_schemas is not None:
            pulumi.set(__self__, "custom_schemas", custom_schemas)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if external_ids is not None:
            pulumi.set(__self__, "external_ids", external_ids)
        if hash_function is not None:
            pulumi.set(__self__, "hash_function", hash_function)
        if ims is not None:
            pulumi.set(__self__, "ims", ims)
        if include_in_global_address_list is not None:
            pulumi.set(__self__, "include_in_global_address_list", include_in_global_address_list)
        if ip_allowlist is not None:
            pulumi.set(__self__, "ip_allowlist", ip_allowlist)
        if is_admin is not None:
            pulumi.set(__self__, "is_admin", is_admin)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if languages is not None:
            pulumi.set(__self__, "languages", languages)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if org_unit_path is not None:
            pulumi.set(__self__, "org_unit_path", org_unit_path)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if phones is not None:
            pulumi.set(__self__, "phones", phones)
        if posix_accounts is not None:
            pulumi.set(__self__, "posix_accounts", posix_accounts)
        if recovery_email is not None:
            pulumi.set(__self__, "recovery_email", recovery_email)
        if recovery_phone is not None:
            pulumi.set(__self__, "recovery_phone", recovery_phone)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if ssh_public_keys is not None:
            pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)
        if websites is not None:
            pulumi.set(__self__, "websites", websites)

    @property
    @pulumi.getter(name="primaryEmail")
    def primary_email(self) -> pulumi.Input[str]:
        """
        The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        """
        return pulumi.get(self, "primary_email")

    @primary_email.setter
    def primary_email(self, value: pulumi.Input[str]):
        pulumi.set(self, "primary_email", value)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserAddressArgs']]]]:
        """
        A list of the user's addresses. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserAddressArgs']]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        asps.list of the user's alias email addresses.
        """
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter
    def archived(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if user is archived.
        """
        return pulumi.get(self, "archived")

    @archived.setter
    def archived(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archived", value)

    @property
    @pulumi.getter(name="changePasswordAtNextLogin")
    def change_password_at_next_login(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
        in via a third-party identity provider.
        """
        return pulumi.get(self, "change_password_at_next_login")

    @change_password_at_next_login.setter
    def change_password_at_next_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "change_password_at_next_login", value)

    @property
    @pulumi.getter(name="customSchemas")
    def custom_schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserCustomSchemaArgs']]]]:
        """
        Custom fields of the user.
        """
        return pulumi.get(self, "custom_schemas")

    @custom_schemas.setter
    def custom_schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserCustomSchemaArgs']]]]):
        pulumi.set(self, "custom_schemas", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserEmailArgs']]]]:
        """
        A list of the user's email addresses. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserEmailArgs']]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter(name="externalIds")
    def external_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserExternalIdArgs']]]]:
        """
        A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "external_ids")

    @external_ids.setter
    def external_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserExternalIdArgs']]]]):
        pulumi.set(self, "external_ids", value)

    @property
    @pulumi.getter(name="hashFunction")
    def hash_function(self) -> Optional[pulumi.Input[str]]:
        """
        Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
        hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        """
        return pulumi.get(self, "hash_function")

    @hash_function.setter
    def hash_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_function", value)

    @property
    @pulumi.getter
    def ims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserImArgs']]]]:
        """
        The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
        properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "ims")

    @ims.setter
    def ims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserImArgs']]]]):
        pulumi.set(self, "ims", value)

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
        is enabled for the domain.
        """
        return pulumi.get(self, "include_in_global_address_list")

    @include_in_global_address_list.setter
    def include_in_global_address_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_in_global_address_list", value)

    @property
    @pulumi.getter(name="ipAllowlist")
    def ip_allowlist(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the user's IP address is added to the allow list.
        """
        return pulumi.get(self, "ip_allowlist")

    @ip_allowlist.setter
    def ip_allowlist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_allowlist", value)

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates a user with super admininistrator privileges.
        """
        return pulumi.get(self, "is_admin")

    @is_admin.setter
    def is_admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_admin", value)

    @property
    @pulumi.getter
    def keywords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserKeywordArgs']]]]:
        """
        A list of the user's keywords. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "keywords")

    @keywords.setter
    def keywords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserKeywordArgs']]]]):
        pulumi.set(self, "keywords", value)

    @property
    @pulumi.getter
    def languages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserLanguageArgs']]]]:
        """
        A list of the user's languages. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "languages")

    @languages.setter
    def languages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserLanguageArgs']]]]):
        pulumi.set(self, "languages", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserLocationArgs']]]]:
        """
        A list of the user's locations. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserLocationArgs']]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input['UserNameArgs']]:
        """
        Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
        givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
        spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
        this field is 1Kb.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input['UserNameArgs']]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="orgUnitPath")
    def org_unit_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
        represented as a forward slash (/).
        """
        return pulumi.get(self, "org_unit_path")

    @org_unit_path.setter
    def org_unit_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_unit_path", value)

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserOrganizationArgs']]]]:
        """
        A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserOrganizationArgs']]]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
        characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
        field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
        required on create and will be empty on import.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def phones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserPhoneArgs']]]]:
        """
        A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "phones")

    @phones.setter
    def phones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserPhoneArgs']]]]):
        pulumi.set(self, "phones", value)

    @property
    @pulumi.getter(name="posixAccounts")
    def posix_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserPosixAccountArgs']]]]:
        """
        A list of POSIX account information for the user.
        """
        return pulumi.get(self, "posix_accounts")

    @posix_accounts.setter
    def posix_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserPosixAccountArgs']]]]):
        pulumi.set(self, "posix_accounts", value)

    @property
    @pulumi.getter(name="recoveryEmail")
    def recovery_email(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery email of the user.
        """
        return pulumi.get(self, "recovery_email")

    @recovery_email.setter
    def recovery_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_email", value)

    @property
    @pulumi.getter(name="recoveryPhone")
    def recovery_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
        +16506661212.
        """
        return pulumi.get(self, "recovery_phone")

    @recovery_phone.setter
    def recovery_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_phone", value)

    @property
    @pulumi.getter
    def relations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserRelationArgs']]]]:
        """
        A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        """
        return pulumi.get(self, "relations")

    @relations.setter
    def relations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserRelationArgs']]]]):
        pulumi.set(self, "relations", value)

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSshPublicKeyArgs']]]]:
        """
        A list of SSH public keys. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "ssh_public_keys")

    @ssh_public_keys.setter
    def ssh_public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSshPublicKeyArgs']]]]):
        pulumi.set(self, "ssh_public_keys", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if user is suspended.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter
    def websites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserWebsiteArgs']]]]:
        """
        A list of the user's websites. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "websites")

    @websites.setter
    def websites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserWebsiteArgs']]]]):
        pulumi.set(self, "websites", value)


@pulumi.input_type
class _UserState:
    def __init__(__self__, *,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input['UserAddressArgs']]]] = None,
                 agreed_to_terms: Optional[pulumi.Input[bool]] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 archived: Optional[pulumi.Input[bool]] = None,
                 change_password_at_next_login: Optional[pulumi.Input[bool]] = None,
                 creation_time: Optional[pulumi.Input[str]] = None,
                 custom_schemas: Optional[pulumi.Input[Sequence[pulumi.Input['UserCustomSchemaArgs']]]] = None,
                 customer_id: Optional[pulumi.Input[str]] = None,
                 deletion_time: Optional[pulumi.Input[str]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input['UserEmailArgs']]]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 external_ids: Optional[pulumi.Input[Sequence[pulumi.Input['UserExternalIdArgs']]]] = None,
                 hash_function: Optional[pulumi.Input[str]] = None,
                 ims: Optional[pulumi.Input[Sequence[pulumi.Input['UserImArgs']]]] = None,
                 include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
                 ip_allowlist: Optional[pulumi.Input[bool]] = None,
                 is_admin: Optional[pulumi.Input[bool]] = None,
                 is_delegated_admin: Optional[pulumi.Input[bool]] = None,
                 is_enforced_in2_step_verification: Optional[pulumi.Input[bool]] = None,
                 is_enrolled_in2_step_verification: Optional[pulumi.Input[bool]] = None,
                 is_mailbox_setup: Optional[pulumi.Input[bool]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input['UserKeywordArgs']]]] = None,
                 languages: Optional[pulumi.Input[Sequence[pulumi.Input['UserLanguageArgs']]]] = None,
                 last_login_time: Optional[pulumi.Input[str]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input['UserLocationArgs']]]] = None,
                 name: Optional[pulumi.Input['UserNameArgs']] = None,
                 non_editable_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 org_unit_path: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input['UserOrganizationArgs']]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 phones: Optional[pulumi.Input[Sequence[pulumi.Input['UserPhoneArgs']]]] = None,
                 posix_accounts: Optional[pulumi.Input[Sequence[pulumi.Input['UserPosixAccountArgs']]]] = None,
                 primary_email: Optional[pulumi.Input[str]] = None,
                 recovery_email: Optional[pulumi.Input[str]] = None,
                 recovery_phone: Optional[pulumi.Input[str]] = None,
                 relations: Optional[pulumi.Input[Sequence[pulumi.Input['UserRelationArgs']]]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input['UserSshPublicKeyArgs']]]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 suspension_reason: Optional[pulumi.Input[str]] = None,
                 thumbnail_photo_etag: Optional[pulumi.Input[str]] = None,
                 thumbnail_photo_url: Optional[pulumi.Input[str]] = None,
                 websites: Optional[pulumi.Input[Sequence[pulumi.Input['UserWebsiteArgs']]]] = None):
        """
        Input properties used for looking up and filtering User resources.
        :param pulumi.Input[Sequence[pulumi.Input['UserAddressArgs']]] addresses: A list of the user's addresses. The maximum allowed data size is 10Kb.
        :param pulumi.Input[bool] agreed_to_terms: This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: asps.list of the user's alias email addresses.
        :param pulumi.Input[bool] archived: Indicates if user is archived.
        :param pulumi.Input[bool] change_password_at_next_login: Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
               in via a third-party identity provider.
        :param pulumi.Input[str] creation_time: The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date
               plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        :param pulumi.Input[Sequence[pulumi.Input['UserCustomSchemaArgs']]] custom_schemas: Custom fields of the user.
        :param pulumi.Input[str] customer_id: The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId.
               As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the
               account's primary domain in the domain parameter of a users.list request.
        :param pulumi.Input[str] deletion_time: The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date
               plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
        :param pulumi.Input[Sequence[pulumi.Input['UserEmailArgs']]] emails: A list of the user's email addresses. The maximum allowed data size is 10Kb.
        :param pulumi.Input[str] etag: ETag of the resource.
        :param pulumi.Input[Sequence[pulumi.Input['UserExternalIdArgs']]] external_ids: A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        :param pulumi.Input[str] hash_function: Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
               hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        :param pulumi.Input[Sequence[pulumi.Input['UserImArgs']]] ims: The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
               properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        :param pulumi.Input[bool] include_in_global_address_list: Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
               is enabled for the domain.
        :param pulumi.Input[bool] ip_allowlist: If true, the user's IP address is added to the allow list.
        :param pulumi.Input[bool] is_admin: Indicates a user with super admininistrator privileges.
        :param pulumi.Input[bool] is_delegated_admin: Indicates if the user is a delegated administrator.
        :param pulumi.Input[bool] is_enforced_in2_step_verification: Is 2-step verification enforced.
        :param pulumi.Input[bool] is_enrolled_in2_step_verification: Is enrolled in 2-step verification.
        :param pulumi.Input[bool] is_mailbox_setup: Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a
               Gmail license.
        :param pulumi.Input[Sequence[pulumi.Input['UserKeywordArgs']]] keywords: A list of the user's keywords. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input['UserLanguageArgs']]] languages: A list of the user's languages. The maximum allowed data size is 1Kb.
        :param pulumi.Input[str] last_login_time: The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the
               complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example,
               2010-04-05T17:30:04+01:00.
        :param pulumi.Input[Sequence[pulumi.Input['UserLocationArgs']]] locations: A list of the user's locations. The maximum allowed data size is 10Kb.
        :param pulumi.Input['UserNameArgs'] name: Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
               givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
               spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
               this field is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_editable_aliases: asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or
               sub-domain.
        :param pulumi.Input[str] org_unit_path: The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
               represented as a forward slash (/).
        :param pulumi.Input[Sequence[pulumi.Input['UserOrganizationArgs']]] organizations: A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        :param pulumi.Input[str] password: Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
               characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
               field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
               required on create and will be empty on import.
        :param pulumi.Input[Sequence[pulumi.Input['UserPhoneArgs']]] phones: A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input['UserPosixAccountArgs']]] posix_accounts: A list of POSIX account information for the user.
        :param pulumi.Input[str] primary_email: The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        :param pulumi.Input[str] recovery_email: Recovery email of the user.
        :param pulumi.Input[str] recovery_phone: Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
               +16506661212.
        :param pulumi.Input[Sequence[pulumi.Input['UserRelationArgs']]] relations: A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        :param pulumi.Input[Sequence[pulumi.Input['UserSshPublicKeyArgs']]] ssh_public_keys: A list of SSH public keys. The maximum allowed data size is 10Kb.
        :param pulumi.Input[bool] suspended: Indicates if user is suspended.
        :param pulumi.Input[str] suspension_reason: Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The
               property is returned only if the suspended property is true.
        :param pulumi.Input[str] thumbnail_photo_etag: ETag of the user's photo
        :param pulumi.Input[str] thumbnail_photo_url: Photo Url of the user.
        :param pulumi.Input[Sequence[pulumi.Input['UserWebsiteArgs']]] websites: A list of the user's websites. The maximum allowed data size is 2Kb.
        """
        if addresses is not None:
            pulumi.set(__self__, "addresses", addresses)
        if agreed_to_terms is not None:
            pulumi.set(__self__, "agreed_to_terms", agreed_to_terms)
        if aliases is not None:
            pulumi.set(__self__, "aliases", aliases)
        if archived is not None:
            pulumi.set(__self__, "archived", archived)
        if change_password_at_next_login is not None:
            pulumi.set(__self__, "change_password_at_next_login", change_password_at_next_login)
        if creation_time is not None:
            pulumi.set(__self__, "creation_time", creation_time)
        if custom_schemas is not None:
            pulumi.set(__self__, "custom_schemas", custom_schemas)
        if customer_id is not None:
            pulumi.set(__self__, "customer_id", customer_id)
        if deletion_time is not None:
            pulumi.set(__self__, "deletion_time", deletion_time)
        if emails is not None:
            pulumi.set(__self__, "emails", emails)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if external_ids is not None:
            pulumi.set(__self__, "external_ids", external_ids)
        if hash_function is not None:
            pulumi.set(__self__, "hash_function", hash_function)
        if ims is not None:
            pulumi.set(__self__, "ims", ims)
        if include_in_global_address_list is not None:
            pulumi.set(__self__, "include_in_global_address_list", include_in_global_address_list)
        if ip_allowlist is not None:
            pulumi.set(__self__, "ip_allowlist", ip_allowlist)
        if is_admin is not None:
            pulumi.set(__self__, "is_admin", is_admin)
        if is_delegated_admin is not None:
            pulumi.set(__self__, "is_delegated_admin", is_delegated_admin)
        if is_enforced_in2_step_verification is not None:
            pulumi.set(__self__, "is_enforced_in2_step_verification", is_enforced_in2_step_verification)
        if is_enrolled_in2_step_verification is not None:
            pulumi.set(__self__, "is_enrolled_in2_step_verification", is_enrolled_in2_step_verification)
        if is_mailbox_setup is not None:
            pulumi.set(__self__, "is_mailbox_setup", is_mailbox_setup)
        if keywords is not None:
            pulumi.set(__self__, "keywords", keywords)
        if languages is not None:
            pulumi.set(__self__, "languages", languages)
        if last_login_time is not None:
            pulumi.set(__self__, "last_login_time", last_login_time)
        if locations is not None:
            pulumi.set(__self__, "locations", locations)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if non_editable_aliases is not None:
            pulumi.set(__self__, "non_editable_aliases", non_editable_aliases)
        if org_unit_path is not None:
            pulumi.set(__self__, "org_unit_path", org_unit_path)
        if organizations is not None:
            pulumi.set(__self__, "organizations", organizations)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if phones is not None:
            pulumi.set(__self__, "phones", phones)
        if posix_accounts is not None:
            pulumi.set(__self__, "posix_accounts", posix_accounts)
        if primary_email is not None:
            pulumi.set(__self__, "primary_email", primary_email)
        if recovery_email is not None:
            pulumi.set(__self__, "recovery_email", recovery_email)
        if recovery_phone is not None:
            pulumi.set(__self__, "recovery_phone", recovery_phone)
        if relations is not None:
            pulumi.set(__self__, "relations", relations)
        if ssh_public_keys is not None:
            pulumi.set(__self__, "ssh_public_keys", ssh_public_keys)
        if suspended is not None:
            pulumi.set(__self__, "suspended", suspended)
        if suspension_reason is not None:
            pulumi.set(__self__, "suspension_reason", suspension_reason)
        if thumbnail_photo_etag is not None:
            pulumi.set(__self__, "thumbnail_photo_etag", thumbnail_photo_etag)
        if thumbnail_photo_url is not None:
            pulumi.set(__self__, "thumbnail_photo_url", thumbnail_photo_url)
        if websites is not None:
            pulumi.set(__self__, "websites", websites)

    @property
    @pulumi.getter
    def addresses(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserAddressArgs']]]]:
        """
        A list of the user's addresses. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "addresses")

    @addresses.setter
    def addresses(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserAddressArgs']]]]):
        pulumi.set(self, "addresses", value)

    @property
    @pulumi.getter(name="agreedToTerms")
    def agreed_to_terms(self) -> Optional[pulumi.Input[bool]]:
        """
        This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
        """
        return pulumi.get(self, "agreed_to_terms")

    @agreed_to_terms.setter
    def agreed_to_terms(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "agreed_to_terms", value)

    @property
    @pulumi.getter
    def aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        asps.list of the user's alias email addresses.
        """
        return pulumi.get(self, "aliases")

    @aliases.setter
    def aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "aliases", value)

    @property
    @pulumi.getter
    def archived(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if user is archived.
        """
        return pulumi.get(self, "archived")

    @archived.setter
    def archived(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "archived", value)

    @property
    @pulumi.getter(name="changePasswordAtNextLogin")
    def change_password_at_next_login(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
        in via a third-party identity provider.
        """
        return pulumi.get(self, "change_password_at_next_login")

    @change_password_at_next_login.setter
    def change_password_at_next_login(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "change_password_at_next_login", value)

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date
        plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "creation_time")

    @creation_time.setter
    def creation_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "creation_time", value)

    @property
    @pulumi.getter(name="customSchemas")
    def custom_schemas(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserCustomSchemaArgs']]]]:
        """
        Custom fields of the user.
        """
        return pulumi.get(self, "custom_schemas")

    @custom_schemas.setter
    def custom_schemas(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserCustomSchemaArgs']]]]):
        pulumi.set(self, "custom_schemas", value)

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> Optional[pulumi.Input[str]]:
        """
        The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId.
        As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the
        account's primary domain in the domain parameter of a users.list request.
        """
        return pulumi.get(self, "customer_id")

    @customer_id.setter
    def customer_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "customer_id", value)

    @property
    @pulumi.getter(name="deletionTime")
    def deletion_time(self) -> Optional[pulumi.Input[str]]:
        """
        The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date
        plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "deletion_time")

    @deletion_time.setter
    def deletion_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "deletion_time", value)

    @property
    @pulumi.getter
    def emails(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserEmailArgs']]]]:
        """
        A list of the user's email addresses. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "emails")

    @emails.setter
    def emails(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserEmailArgs']]]]):
        pulumi.set(self, "emails", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="externalIds")
    def external_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserExternalIdArgs']]]]:
        """
        A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "external_ids")

    @external_ids.setter
    def external_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserExternalIdArgs']]]]):
        pulumi.set(self, "external_ids", value)

    @property
    @pulumi.getter(name="hashFunction")
    def hash_function(self) -> Optional[pulumi.Input[str]]:
        """
        Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
        hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        """
        return pulumi.get(self, "hash_function")

    @hash_function.setter
    def hash_function(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "hash_function", value)

    @property
    @pulumi.getter
    def ims(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserImArgs']]]]:
        """
        The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
        properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "ims")

    @ims.setter
    def ims(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserImArgs']]]]):
        pulumi.set(self, "ims", value)

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
        is enabled for the domain.
        """
        return pulumi.get(self, "include_in_global_address_list")

    @include_in_global_address_list.setter
    def include_in_global_address_list(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "include_in_global_address_list", value)

    @property
    @pulumi.getter(name="ipAllowlist")
    def ip_allowlist(self) -> Optional[pulumi.Input[bool]]:
        """
        If true, the user's IP address is added to the allow list.
        """
        return pulumi.get(self, "ip_allowlist")

    @ip_allowlist.setter
    def ip_allowlist(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "ip_allowlist", value)

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates a user with super admininistrator privileges.
        """
        return pulumi.get(self, "is_admin")

    @is_admin.setter
    def is_admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_admin", value)

    @property
    @pulumi.getter(name="isDelegatedAdmin")
    def is_delegated_admin(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the user is a delegated administrator.
        """
        return pulumi.get(self, "is_delegated_admin")

    @is_delegated_admin.setter
    def is_delegated_admin(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_delegated_admin", value)

    @property
    @pulumi.getter(name="isEnforcedIn2StepVerification")
    def is_enforced_in2_step_verification(self) -> Optional[pulumi.Input[bool]]:
        """
        Is 2-step verification enforced.
        """
        return pulumi.get(self, "is_enforced_in2_step_verification")

    @is_enforced_in2_step_verification.setter
    def is_enforced_in2_step_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enforced_in2_step_verification", value)

    @property
    @pulumi.getter(name="isEnrolledIn2StepVerification")
    def is_enrolled_in2_step_verification(self) -> Optional[pulumi.Input[bool]]:
        """
        Is enrolled in 2-step verification.
        """
        return pulumi.get(self, "is_enrolled_in2_step_verification")

    @is_enrolled_in2_step_verification.setter
    def is_enrolled_in2_step_verification(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_enrolled_in2_step_verification", value)

    @property
    @pulumi.getter(name="isMailboxSetup")
    def is_mailbox_setup(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a
        Gmail license.
        """
        return pulumi.get(self, "is_mailbox_setup")

    @is_mailbox_setup.setter
    def is_mailbox_setup(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_mailbox_setup", value)

    @property
    @pulumi.getter
    def keywords(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserKeywordArgs']]]]:
        """
        A list of the user's keywords. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "keywords")

    @keywords.setter
    def keywords(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserKeywordArgs']]]]):
        pulumi.set(self, "keywords", value)

    @property
    @pulumi.getter
    def languages(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserLanguageArgs']]]]:
        """
        A list of the user's languages. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "languages")

    @languages.setter
    def languages(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserLanguageArgs']]]]):
        pulumi.set(self, "languages", value)

    @property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> Optional[pulumi.Input[str]]:
        """
        The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the
        complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example,
        2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "last_login_time")

    @last_login_time.setter
    def last_login_time(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "last_login_time", value)

    @property
    @pulumi.getter
    def locations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserLocationArgs']]]]:
        """
        A list of the user's locations. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "locations")

    @locations.setter
    def locations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserLocationArgs']]]]):
        pulumi.set(self, "locations", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input['UserNameArgs']]:
        """
        Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
        givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
        spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
        this field is 1Kb.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input['UserNameArgs']]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="nonEditableAliases")
    def non_editable_aliases(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or
        sub-domain.
        """
        return pulumi.get(self, "non_editable_aliases")

    @non_editable_aliases.setter
    def non_editable_aliases(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "non_editable_aliases", value)

    @property
    @pulumi.getter(name="orgUnitPath")
    def org_unit_path(self) -> Optional[pulumi.Input[str]]:
        """
        The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
        represented as a forward slash (/).
        """
        return pulumi.get(self, "org_unit_path")

    @org_unit_path.setter
    def org_unit_path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_unit_path", value)

    @property
    @pulumi.getter
    def organizations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserOrganizationArgs']]]]:
        """
        A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "organizations")

    @organizations.setter
    def organizations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserOrganizationArgs']]]]):
        pulumi.set(self, "organizations", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
        characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
        field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
        required on create and will be empty on import.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def phones(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserPhoneArgs']]]]:
        """
        A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "phones")

    @phones.setter
    def phones(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserPhoneArgs']]]]):
        pulumi.set(self, "phones", value)

    @property
    @pulumi.getter(name="posixAccounts")
    def posix_accounts(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserPosixAccountArgs']]]]:
        """
        A list of POSIX account information for the user.
        """
        return pulumi.get(self, "posix_accounts")

    @posix_accounts.setter
    def posix_accounts(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserPosixAccountArgs']]]]):
        pulumi.set(self, "posix_accounts", value)

    @property
    @pulumi.getter(name="primaryEmail")
    def primary_email(self) -> Optional[pulumi.Input[str]]:
        """
        The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        """
        return pulumi.get(self, "primary_email")

    @primary_email.setter
    def primary_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "primary_email", value)

    @property
    @pulumi.getter(name="recoveryEmail")
    def recovery_email(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery email of the user.
        """
        return pulumi.get(self, "recovery_email")

    @recovery_email.setter
    def recovery_email(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_email", value)

    @property
    @pulumi.getter(name="recoveryPhone")
    def recovery_phone(self) -> Optional[pulumi.Input[str]]:
        """
        Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
        +16506661212.
        """
        return pulumi.get(self, "recovery_phone")

    @recovery_phone.setter
    def recovery_phone(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "recovery_phone", value)

    @property
    @pulumi.getter
    def relations(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserRelationArgs']]]]:
        """
        A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        """
        return pulumi.get(self, "relations")

    @relations.setter
    def relations(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserRelationArgs']]]]):
        pulumi.set(self, "relations", value)

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserSshPublicKeyArgs']]]]:
        """
        A list of SSH public keys. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "ssh_public_keys")

    @ssh_public_keys.setter
    def ssh_public_keys(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserSshPublicKeyArgs']]]]):
        pulumi.set(self, "ssh_public_keys", value)

    @property
    @pulumi.getter
    def suspended(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates if user is suspended.
        """
        return pulumi.get(self, "suspended")

    @suspended.setter
    def suspended(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "suspended", value)

    @property
    @pulumi.getter(name="suspensionReason")
    def suspension_reason(self) -> Optional[pulumi.Input[str]]:
        """
        Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The
        property is returned only if the suspended property is true.
        """
        return pulumi.get(self, "suspension_reason")

    @suspension_reason.setter
    def suspension_reason(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "suspension_reason", value)

    @property
    @pulumi.getter(name="thumbnailPhotoEtag")
    def thumbnail_photo_etag(self) -> Optional[pulumi.Input[str]]:
        """
        ETag of the user's photo
        """
        return pulumi.get(self, "thumbnail_photo_etag")

    @thumbnail_photo_etag.setter
    def thumbnail_photo_etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbnail_photo_etag", value)

    @property
    @pulumi.getter(name="thumbnailPhotoUrl")
    def thumbnail_photo_url(self) -> Optional[pulumi.Input[str]]:
        """
        Photo Url of the user.
        """
        return pulumi.get(self, "thumbnail_photo_url")

    @thumbnail_photo_url.setter
    def thumbnail_photo_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "thumbnail_photo_url", value)

    @property
    @pulumi.getter
    def websites(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['UserWebsiteArgs']]]]:
        """
        A list of the user's websites. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "websites")

    @websites.setter
    def websites(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['UserWebsiteArgs']]]]):
        pulumi.set(self, "websites", value)


class User(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserAddressArgs']]]]] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 archived: Optional[pulumi.Input[bool]] = None,
                 change_password_at_next_login: Optional[pulumi.Input[bool]] = None,
                 custom_schemas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserCustomSchemaArgs']]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserEmailArgs']]]]] = None,
                 external_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserExternalIdArgs']]]]] = None,
                 hash_function: Optional[pulumi.Input[str]] = None,
                 ims: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserImArgs']]]]] = None,
                 include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
                 ip_allowlist: Optional[pulumi.Input[bool]] = None,
                 is_admin: Optional[pulumi.Input[bool]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserKeywordArgs']]]]] = None,
                 languages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLanguageArgs']]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLocationArgs']]]]] = None,
                 name: Optional[pulumi.Input[pulumi.InputType['UserNameArgs']]] = None,
                 org_unit_path: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserOrganizationArgs']]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 phones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPhoneArgs']]]]] = None,
                 posix_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPosixAccountArgs']]]]] = None,
                 primary_email: Optional[pulumi.Input[str]] = None,
                 recovery_email: Optional[pulumi.Input[str]] = None,
                 recovery_phone: Optional[pulumi.Input[str]] = None,
                 relations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRelationArgs']]]]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserSshPublicKeyArgs']]]]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 websites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserWebsiteArgs']]]]] = None,
                 __props__=None):
        """
        User resource manages Google Workspace Users. User resides under the `https://www.googleapis.com/auth/admin.directory.user` client scope.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_googleworkspace as googleworkspace

        birthday = googleworkspace.Schema("birthday",
            schema_name="birthday",
            fields=[
                googleworkspace.SchemaFieldArgs(
                    field_name="birthday",
                    field_type="DATE",
                ),
                googleworkspace.SchemaFieldArgs(
                    field_name="favorite-numbers",
                    field_type="INT64",
                    multi_valued=True,
                    numeric_indexing_spec=googleworkspace.SchemaFieldNumericIndexingSpecArgs(
                        min_value=1,
                        max_value=100,
                    ),
                ),
            ])
        dwight = googleworkspace.User("dwight",
            primary_email="dwight.schrute@example.com",
            password="34819d7beeabb9260a5c854bc85b3e44",
            hash_function="MD5",
            name=googleworkspace.UserNameArgs(
                family_name="Schrute",
                given_name="Dwight",
            ),
            aliases=["assistant_to_regional_manager@example.com"],
            emails=[googleworkspace.UserEmailArgs(
                address="dwight.schrute.dunder.mifflin@example.com",
                type="work",
            )],
            relations=[googleworkspace.UserRelationArgs(
                type="assistant",
                value="Michael Scott",
            )],
            addresses=[googleworkspace.UserAddressArgs(
                country="USA",
                country_code="US",
                locality="Scranton",
                po_box="123",
                postal_code="18508",
                region="PA",
                street_address="123 Dunder Mifflin Pkwy",
                type="work",
            )],
            organizations=[googleworkspace.UserOrganizationArgs(
                department="sales",
                location="Scranton",
                name="Dunder Mifflin",
                primary=True,
                symbol="DUMI",
                title="member",
                type="work",
            )],
            phones=[
                googleworkspace.UserPhoneArgs(
                    type="home",
                    value="555-123-7890",
                ),
                googleworkspace.UserPhoneArgs(
                    type="work",
                    primary=True,
                    value="555-123-0987",
                ),
            ],
            keywords=[googleworkspace.UserKeywordArgs(
                type="occupation",
                value="salesperson",
            )],
            custom_schemas=[googleworkspace.UserCustomSchemaArgs(
                schema_name=birthday.schema_name,
                schema_values={
                    "birthday": json.dumps("1970-01-20"),
                    "favorite-numbers": json.dumps([
                        1,
                        2,
                        3,
                    ]),
                },
            )],
            recovery_email="dwightkschrute@example.com")
        ```

        ## Import

        ```sh
         $ pulumi import googleworkspace:index/user:User dwight 123456789012345678901
        ```

        # or with email as id

        ```sh
         $ pulumi import googleworkspace:index/user:User dwight dwight.schrute@example.com
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserAddressArgs']]]] addresses: A list of the user's addresses. The maximum allowed data size is 10Kb.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: asps.list of the user's alias email addresses.
        :param pulumi.Input[bool] archived: Indicates if user is archived.
        :param pulumi.Input[bool] change_password_at_next_login: Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
               in via a third-party identity provider.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserCustomSchemaArgs']]]] custom_schemas: Custom fields of the user.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserEmailArgs']]]] emails: A list of the user's email addresses. The maximum allowed data size is 10Kb.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserExternalIdArgs']]]] external_ids: A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        :param pulumi.Input[str] hash_function: Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
               hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserImArgs']]]] ims: The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
               properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        :param pulumi.Input[bool] include_in_global_address_list: Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
               is enabled for the domain.
        :param pulumi.Input[bool] ip_allowlist: If true, the user's IP address is added to the allow list.
        :param pulumi.Input[bool] is_admin: Indicates a user with super admininistrator privileges.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserKeywordArgs']]]] keywords: A list of the user's keywords. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLanguageArgs']]]] languages: A list of the user's languages. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLocationArgs']]]] locations: A list of the user's locations. The maximum allowed data size is 10Kb.
        :param pulumi.Input[pulumi.InputType['UserNameArgs']] name: Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
               givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
               spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
               this field is 1Kb.
        :param pulumi.Input[str] org_unit_path: The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
               represented as a forward slash (/).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserOrganizationArgs']]]] organizations: A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        :param pulumi.Input[str] password: Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
               characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
               field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
               required on create and will be empty on import.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPhoneArgs']]]] phones: A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPosixAccountArgs']]]] posix_accounts: A list of POSIX account information for the user.
        :param pulumi.Input[str] primary_email: The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        :param pulumi.Input[str] recovery_email: Recovery email of the user.
        :param pulumi.Input[str] recovery_phone: Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
               +16506661212.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRelationArgs']]]] relations: A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserSshPublicKeyArgs']]]] ssh_public_keys: A list of SSH public keys. The maximum allowed data size is 10Kb.
        :param pulumi.Input[bool] suspended: Indicates if user is suspended.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserWebsiteArgs']]]] websites: A list of the user's websites. The maximum allowed data size is 2Kb.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: UserArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        User resource manages Google Workspace Users. User resides under the `https://www.googleapis.com/auth/admin.directory.user` client scope.

        ## Example Usage

        ```python
        import pulumi
        import json
        import pulumi_googleworkspace as googleworkspace

        birthday = googleworkspace.Schema("birthday",
            schema_name="birthday",
            fields=[
                googleworkspace.SchemaFieldArgs(
                    field_name="birthday",
                    field_type="DATE",
                ),
                googleworkspace.SchemaFieldArgs(
                    field_name="favorite-numbers",
                    field_type="INT64",
                    multi_valued=True,
                    numeric_indexing_spec=googleworkspace.SchemaFieldNumericIndexingSpecArgs(
                        min_value=1,
                        max_value=100,
                    ),
                ),
            ])
        dwight = googleworkspace.User("dwight",
            primary_email="dwight.schrute@example.com",
            password="34819d7beeabb9260a5c854bc85b3e44",
            hash_function="MD5",
            name=googleworkspace.UserNameArgs(
                family_name="Schrute",
                given_name="Dwight",
            ),
            aliases=["assistant_to_regional_manager@example.com"],
            emails=[googleworkspace.UserEmailArgs(
                address="dwight.schrute.dunder.mifflin@example.com",
                type="work",
            )],
            relations=[googleworkspace.UserRelationArgs(
                type="assistant",
                value="Michael Scott",
            )],
            addresses=[googleworkspace.UserAddressArgs(
                country="USA",
                country_code="US",
                locality="Scranton",
                po_box="123",
                postal_code="18508",
                region="PA",
                street_address="123 Dunder Mifflin Pkwy",
                type="work",
            )],
            organizations=[googleworkspace.UserOrganizationArgs(
                department="sales",
                location="Scranton",
                name="Dunder Mifflin",
                primary=True,
                symbol="DUMI",
                title="member",
                type="work",
            )],
            phones=[
                googleworkspace.UserPhoneArgs(
                    type="home",
                    value="555-123-7890",
                ),
                googleworkspace.UserPhoneArgs(
                    type="work",
                    primary=True,
                    value="555-123-0987",
                ),
            ],
            keywords=[googleworkspace.UserKeywordArgs(
                type="occupation",
                value="salesperson",
            )],
            custom_schemas=[googleworkspace.UserCustomSchemaArgs(
                schema_name=birthday.schema_name,
                schema_values={
                    "birthday": json.dumps("1970-01-20"),
                    "favorite-numbers": json.dumps([
                        1,
                        2,
                        3,
                    ]),
                },
            )],
            recovery_email="dwightkschrute@example.com")
        ```

        ## Import

        ```sh
         $ pulumi import googleworkspace:index/user:User dwight 123456789012345678901
        ```

        # or with email as id

        ```sh
         $ pulumi import googleworkspace:index/user:User dwight dwight.schrute@example.com
        ```

        :param str resource_name: The name of the resource.
        :param UserArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(UserArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserAddressArgs']]]]] = None,
                 aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 archived: Optional[pulumi.Input[bool]] = None,
                 change_password_at_next_login: Optional[pulumi.Input[bool]] = None,
                 custom_schemas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserCustomSchemaArgs']]]]] = None,
                 emails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserEmailArgs']]]]] = None,
                 external_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserExternalIdArgs']]]]] = None,
                 hash_function: Optional[pulumi.Input[str]] = None,
                 ims: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserImArgs']]]]] = None,
                 include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
                 ip_allowlist: Optional[pulumi.Input[bool]] = None,
                 is_admin: Optional[pulumi.Input[bool]] = None,
                 keywords: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserKeywordArgs']]]]] = None,
                 languages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLanguageArgs']]]]] = None,
                 locations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLocationArgs']]]]] = None,
                 name: Optional[pulumi.Input[pulumi.InputType['UserNameArgs']]] = None,
                 org_unit_path: Optional[pulumi.Input[str]] = None,
                 organizations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserOrganizationArgs']]]]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 phones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPhoneArgs']]]]] = None,
                 posix_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPosixAccountArgs']]]]] = None,
                 primary_email: Optional[pulumi.Input[str]] = None,
                 recovery_email: Optional[pulumi.Input[str]] = None,
                 recovery_phone: Optional[pulumi.Input[str]] = None,
                 relations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRelationArgs']]]]] = None,
                 ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserSshPublicKeyArgs']]]]] = None,
                 suspended: Optional[pulumi.Input[bool]] = None,
                 websites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserWebsiteArgs']]]]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = UserArgs.__new__(UserArgs)

            __props__.__dict__["addresses"] = addresses
            __props__.__dict__["aliases"] = aliases
            __props__.__dict__["archived"] = archived
            __props__.__dict__["change_password_at_next_login"] = change_password_at_next_login
            __props__.__dict__["custom_schemas"] = custom_schemas
            __props__.__dict__["emails"] = emails
            __props__.__dict__["external_ids"] = external_ids
            __props__.__dict__["hash_function"] = hash_function
            __props__.__dict__["ims"] = ims
            __props__.__dict__["include_in_global_address_list"] = include_in_global_address_list
            __props__.__dict__["ip_allowlist"] = ip_allowlist
            __props__.__dict__["is_admin"] = is_admin
            __props__.__dict__["keywords"] = keywords
            __props__.__dict__["languages"] = languages
            __props__.__dict__["locations"] = locations
            __props__.__dict__["name"] = name
            __props__.__dict__["org_unit_path"] = org_unit_path
            __props__.__dict__["organizations"] = organizations
            __props__.__dict__["password"] = password
            __props__.__dict__["phones"] = phones
            __props__.__dict__["posix_accounts"] = posix_accounts
            if primary_email is None and not opts.urn:
                raise TypeError("Missing required property 'primary_email'")
            __props__.__dict__["primary_email"] = primary_email
            __props__.__dict__["recovery_email"] = recovery_email
            __props__.__dict__["recovery_phone"] = recovery_phone
            __props__.__dict__["relations"] = relations
            __props__.__dict__["ssh_public_keys"] = ssh_public_keys
            __props__.__dict__["suspended"] = suspended
            __props__.__dict__["websites"] = websites
            __props__.__dict__["agreed_to_terms"] = None
            __props__.__dict__["creation_time"] = None
            __props__.__dict__["customer_id"] = None
            __props__.__dict__["deletion_time"] = None
            __props__.__dict__["etag"] = None
            __props__.__dict__["is_delegated_admin"] = None
            __props__.__dict__["is_enforced_in2_step_verification"] = None
            __props__.__dict__["is_enrolled_in2_step_verification"] = None
            __props__.__dict__["is_mailbox_setup"] = None
            __props__.__dict__["last_login_time"] = None
            __props__.__dict__["non_editable_aliases"] = None
            __props__.__dict__["suspension_reason"] = None
            __props__.__dict__["thumbnail_photo_etag"] = None
            __props__.__dict__["thumbnail_photo_url"] = None
        super(User, __self__).__init__(
            'googleworkspace:index/user:User',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            addresses: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserAddressArgs']]]]] = None,
            agreed_to_terms: Optional[pulumi.Input[bool]] = None,
            aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            archived: Optional[pulumi.Input[bool]] = None,
            change_password_at_next_login: Optional[pulumi.Input[bool]] = None,
            creation_time: Optional[pulumi.Input[str]] = None,
            custom_schemas: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserCustomSchemaArgs']]]]] = None,
            customer_id: Optional[pulumi.Input[str]] = None,
            deletion_time: Optional[pulumi.Input[str]] = None,
            emails: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserEmailArgs']]]]] = None,
            etag: Optional[pulumi.Input[str]] = None,
            external_ids: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserExternalIdArgs']]]]] = None,
            hash_function: Optional[pulumi.Input[str]] = None,
            ims: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserImArgs']]]]] = None,
            include_in_global_address_list: Optional[pulumi.Input[bool]] = None,
            ip_allowlist: Optional[pulumi.Input[bool]] = None,
            is_admin: Optional[pulumi.Input[bool]] = None,
            is_delegated_admin: Optional[pulumi.Input[bool]] = None,
            is_enforced_in2_step_verification: Optional[pulumi.Input[bool]] = None,
            is_enrolled_in2_step_verification: Optional[pulumi.Input[bool]] = None,
            is_mailbox_setup: Optional[pulumi.Input[bool]] = None,
            keywords: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserKeywordArgs']]]]] = None,
            languages: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLanguageArgs']]]]] = None,
            last_login_time: Optional[pulumi.Input[str]] = None,
            locations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLocationArgs']]]]] = None,
            name: Optional[pulumi.Input[pulumi.InputType['UserNameArgs']]] = None,
            non_editable_aliases: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            org_unit_path: Optional[pulumi.Input[str]] = None,
            organizations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserOrganizationArgs']]]]] = None,
            password: Optional[pulumi.Input[str]] = None,
            phones: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPhoneArgs']]]]] = None,
            posix_accounts: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPosixAccountArgs']]]]] = None,
            primary_email: Optional[pulumi.Input[str]] = None,
            recovery_email: Optional[pulumi.Input[str]] = None,
            recovery_phone: Optional[pulumi.Input[str]] = None,
            relations: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRelationArgs']]]]] = None,
            ssh_public_keys: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserSshPublicKeyArgs']]]]] = None,
            suspended: Optional[pulumi.Input[bool]] = None,
            suspension_reason: Optional[pulumi.Input[str]] = None,
            thumbnail_photo_etag: Optional[pulumi.Input[str]] = None,
            thumbnail_photo_url: Optional[pulumi.Input[str]] = None,
            websites: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserWebsiteArgs']]]]] = None) -> 'User':
        """
        Get an existing User resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserAddressArgs']]]] addresses: A list of the user's addresses. The maximum allowed data size is 10Kb.
        :param pulumi.Input[bool] agreed_to_terms: This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] aliases: asps.list of the user's alias email addresses.
        :param pulumi.Input[bool] archived: Indicates if user is archived.
        :param pulumi.Input[bool] change_password_at_next_login: Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
               in via a third-party identity provider.
        :param pulumi.Input[str] creation_time: The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date
               plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserCustomSchemaArgs']]]] custom_schemas: Custom fields of the user.
        :param pulumi.Input[str] customer_id: The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId.
               As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the
               account's primary domain in the domain parameter of a users.list request.
        :param pulumi.Input[str] deletion_time: The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date
               plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserEmailArgs']]]] emails: A list of the user's email addresses. The maximum allowed data size is 10Kb.
        :param pulumi.Input[str] etag: ETag of the resource.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserExternalIdArgs']]]] external_ids: A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        :param pulumi.Input[str] hash_function: Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
               hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserImArgs']]]] ims: The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
               properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        :param pulumi.Input[bool] include_in_global_address_list: Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
               is enabled for the domain.
        :param pulumi.Input[bool] ip_allowlist: If true, the user's IP address is added to the allow list.
        :param pulumi.Input[bool] is_admin: Indicates a user with super admininistrator privileges.
        :param pulumi.Input[bool] is_delegated_admin: Indicates if the user is a delegated administrator.
        :param pulumi.Input[bool] is_enforced_in2_step_verification: Is 2-step verification enforced.
        :param pulumi.Input[bool] is_enrolled_in2_step_verification: Is enrolled in 2-step verification.
        :param pulumi.Input[bool] is_mailbox_setup: Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a
               Gmail license.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserKeywordArgs']]]] keywords: A list of the user's keywords. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLanguageArgs']]]] languages: A list of the user's languages. The maximum allowed data size is 1Kb.
        :param pulumi.Input[str] last_login_time: The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the
               complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example,
               2010-04-05T17:30:04+01:00.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserLocationArgs']]]] locations: A list of the user's locations. The maximum allowed data size is 10Kb.
        :param pulumi.Input[pulumi.InputType['UserNameArgs']] name: Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
               givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
               spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
               this field is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] non_editable_aliases: asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or
               sub-domain.
        :param pulumi.Input[str] org_unit_path: The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
               represented as a forward slash (/).
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserOrganizationArgs']]]] organizations: A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        :param pulumi.Input[str] password: Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
               characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
               field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
               required on create and will be empty on import.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPhoneArgs']]]] phones: A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserPosixAccountArgs']]]] posix_accounts: A list of POSIX account information for the user.
        :param pulumi.Input[str] primary_email: The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        :param pulumi.Input[str] recovery_email: Recovery email of the user.
        :param pulumi.Input[str] recovery_phone: Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
               +16506661212.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserRelationArgs']]]] relations: A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserSshPublicKeyArgs']]]] ssh_public_keys: A list of SSH public keys. The maximum allowed data size is 10Kb.
        :param pulumi.Input[bool] suspended: Indicates if user is suspended.
        :param pulumi.Input[str] suspension_reason: Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The
               property is returned only if the suspended property is true.
        :param pulumi.Input[str] thumbnail_photo_etag: ETag of the user's photo
        :param pulumi.Input[str] thumbnail_photo_url: Photo Url of the user.
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['UserWebsiteArgs']]]] websites: A list of the user's websites. The maximum allowed data size is 2Kb.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _UserState.__new__(_UserState)

        __props__.__dict__["addresses"] = addresses
        __props__.__dict__["agreed_to_terms"] = agreed_to_terms
        __props__.__dict__["aliases"] = aliases
        __props__.__dict__["archived"] = archived
        __props__.__dict__["change_password_at_next_login"] = change_password_at_next_login
        __props__.__dict__["creation_time"] = creation_time
        __props__.__dict__["custom_schemas"] = custom_schemas
        __props__.__dict__["customer_id"] = customer_id
        __props__.__dict__["deletion_time"] = deletion_time
        __props__.__dict__["emails"] = emails
        __props__.__dict__["etag"] = etag
        __props__.__dict__["external_ids"] = external_ids
        __props__.__dict__["hash_function"] = hash_function
        __props__.__dict__["ims"] = ims
        __props__.__dict__["include_in_global_address_list"] = include_in_global_address_list
        __props__.__dict__["ip_allowlist"] = ip_allowlist
        __props__.__dict__["is_admin"] = is_admin
        __props__.__dict__["is_delegated_admin"] = is_delegated_admin
        __props__.__dict__["is_enforced_in2_step_verification"] = is_enforced_in2_step_verification
        __props__.__dict__["is_enrolled_in2_step_verification"] = is_enrolled_in2_step_verification
        __props__.__dict__["is_mailbox_setup"] = is_mailbox_setup
        __props__.__dict__["keywords"] = keywords
        __props__.__dict__["languages"] = languages
        __props__.__dict__["last_login_time"] = last_login_time
        __props__.__dict__["locations"] = locations
        __props__.__dict__["name"] = name
        __props__.__dict__["non_editable_aliases"] = non_editable_aliases
        __props__.__dict__["org_unit_path"] = org_unit_path
        __props__.__dict__["organizations"] = organizations
        __props__.__dict__["password"] = password
        __props__.__dict__["phones"] = phones
        __props__.__dict__["posix_accounts"] = posix_accounts
        __props__.__dict__["primary_email"] = primary_email
        __props__.__dict__["recovery_email"] = recovery_email
        __props__.__dict__["recovery_phone"] = recovery_phone
        __props__.__dict__["relations"] = relations
        __props__.__dict__["ssh_public_keys"] = ssh_public_keys
        __props__.__dict__["suspended"] = suspended
        __props__.__dict__["suspension_reason"] = suspension_reason
        __props__.__dict__["thumbnail_photo_etag"] = thumbnail_photo_etag
        __props__.__dict__["thumbnail_photo_url"] = thumbnail_photo_url
        __props__.__dict__["websites"] = websites
        return User(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def addresses(self) -> pulumi.Output[Optional[Sequence['outputs.UserAddress']]]:
        """
        A list of the user's addresses. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "addresses")

    @property
    @pulumi.getter(name="agreedToTerms")
    def agreed_to_terms(self) -> pulumi.Output[bool]:
        """
        This property is true if the user has completed an initial login and accepted the Terms of Service agreement.
        """
        return pulumi.get(self, "agreed_to_terms")

    @property
    @pulumi.getter
    def aliases(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        asps.list of the user's alias email addresses.
        """
        return pulumi.get(self, "aliases")

    @property
    @pulumi.getter
    def archived(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if user is archived.
        """
        return pulumi.get(self, "archived")

    @property
    @pulumi.getter(name="changePasswordAtNextLogin")
    def change_password_at_next_login(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the user is forced to change their password at next login. This setting doesn't apply when the user signs
        in via a third-party identity provider.
        """
        return pulumi.get(self, "change_password_at_next_login")

    @property
    @pulumi.getter(name="creationTime")
    def creation_time(self) -> pulumi.Output[str]:
        """
        The time the user's account was created. The value is in ISO 8601 date and time format. The time is the complete date
        plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example, 2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "creation_time")

    @property
    @pulumi.getter(name="customSchemas")
    def custom_schemas(self) -> pulumi.Output[Optional[Sequence['outputs.UserCustomSchema']]]:
        """
        Custom fields of the user.
        """
        return pulumi.get(self, "custom_schemas")

    @property
    @pulumi.getter(name="customerId")
    def customer_id(self) -> pulumi.Output[str]:
        """
        The customer ID to retrieve all account users. You can use the alias my_customer to represent your account's customerId.
        As a reseller administrator, you can use the resold customer account's customerId. To get a customerId, use the
        account's primary domain in the domain parameter of a users.list request.
        """
        return pulumi.get(self, "customer_id")

    @property
    @pulumi.getter(name="deletionTime")
    def deletion_time(self) -> pulumi.Output[str]:
        """
        The time the user's account was deleted. The value is in ISO 8601 date and time format The time is the complete date
        plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example 2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "deletion_time")

    @property
    @pulumi.getter
    def emails(self) -> pulumi.Output[Sequence['outputs.UserEmail']]:
        """
        A list of the user's email addresses. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "emails")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="externalIds")
    def external_ids(self) -> pulumi.Output[Optional[Sequence['outputs.UserExternalId']]]:
        """
        A list of external IDs for the user, such as an employee or network ID. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "external_ids")

    @property
    @pulumi.getter(name="hashFunction")
    def hash_function(self) -> pulumi.Output[Optional[str]]:
        """
        Stores the hash format of the password property. We recommend sending the password property value as a base 16 bit
        hexadecimal-encoded hash value. Set the hashFunction values as either the SHA-1, MD5, or crypt hash format.
        """
        return pulumi.get(self, "hash_function")

    @property
    @pulumi.getter
    def ims(self) -> pulumi.Output[Optional[Sequence['outputs.UserIm']]]:
        """
        The user's Instant Messenger (IM) accounts. A user account can have multiple ims properties. But, only one of these ims
        properties can be the primary IM contact. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "ims")

    @property
    @pulumi.getter(name="includeInGlobalAddressList")
    def include_in_global_address_list(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if the user's profile is visible in the Google Workspace global address list when the contact sharing feature
        is enabled for the domain.
        """
        return pulumi.get(self, "include_in_global_address_list")

    @property
    @pulumi.getter(name="ipAllowlist")
    def ip_allowlist(self) -> pulumi.Output[Optional[bool]]:
        """
        If true, the user's IP address is added to the allow list.
        """
        return pulumi.get(self, "ip_allowlist")

    @property
    @pulumi.getter(name="isAdmin")
    def is_admin(self) -> pulumi.Output[bool]:
        """
        Indicates a user with super admininistrator privileges.
        """
        return pulumi.get(self, "is_admin")

    @property
    @pulumi.getter(name="isDelegatedAdmin")
    def is_delegated_admin(self) -> pulumi.Output[bool]:
        """
        Indicates if the user is a delegated administrator.
        """
        return pulumi.get(self, "is_delegated_admin")

    @property
    @pulumi.getter(name="isEnforcedIn2StepVerification")
    def is_enforced_in2_step_verification(self) -> pulumi.Output[bool]:
        """
        Is 2-step verification enforced.
        """
        return pulumi.get(self, "is_enforced_in2_step_verification")

    @property
    @pulumi.getter(name="isEnrolledIn2StepVerification")
    def is_enrolled_in2_step_verification(self) -> pulumi.Output[bool]:
        """
        Is enrolled in 2-step verification.
        """
        return pulumi.get(self, "is_enrolled_in2_step_verification")

    @property
    @pulumi.getter(name="isMailboxSetup")
    def is_mailbox_setup(self) -> pulumi.Output[bool]:
        """
        Indicates if the user's Google mailbox is created. This property is only applicable if the user has been assigned a
        Gmail license.
        """
        return pulumi.get(self, "is_mailbox_setup")

    @property
    @pulumi.getter
    def keywords(self) -> pulumi.Output[Optional[Sequence['outputs.UserKeyword']]]:
        """
        A list of the user's keywords. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "keywords")

    @property
    @pulumi.getter
    def languages(self) -> pulumi.Output[Sequence['outputs.UserLanguage']]:
        """
        A list of the user's languages. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "languages")

    @property
    @pulumi.getter(name="lastLoginTime")
    def last_login_time(self) -> pulumi.Output[str]:
        """
        The last time the user logged into the user's account. The value is in ISO 8601 date and time format. The time is the
        complete date plus hours, minutes, and seconds in the form YYYY-MM-DDThh:mm:ssTZD. For example,
        2010-04-05T17:30:04+01:00.
        """
        return pulumi.get(self, "last_login_time")

    @property
    @pulumi.getter
    def locations(self) -> pulumi.Output[Optional[Sequence['outputs.UserLocation']]]:
        """
        A list of the user's locations. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "locations")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output['outputs.UserName']:
        """
        Holds the given and family names of the user, and the read-only fullName value. The maximum number of characters in the
        givenName and in the familyName values is 60. In addition, name values support unicode/UTF-8 characters, and can contain
        spaces, letters (a-z), numbers (0-9), dashes (-), forward slashes (/), and periods (.). Maximum allowed data size for
        this field is 1Kb.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="nonEditableAliases")
    def non_editable_aliases(self) -> pulumi.Output[Sequence[str]]:
        """
        asps.list of the user's non-editable alias email addresses. These are typically outside the account's primary domain or
        sub-domain.
        """
        return pulumi.get(self, "non_editable_aliases")

    @property
    @pulumi.getter(name="orgUnitPath")
    def org_unit_path(self) -> pulumi.Output[str]:
        """
        The full path of the parent organization associated with the user. If the parent organization is the top-level, it is
        represented as a forward slash (/).
        """
        return pulumi.get(self, "org_unit_path")

    @property
    @pulumi.getter
    def organizations(self) -> pulumi.Output[Optional[Sequence['outputs.UserOrganization']]]:
        """
        A list of organizations the user belongs to. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "organizations")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[Optional[str]]:
        """
        Stores the password for the user account. A password can contain any combination of ASCII characters. A minimum of 8
        characters is required. The maximum length is 100 characters. As the API does not return the value of password, this
        field is write-only, and the value stored in the state will be what is provided in the configuration. The field is
        required on create and will be empty on import.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter
    def phones(self) -> pulumi.Output[Optional[Sequence['outputs.UserPhone']]]:
        """
        A list of the user's phone numbers. The maximum allowed data size is 1Kb.
        """
        return pulumi.get(self, "phones")

    @property
    @pulumi.getter(name="posixAccounts")
    def posix_accounts(self) -> pulumi.Output[Optional[Sequence['outputs.UserPosixAccount']]]:
        """
        A list of POSIX account information for the user.
        """
        return pulumi.get(self, "posix_accounts")

    @property
    @pulumi.getter(name="primaryEmail")
    def primary_email(self) -> pulumi.Output[str]:
        """
        The user's primary email address. The primaryEmail must be unique and cannot be an alias of another user.
        """
        return pulumi.get(self, "primary_email")

    @property
    @pulumi.getter(name="recoveryEmail")
    def recovery_email(self) -> pulumi.Output[Optional[str]]:
        """
        Recovery email of the user.
        """
        return pulumi.get(self, "recovery_email")

    @property
    @pulumi.getter(name="recoveryPhone")
    def recovery_phone(self) -> pulumi.Output[Optional[str]]:
        """
        Recovery phone of the user. The phone number must be in the E.164 format, starting with the plus sign (+). Example:
        +16506661212.
        """
        return pulumi.get(self, "recovery_phone")

    @property
    @pulumi.getter
    def relations(self) -> pulumi.Output[Optional[Sequence['outputs.UserRelation']]]:
        """
        A list of the user's relationships to other users. The maximum allowed data size for this field is 2Kb.
        """
        return pulumi.get(self, "relations")

    @property
    @pulumi.getter(name="sshPublicKeys")
    def ssh_public_keys(self) -> pulumi.Output[Optional[Sequence['outputs.UserSshPublicKey']]]:
        """
        A list of SSH public keys. The maximum allowed data size is 10Kb.
        """
        return pulumi.get(self, "ssh_public_keys")

    @property
    @pulumi.getter
    def suspended(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates if user is suspended.
        """
        return pulumi.get(self, "suspended")

    @property
    @pulumi.getter(name="suspensionReason")
    def suspension_reason(self) -> pulumi.Output[str]:
        """
        Has the reason a user account is suspended either by the administrator or by Google at the time of suspension. The
        property is returned only if the suspended property is true.
        """
        return pulumi.get(self, "suspension_reason")

    @property
    @pulumi.getter(name="thumbnailPhotoEtag")
    def thumbnail_photo_etag(self) -> pulumi.Output[str]:
        """
        ETag of the user's photo
        """
        return pulumi.get(self, "thumbnail_photo_etag")

    @property
    @pulumi.getter(name="thumbnailPhotoUrl")
    def thumbnail_photo_url(self) -> pulumi.Output[str]:
        """
        Photo Url of the user.
        """
        return pulumi.get(self, "thumbnail_photo_url")

    @property
    @pulumi.getter
    def websites(self) -> pulumi.Output[Optional[Sequence['outputs.UserWebsite']]]:
        """
        A list of the user's websites. The maximum allowed data size is 2Kb.
        """
        return pulumi.get(self, "websites")

