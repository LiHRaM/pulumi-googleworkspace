# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['RoleAssignmentArgs', 'RoleAssignment']

@pulumi.input_type
class RoleAssignmentArgs:
    def __init__(__self__, *,
                 assigned_to: pulumi.Input[str],
                 role_id: pulumi.Input[str],
                 org_unit_id: Optional[pulumi.Input[str]] = None,
                 scope_type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a RoleAssignment resource.
        :param pulumi.Input[str] assigned_to: The unique ID of the user this role is assigned to.
        :param pulumi.Input[str] role_id: The ID of the role that is assigned.
        :param pulumi.Input[str] org_unit_id: If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this
               role is restricted to.
        :param pulumi.Input[str] scope_type: The scope in which this role is assigned. Valid values are : - `CUSTOMER` - `ORG_UNIT`
        """
        pulumi.set(__self__, "assigned_to", assigned_to)
        pulumi.set(__self__, "role_id", role_id)
        if org_unit_id is not None:
            pulumi.set(__self__, "org_unit_id", org_unit_id)
        if scope_type is not None:
            pulumi.set(__self__, "scope_type", scope_type)

    @property
    @pulumi.getter(name="assignedTo")
    def assigned_to(self) -> pulumi.Input[str]:
        """
        The unique ID of the user this role is assigned to.
        """
        return pulumi.get(self, "assigned_to")

    @assigned_to.setter
    def assigned_to(self, value: pulumi.Input[str]):
        pulumi.set(self, "assigned_to", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Input[str]:
        """
        The ID of the role that is assigned.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="orgUnitId")
    def org_unit_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this
        role is restricted to.
        """
        return pulumi.get(self, "org_unit_id")

    @org_unit_id.setter
    def org_unit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_unit_id", value)

    @property
    @pulumi.getter(name="scopeType")
    def scope_type(self) -> Optional[pulumi.Input[str]]:
        """
        The scope in which this role is assigned. Valid values are : - `CUSTOMER` - `ORG_UNIT`
        """
        return pulumi.get(self, "scope_type")

    @scope_type.setter
    def scope_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_type", value)


@pulumi.input_type
class _RoleAssignmentState:
    def __init__(__self__, *,
                 assigned_to: Optional[pulumi.Input[str]] = None,
                 etag: Optional[pulumi.Input[str]] = None,
                 org_unit_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 scope_type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering RoleAssignment resources.
        :param pulumi.Input[str] assigned_to: The unique ID of the user this role is assigned to.
        :param pulumi.Input[str] etag: ETag of the resource.
        :param pulumi.Input[str] org_unit_id: If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this
               role is restricted to.
        :param pulumi.Input[str] role_id: The ID of the role that is assigned.
        :param pulumi.Input[str] scope_type: The scope in which this role is assigned. Valid values are : - `CUSTOMER` - `ORG_UNIT`
        """
        if assigned_to is not None:
            pulumi.set(__self__, "assigned_to", assigned_to)
        if etag is not None:
            pulumi.set(__self__, "etag", etag)
        if org_unit_id is not None:
            pulumi.set(__self__, "org_unit_id", org_unit_id)
        if role_id is not None:
            pulumi.set(__self__, "role_id", role_id)
        if scope_type is not None:
            pulumi.set(__self__, "scope_type", scope_type)

    @property
    @pulumi.getter(name="assignedTo")
    def assigned_to(self) -> Optional[pulumi.Input[str]]:
        """
        The unique ID of the user this role is assigned to.
        """
        return pulumi.get(self, "assigned_to")

    @assigned_to.setter
    def assigned_to(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "assigned_to", value)

    @property
    @pulumi.getter
    def etag(self) -> Optional[pulumi.Input[str]]:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @etag.setter
    def etag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "etag", value)

    @property
    @pulumi.getter(name="orgUnitId")
    def org_unit_id(self) -> Optional[pulumi.Input[str]]:
        """
        If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this
        role is restricted to.
        """
        return pulumi.get(self, "org_unit_id")

    @org_unit_id.setter
    def org_unit_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "org_unit_id", value)

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the role that is assigned.
        """
        return pulumi.get(self, "role_id")

    @role_id.setter
    def role_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "role_id", value)

    @property
    @pulumi.getter(name="scopeType")
    def scope_type(self) -> Optional[pulumi.Input[str]]:
        """
        The scope in which this role is assigned. Valid values are : - `CUSTOMER` - `ORG_UNIT`
        """
        return pulumi.get(self, "scope_type")

    @scope_type.setter
    def scope_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_type", value)


class RoleAssignment(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assigned_to: Optional[pulumi.Input[str]] = None,
                 org_unit_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 scope_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        ## Import

        ```sh
         $ pulumi import googleworkspace:index/roleAssignment:RoleAssignment dwight 12345678901234567
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assigned_to: The unique ID of the user this role is assigned to.
        :param pulumi.Input[str] org_unit_id: If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this
               role is restricted to.
        :param pulumi.Input[str] role_id: The ID of the role that is assigned.
        :param pulumi.Input[str] scope_type: The scope in which this role is assigned. Valid values are : - `CUSTOMER` - `ORG_UNIT`
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: RoleAssignmentArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        ```sh
         $ pulumi import googleworkspace:index/roleAssignment:RoleAssignment dwight 12345678901234567
        ```

        :param str resource_name: The name of the resource.
        :param RoleAssignmentArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(RoleAssignmentArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 assigned_to: Optional[pulumi.Input[str]] = None,
                 org_unit_id: Optional[pulumi.Input[str]] = None,
                 role_id: Optional[pulumi.Input[str]] = None,
                 scope_type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = RoleAssignmentArgs.__new__(RoleAssignmentArgs)

            if assigned_to is None and not opts.urn:
                raise TypeError("Missing required property 'assigned_to'")
            __props__.__dict__["assigned_to"] = assigned_to
            __props__.__dict__["org_unit_id"] = org_unit_id
            if role_id is None and not opts.urn:
                raise TypeError("Missing required property 'role_id'")
            __props__.__dict__["role_id"] = role_id
            __props__.__dict__["scope_type"] = scope_type
            __props__.__dict__["etag"] = None
        super(RoleAssignment, __self__).__init__(
            'googleworkspace:index/roleAssignment:RoleAssignment',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            assigned_to: Optional[pulumi.Input[str]] = None,
            etag: Optional[pulumi.Input[str]] = None,
            org_unit_id: Optional[pulumi.Input[str]] = None,
            role_id: Optional[pulumi.Input[str]] = None,
            scope_type: Optional[pulumi.Input[str]] = None) -> 'RoleAssignment':
        """
        Get an existing RoleAssignment resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] assigned_to: The unique ID of the user this role is assigned to.
        :param pulumi.Input[str] etag: ETag of the resource.
        :param pulumi.Input[str] org_unit_id: If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this
               role is restricted to.
        :param pulumi.Input[str] role_id: The ID of the role that is assigned.
        :param pulumi.Input[str] scope_type: The scope in which this role is assigned. Valid values are : - `CUSTOMER` - `ORG_UNIT`
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _RoleAssignmentState.__new__(_RoleAssignmentState)

        __props__.__dict__["assigned_to"] = assigned_to
        __props__.__dict__["etag"] = etag
        __props__.__dict__["org_unit_id"] = org_unit_id
        __props__.__dict__["role_id"] = role_id
        __props__.__dict__["scope_type"] = scope_type
        return RoleAssignment(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="assignedTo")
    def assigned_to(self) -> pulumi.Output[str]:
        """
        The unique ID of the user this role is assigned to.
        """
        return pulumi.get(self, "assigned_to")

    @property
    @pulumi.getter
    def etag(self) -> pulumi.Output[str]:
        """
        ETag of the resource.
        """
        return pulumi.get(self, "etag")

    @property
    @pulumi.getter(name="orgUnitId")
    def org_unit_id(self) -> pulumi.Output[Optional[str]]:
        """
        If the role is restricted to an organization unit, this contains the ID for the organization unit the exercise of this
        role is restricted to.
        """
        return pulumi.get(self, "org_unit_id")

    @property
    @pulumi.getter(name="roleId")
    def role_id(self) -> pulumi.Output[str]:
        """
        The ID of the role that is assigned.
        """
        return pulumi.get(self, "role_id")

    @property
    @pulumi.getter(name="scopeType")
    def scope_type(self) -> pulumi.Output[Optional[str]]:
        """
        The scope in which this role is assigned. Valid values are : - `CUSTOMER` - `ORG_UNIT`
        """
        return pulumi.get(self, "scope_type")

